// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Models;

namespace fhirCsR4.Serialization
{
  /// <summary>
  /// Common resource converter to support polymorphic deserialization.
  /// </summary>
  public class JsonStreamResourceConverter : JsonConverter<Resource>
  {
    private static readonly byte[] _startObject = Encoding.UTF8.GetBytes("{");
    private static readonly byte[] _endObject = Encoding.UTF8.GetBytes("}");
    private static readonly byte[] _startArray = Encoding.UTF8.GetBytes("[");
    private static readonly byte[] _endArray = Encoding.UTF8.GetBytes("]");
    private static readonly byte[] _comma = Encoding.UTF8.GetBytes(",");
    private static readonly byte[] _propertySep = Encoding.UTF8.GetBytes(":");
    private static readonly byte[] _quote = Encoding.UTF8.GetBytes("\"");

    /// <summary>
    /// Determines whether the specified type can be converted.
    /// </summary>
    public override bool CanConvert(Type objectType) =>
      typeof(Resource).IsAssignableFrom(objectType);

    /// <summary>
    /// Writes a specified value as JSON.
    /// </summary>
    public override void Write(Utf8JsonWriter writer, Resource resource, JsonSerializerOptions options)
    {
      switch (resource)
      {
        case fhirCsR4.Models.Account typedAccount:
          typedAccount.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ActivityDefinition typedActivityDefinition:
          typedActivityDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.AdministrableProductDefinition typedAdministrableProductDefinition:
          typedAdministrableProductDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.AdverseEvent typedAdverseEvent:
          typedAdverseEvent.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.AllergyIntolerance typedAllergyIntolerance:
          typedAllergyIntolerance.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Appointment typedAppointment:
          typedAppointment.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.AppointmentResponse typedAppointmentResponse:
          typedAppointmentResponse.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.AuditEvent typedAuditEvent:
          typedAuditEvent.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Basic typedBasic:
          typedBasic.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Binary typedBinary:
          typedBinary.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.BiologicallyDerivedProduct typedBiologicallyDerivedProduct:
          typedBiologicallyDerivedProduct.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.BodyStructure typedBodyStructure:
          typedBodyStructure.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Bundle typedBundle:
          typedBundle.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.CapabilityStatement typedCapabilityStatement:
          typedCapabilityStatement.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.CarePlan typedCarePlan:
          typedCarePlan.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.CareTeam typedCareTeam:
          typedCareTeam.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.CatalogEntry typedCatalogEntry:
          typedCatalogEntry.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ChargeItem typedChargeItem:
          typedChargeItem.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ChargeItemDefinition typedChargeItemDefinition:
          typedChargeItemDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Citation typedCitation:
          typedCitation.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Claim typedClaim:
          typedClaim.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ClaimResponse typedClaimResponse:
          typedClaimResponse.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ClinicalImpression typedClinicalImpression:
          typedClinicalImpression.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ClinicalUseIssue typedClinicalUseIssue:
          typedClinicalUseIssue.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.CodeSystem typedCodeSystem:
          typedCodeSystem.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Communication typedCommunication:
          typedCommunication.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.CommunicationRequest typedCommunicationRequest:
          typedCommunicationRequest.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.CompartmentDefinition typedCompartmentDefinition:
          typedCompartmentDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Composition typedComposition:
          typedComposition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ConceptMap typedConceptMap:
          typedConceptMap.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Condition typedCondition:
          typedCondition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Consent typedConsent:
          typedConsent.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Contract typedContract:
          typedContract.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Coverage typedCoverage:
          typedCoverage.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.CoverageEligibilityRequest typedCoverageEligibilityRequest:
          typedCoverageEligibilityRequest.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.CoverageEligibilityResponse typedCoverageEligibilityResponse:
          typedCoverageEligibilityResponse.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.DetectedIssue typedDetectedIssue:
          typedDetectedIssue.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Device typedDevice:
          typedDevice.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.DeviceDefinition typedDeviceDefinition:
          typedDeviceDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.DeviceMetric typedDeviceMetric:
          typedDeviceMetric.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.DeviceRequest typedDeviceRequest:
          typedDeviceRequest.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.DeviceUseStatement typedDeviceUseStatement:
          typedDeviceUseStatement.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.DiagnosticReport typedDiagnosticReport:
          typedDiagnosticReport.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.DocumentManifest typedDocumentManifest:
          typedDocumentManifest.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.DocumentReference typedDocumentReference:
          typedDocumentReference.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Encounter typedEncounter:
          typedEncounter.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Endpoint typedEndpoint:
          typedEndpoint.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.EnrollmentRequest typedEnrollmentRequest:
          typedEnrollmentRequest.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.EnrollmentResponse typedEnrollmentResponse:
          typedEnrollmentResponse.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.EpisodeOfCare typedEpisodeOfCare:
          typedEpisodeOfCare.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.EventDefinition typedEventDefinition:
          typedEventDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Evidence typedEvidence:
          typedEvidence.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.EvidenceReport typedEvidenceReport:
          typedEvidenceReport.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.EvidenceVariable typedEvidenceVariable:
          typedEvidenceVariable.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ExampleScenario typedExampleScenario:
          typedExampleScenario.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ExplanationOfBenefit typedExplanationOfBenefit:
          typedExplanationOfBenefit.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.FamilyMemberHistory typedFamilyMemberHistory:
          typedFamilyMemberHistory.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Flag typedFlag:
          typedFlag.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Goal typedGoal:
          typedGoal.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.GraphDefinition typedGraphDefinition:
          typedGraphDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Group typedGroup:
          typedGroup.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.GuidanceResponse typedGuidanceResponse:
          typedGuidanceResponse.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.HealthcareService typedHealthcareService:
          typedHealthcareService.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ImagingStudy typedImagingStudy:
          typedImagingStudy.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Immunization typedImmunization:
          typedImmunization.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ImmunizationEvaluation typedImmunizationEvaluation:
          typedImmunizationEvaluation.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ImmunizationRecommendation typedImmunizationRecommendation:
          typedImmunizationRecommendation.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ImplementationGuide typedImplementationGuide:
          typedImplementationGuide.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Ingredient typedIngredient:
          typedIngredient.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.InsurancePlan typedInsurancePlan:
          typedInsurancePlan.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Invoice typedInvoice:
          typedInvoice.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Library typedLibrary:
          typedLibrary.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Linkage typedLinkage:
          typedLinkage.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.List typedList:
          typedList.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Location typedLocation:
          typedLocation.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ManufacturedItemDefinition typedManufacturedItemDefinition:
          typedManufacturedItemDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Measure typedMeasure:
          typedMeasure.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MeasureReport typedMeasureReport:
          typedMeasureReport.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Media typedMedia:
          typedMedia.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Medication typedMedication:
          typedMedication.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MedicationAdministration typedMedicationAdministration:
          typedMedicationAdministration.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MedicationDispense typedMedicationDispense:
          typedMedicationDispense.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MedicationKnowledge typedMedicationKnowledge:
          typedMedicationKnowledge.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MedicationRequest typedMedicationRequest:
          typedMedicationRequest.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MedicationStatement typedMedicationStatement:
          typedMedicationStatement.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MedicinalProductDefinition typedMedicinalProductDefinition:
          typedMedicinalProductDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MessageDefinition typedMessageDefinition:
          typedMessageDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MessageHeader typedMessageHeader:
          typedMessageHeader.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.MolecularSequence typedMolecularSequence:
          typedMolecularSequence.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.NamingSystem typedNamingSystem:
          typedNamingSystem.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.NutritionOrder typedNutritionOrder:
          typedNutritionOrder.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.NutritionProduct typedNutritionProduct:
          typedNutritionProduct.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Observation typedObservation:
          typedObservation.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ObservationDefinition typedObservationDefinition:
          typedObservationDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.OperationDefinition typedOperationDefinition:
          typedOperationDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.OperationOutcome typedOperationOutcome:
          typedOperationOutcome.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Organization typedOrganization:
          typedOrganization.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.OrganizationAffiliation typedOrganizationAffiliation:
          typedOrganizationAffiliation.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.PackagedProductDefinition typedPackagedProductDefinition:
          typedPackagedProductDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Parameters typedParameters:
          typedParameters.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Patient typedPatient:
          typedPatient.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.PaymentNotice typedPaymentNotice:
          typedPaymentNotice.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.PaymentReconciliation typedPaymentReconciliation:
          typedPaymentReconciliation.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Person typedPerson:
          typedPerson.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.PlanDefinition typedPlanDefinition:
          typedPlanDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Practitioner typedPractitioner:
          typedPractitioner.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.PractitionerRole typedPractitionerRole:
          typedPractitionerRole.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Procedure typedProcedure:
          typedProcedure.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Provenance typedProvenance:
          typedProvenance.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Questionnaire typedQuestionnaire:
          typedQuestionnaire.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.QuestionnaireResponse typedQuestionnaireResponse:
          typedQuestionnaireResponse.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.RegulatedAuthorization typedRegulatedAuthorization:
          typedRegulatedAuthorization.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.RelatedPerson typedRelatedPerson:
          typedRelatedPerson.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.RequestGroup typedRequestGroup:
          typedRequestGroup.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ResearchDefinition typedResearchDefinition:
          typedResearchDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ResearchElementDefinition typedResearchElementDefinition:
          typedResearchElementDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ResearchStudy typedResearchStudy:
          typedResearchStudy.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ResearchSubject typedResearchSubject:
          typedResearchSubject.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.RiskAssessment typedRiskAssessment:
          typedRiskAssessment.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Schedule typedSchedule:
          typedSchedule.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.SearchParameter typedSearchParameter:
          typedSearchParameter.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ServiceRequest typedServiceRequest:
          typedServiceRequest.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Slot typedSlot:
          typedSlot.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Specimen typedSpecimen:
          typedSpecimen.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.SpecimenDefinition typedSpecimenDefinition:
          typedSpecimenDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.StructureDefinition typedStructureDefinition:
          typedStructureDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.StructureMap typedStructureMap:
          typedStructureMap.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Subscription typedSubscription:
          typedSubscription.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.SubscriptionStatus typedSubscriptionStatus:
          typedSubscriptionStatus.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.SubscriptionTopic typedSubscriptionTopic:
          typedSubscriptionTopic.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Substance typedSubstance:
          typedSubstance.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.SubstanceDefinition typedSubstanceDefinition:
          typedSubstanceDefinition.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.SupplyDelivery typedSupplyDelivery:
          typedSupplyDelivery.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.SupplyRequest typedSupplyRequest:
          typedSupplyRequest.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.Task typedTask:
          typedTask.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.TerminologyCapabilities typedTerminologyCapabilities:
          typedTerminologyCapabilities.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.TestReport typedTestReport:
          typedTestReport.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.TestScript typedTestScript:
          typedTestScript.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.ValueSet typedValueSet:
          typedValueSet.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.VerificationResult typedVerificationResult:
          typedVerificationResult.SerializeJson(writer, options, true);
          break;
        case fhirCsR4.Models.VisionPrescription typedVisionPrescription:
          typedVisionPrescription.SerializeJson(writer, options, true);
          break;
      }

      writer.Flush();
    }

    /// <summary>
    /// Reads and converts the JSON to a typed object.
    /// </summary>
    public override Resource Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
      return PolymorphicRead(ref reader, typeToConvert, options);
    }

    /// <summary>
    /// Copy raw data from a Utf8JsonReader to a MemoryStream.
    /// </summary>
    private static void WriteReaderValueBytes(ref MemoryStream ms, ref Utf8JsonReader reader)
    {
      if (reader.HasValueSequence)
      {
        byte[] data = new byte[reader.ValueSequence.Length];
        reader.ValueSequence.CopyTo(data);
        ms.Write(data);
        return;
      }

      ms.Write(reader.ValueSpan);
    }

    /// <summary>
    /// Add a JSON seperator token, if necessary.
    /// </summary>
    private static void AddSeperatorIfNeeded(ref MemoryStream ms, ref Utf8JsonReader reader, JsonTokenType last)
    {
      switch (last)
      {
        case JsonTokenType.StartObject:
        case JsonTokenType.StartArray:
          // do nothing
          break;
        case JsonTokenType.PropertyName:
          ms.Write(_propertySep);
          break;
        default:
          ms.Write(_comma);
          break;
      }
    }

    /// <summary>
    /// Read override to handle polymorphic reading of resources.
    /// </summary>
    public static Resource PolymorphicRead(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
      string propertyName = null;
      string resourceType = null;

      if (reader.TokenType != JsonTokenType.StartObject)
      {
        throw new JsonException();
      }

      reader.Read();
      if (reader.TokenType != JsonTokenType.PropertyName)
      {
        throw new JsonException();
      }

      propertyName = reader.GetString();
      if (propertyName == "resourceType")
      {
        reader.Read();
        if (reader.TokenType != JsonTokenType.String)
        {
          throw new JsonException();
        }

        resourceType = reader.GetString();

        return DoPolymorphicRead(ref reader, options, resourceType);
      }

      MemoryStream ms = new MemoryStream(4096);

      ms.Write(Encoding.UTF8.GetBytes($"{{\"{propertyName}\""));
      propertyName = string.Empty;

      int depth = reader.CurrentDepth;
      bool done = false;
      bool nextValueIsResourceType = false;
      JsonTokenType lastToken = JsonTokenType.PropertyName;

      while ((!done) && reader.Read())
      {
        switch (reader.TokenType)
        {
          case JsonTokenType.StartObject:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            ms.Write(_startObject);
            break;

          case JsonTokenType.EndObject:
            ms.Write(_endObject);
            if (reader.CurrentDepth == (depth - 1))
            {
              done = true;
            }
            break;

          case JsonTokenType.StartArray:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            ms.Write(_startArray);
            break;

          case JsonTokenType.EndArray:
            ms.Write(_endArray);
            break;

          case JsonTokenType.PropertyName:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            if (reader.CurrentDepth == depth)
            {
              if (reader.ValueTextEquals("resourceType"))
              {
                nextValueIsResourceType = true;
              }
            }

            ms.Write(_quote);
            WriteReaderValueBytes(ref ms, ref reader);
            ms.Write(_quote);
            break;

          case JsonTokenType.Comment:
            break;

          case JsonTokenType.String:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            if (nextValueIsResourceType)
            {
              resourceType = reader.GetString();
              nextValueIsResourceType = false;
            }

            ms.Write(_quote);
            WriteReaderValueBytes(ref ms, ref reader);
            ms.Write(_quote);
            break;

          case JsonTokenType.Number:
          case JsonTokenType.True:
          case JsonTokenType.False:
          case JsonTokenType.Null:
          default:
            AddSeperatorIfNeeded(ref ms, ref reader, lastToken);
            WriteReaderValueBytes(ref ms, ref reader);
            break;
        }

        lastToken = reader.TokenType;
      }

      ms.Flush();
      Utf8JsonReader secondary = new Utf8JsonReader(ms.GetBuffer());

      return DoPolymorphicRead(ref secondary, options, resourceType);
    }
    /// <summary>
    /// Sub-function for simpler handling of reader switching.
    /// </summary>
    public static Resource DoPolymorphicRead(ref Utf8JsonReader reader, JsonSerializerOptions options, string resourceType)
    {
      IFhirJsonSerializable target = null;
      switch (resourceType)
      {
        case "Account":
          target = new fhirCsR4.Models.Account();
          target.DeserializeJson(ref reader, options);
          break;
        case "ActivityDefinition":
          target = new fhirCsR4.Models.ActivityDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "AdministrableProductDefinition":
          target = new fhirCsR4.Models.AdministrableProductDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "AdverseEvent":
          target = new fhirCsR4.Models.AdverseEvent();
          target.DeserializeJson(ref reader, options);
          break;
        case "AllergyIntolerance":
          target = new fhirCsR4.Models.AllergyIntolerance();
          target.DeserializeJson(ref reader, options);
          break;
        case "Appointment":
          target = new fhirCsR4.Models.Appointment();
          target.DeserializeJson(ref reader, options);
          break;
        case "AppointmentResponse":
          target = new fhirCsR4.Models.AppointmentResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "AuditEvent":
          target = new fhirCsR4.Models.AuditEvent();
          target.DeserializeJson(ref reader, options);
          break;
        case "Basic":
          target = new fhirCsR4.Models.Basic();
          target.DeserializeJson(ref reader, options);
          break;
        case "Binary":
          target = new fhirCsR4.Models.Binary();
          target.DeserializeJson(ref reader, options);
          break;
        case "BiologicallyDerivedProduct":
          target = new fhirCsR4.Models.BiologicallyDerivedProduct();
          target.DeserializeJson(ref reader, options);
          break;
        case "BodyStructure":
          target = new fhirCsR4.Models.BodyStructure();
          target.DeserializeJson(ref reader, options);
          break;
        case "Bundle":
          target = new fhirCsR4.Models.Bundle();
          target.DeserializeJson(ref reader, options);
          break;
        case "CapabilityStatement":
          target = new fhirCsR4.Models.CapabilityStatement();
          target.DeserializeJson(ref reader, options);
          break;
        case "CarePlan":
          target = new fhirCsR4.Models.CarePlan();
          target.DeserializeJson(ref reader, options);
          break;
        case "CareTeam":
          target = new fhirCsR4.Models.CareTeam();
          target.DeserializeJson(ref reader, options);
          break;
        case "CatalogEntry":
          target = new fhirCsR4.Models.CatalogEntry();
          target.DeserializeJson(ref reader, options);
          break;
        case "ChargeItem":
          target = new fhirCsR4.Models.ChargeItem();
          target.DeserializeJson(ref reader, options);
          break;
        case "ChargeItemDefinition":
          target = new fhirCsR4.Models.ChargeItemDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Citation":
          target = new fhirCsR4.Models.Citation();
          target.DeserializeJson(ref reader, options);
          break;
        case "Claim":
          target = new fhirCsR4.Models.Claim();
          target.DeserializeJson(ref reader, options);
          break;
        case "ClaimResponse":
          target = new fhirCsR4.Models.ClaimResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "ClinicalImpression":
          target = new fhirCsR4.Models.ClinicalImpression();
          target.DeserializeJson(ref reader, options);
          break;
        case "ClinicalUseIssue":
          target = new fhirCsR4.Models.ClinicalUseIssue();
          target.DeserializeJson(ref reader, options);
          break;
        case "CodeSystem":
          target = new fhirCsR4.Models.CodeSystem();
          target.DeserializeJson(ref reader, options);
          break;
        case "Communication":
          target = new fhirCsR4.Models.Communication();
          target.DeserializeJson(ref reader, options);
          break;
        case "CommunicationRequest":
          target = new fhirCsR4.Models.CommunicationRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "CompartmentDefinition":
          target = new fhirCsR4.Models.CompartmentDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Composition":
          target = new fhirCsR4.Models.Composition();
          target.DeserializeJson(ref reader, options);
          break;
        case "ConceptMap":
          target = new fhirCsR4.Models.ConceptMap();
          target.DeserializeJson(ref reader, options);
          break;
        case "Condition":
          target = new fhirCsR4.Models.Condition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Consent":
          target = new fhirCsR4.Models.Consent();
          target.DeserializeJson(ref reader, options);
          break;
        case "Contract":
          target = new fhirCsR4.Models.Contract();
          target.DeserializeJson(ref reader, options);
          break;
        case "Coverage":
          target = new fhirCsR4.Models.Coverage();
          target.DeserializeJson(ref reader, options);
          break;
        case "CoverageEligibilityRequest":
          target = new fhirCsR4.Models.CoverageEligibilityRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "CoverageEligibilityResponse":
          target = new fhirCsR4.Models.CoverageEligibilityResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "DetectedIssue":
          target = new fhirCsR4.Models.DetectedIssue();
          target.DeserializeJson(ref reader, options);
          break;
        case "Device":
          target = new fhirCsR4.Models.Device();
          target.DeserializeJson(ref reader, options);
          break;
        case "DeviceDefinition":
          target = new fhirCsR4.Models.DeviceDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "DeviceMetric":
          target = new fhirCsR4.Models.DeviceMetric();
          target.DeserializeJson(ref reader, options);
          break;
        case "DeviceRequest":
          target = new fhirCsR4.Models.DeviceRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "DeviceUseStatement":
          target = new fhirCsR4.Models.DeviceUseStatement();
          target.DeserializeJson(ref reader, options);
          break;
        case "DiagnosticReport":
          target = new fhirCsR4.Models.DiagnosticReport();
          target.DeserializeJson(ref reader, options);
          break;
        case "DocumentManifest":
          target = new fhirCsR4.Models.DocumentManifest();
          target.DeserializeJson(ref reader, options);
          break;
        case "DocumentReference":
          target = new fhirCsR4.Models.DocumentReference();
          target.DeserializeJson(ref reader, options);
          break;
        case "Encounter":
          target = new fhirCsR4.Models.Encounter();
          target.DeserializeJson(ref reader, options);
          break;
        case "Endpoint":
          target = new fhirCsR4.Models.Endpoint();
          target.DeserializeJson(ref reader, options);
          break;
        case "EnrollmentRequest":
          target = new fhirCsR4.Models.EnrollmentRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "EnrollmentResponse":
          target = new fhirCsR4.Models.EnrollmentResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "EpisodeOfCare":
          target = new fhirCsR4.Models.EpisodeOfCare();
          target.DeserializeJson(ref reader, options);
          break;
        case "EventDefinition":
          target = new fhirCsR4.Models.EventDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Evidence":
          target = new fhirCsR4.Models.Evidence();
          target.DeserializeJson(ref reader, options);
          break;
        case "EvidenceReport":
          target = new fhirCsR4.Models.EvidenceReport();
          target.DeserializeJson(ref reader, options);
          break;
        case "EvidenceVariable":
          target = new fhirCsR4.Models.EvidenceVariable();
          target.DeserializeJson(ref reader, options);
          break;
        case "ExampleScenario":
          target = new fhirCsR4.Models.ExampleScenario();
          target.DeserializeJson(ref reader, options);
          break;
        case "ExplanationOfBenefit":
          target = new fhirCsR4.Models.ExplanationOfBenefit();
          target.DeserializeJson(ref reader, options);
          break;
        case "FamilyMemberHistory":
          target = new fhirCsR4.Models.FamilyMemberHistory();
          target.DeserializeJson(ref reader, options);
          break;
        case "Flag":
          target = new fhirCsR4.Models.Flag();
          target.DeserializeJson(ref reader, options);
          break;
        case "Goal":
          target = new fhirCsR4.Models.Goal();
          target.DeserializeJson(ref reader, options);
          break;
        case "GraphDefinition":
          target = new fhirCsR4.Models.GraphDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Group":
          target = new fhirCsR4.Models.Group();
          target.DeserializeJson(ref reader, options);
          break;
        case "GuidanceResponse":
          target = new fhirCsR4.Models.GuidanceResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "HealthcareService":
          target = new fhirCsR4.Models.HealthcareService();
          target.DeserializeJson(ref reader, options);
          break;
        case "ImagingStudy":
          target = new fhirCsR4.Models.ImagingStudy();
          target.DeserializeJson(ref reader, options);
          break;
        case "Immunization":
          target = new fhirCsR4.Models.Immunization();
          target.DeserializeJson(ref reader, options);
          break;
        case "ImmunizationEvaluation":
          target = new fhirCsR4.Models.ImmunizationEvaluation();
          target.DeserializeJson(ref reader, options);
          break;
        case "ImmunizationRecommendation":
          target = new fhirCsR4.Models.ImmunizationRecommendation();
          target.DeserializeJson(ref reader, options);
          break;
        case "ImplementationGuide":
          target = new fhirCsR4.Models.ImplementationGuide();
          target.DeserializeJson(ref reader, options);
          break;
        case "Ingredient":
          target = new fhirCsR4.Models.Ingredient();
          target.DeserializeJson(ref reader, options);
          break;
        case "InsurancePlan":
          target = new fhirCsR4.Models.InsurancePlan();
          target.DeserializeJson(ref reader, options);
          break;
        case "Invoice":
          target = new fhirCsR4.Models.Invoice();
          target.DeserializeJson(ref reader, options);
          break;
        case "Library":
          target = new fhirCsR4.Models.Library();
          target.DeserializeJson(ref reader, options);
          break;
        case "Linkage":
          target = new fhirCsR4.Models.Linkage();
          target.DeserializeJson(ref reader, options);
          break;
        case "List":
          target = new fhirCsR4.Models.List();
          target.DeserializeJson(ref reader, options);
          break;
        case "Location":
          target = new fhirCsR4.Models.Location();
          target.DeserializeJson(ref reader, options);
          break;
        case "ManufacturedItemDefinition":
          target = new fhirCsR4.Models.ManufacturedItemDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Measure":
          target = new fhirCsR4.Models.Measure();
          target.DeserializeJson(ref reader, options);
          break;
        case "MeasureReport":
          target = new fhirCsR4.Models.MeasureReport();
          target.DeserializeJson(ref reader, options);
          break;
        case "Media":
          target = new fhirCsR4.Models.Media();
          target.DeserializeJson(ref reader, options);
          break;
        case "Medication":
          target = new fhirCsR4.Models.Medication();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationAdministration":
          target = new fhirCsR4.Models.MedicationAdministration();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationDispense":
          target = new fhirCsR4.Models.MedicationDispense();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationKnowledge":
          target = new fhirCsR4.Models.MedicationKnowledge();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationRequest":
          target = new fhirCsR4.Models.MedicationRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicationStatement":
          target = new fhirCsR4.Models.MedicationStatement();
          target.DeserializeJson(ref reader, options);
          break;
        case "MedicinalProductDefinition":
          target = new fhirCsR4.Models.MedicinalProductDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "MessageDefinition":
          target = new fhirCsR4.Models.MessageDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "MessageHeader":
          target = new fhirCsR4.Models.MessageHeader();
          target.DeserializeJson(ref reader, options);
          break;
        case "MolecularSequence":
          target = new fhirCsR4.Models.MolecularSequence();
          target.DeserializeJson(ref reader, options);
          break;
        case "NamingSystem":
          target = new fhirCsR4.Models.NamingSystem();
          target.DeserializeJson(ref reader, options);
          break;
        case "NutritionOrder":
          target = new fhirCsR4.Models.NutritionOrder();
          target.DeserializeJson(ref reader, options);
          break;
        case "NutritionProduct":
          target = new fhirCsR4.Models.NutritionProduct();
          target.DeserializeJson(ref reader, options);
          break;
        case "Observation":
          target = new fhirCsR4.Models.Observation();
          target.DeserializeJson(ref reader, options);
          break;
        case "ObservationDefinition":
          target = new fhirCsR4.Models.ObservationDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "OperationDefinition":
          target = new fhirCsR4.Models.OperationDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "OperationOutcome":
          target = new fhirCsR4.Models.OperationOutcome();
          target.DeserializeJson(ref reader, options);
          break;
        case "Organization":
          target = new fhirCsR4.Models.Organization();
          target.DeserializeJson(ref reader, options);
          break;
        case "OrganizationAffiliation":
          target = new fhirCsR4.Models.OrganizationAffiliation();
          target.DeserializeJson(ref reader, options);
          break;
        case "PackagedProductDefinition":
          target = new fhirCsR4.Models.PackagedProductDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Parameters":
          target = new fhirCsR4.Models.Parameters();
          target.DeserializeJson(ref reader, options);
          break;
        case "Patient":
          target = new fhirCsR4.Models.Patient();
          target.DeserializeJson(ref reader, options);
          break;
        case "PaymentNotice":
          target = new fhirCsR4.Models.PaymentNotice();
          target.DeserializeJson(ref reader, options);
          break;
        case "PaymentReconciliation":
          target = new fhirCsR4.Models.PaymentReconciliation();
          target.DeserializeJson(ref reader, options);
          break;
        case "Person":
          target = new fhirCsR4.Models.Person();
          target.DeserializeJson(ref reader, options);
          break;
        case "PlanDefinition":
          target = new fhirCsR4.Models.PlanDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "Practitioner":
          target = new fhirCsR4.Models.Practitioner();
          target.DeserializeJson(ref reader, options);
          break;
        case "PractitionerRole":
          target = new fhirCsR4.Models.PractitionerRole();
          target.DeserializeJson(ref reader, options);
          break;
        case "Procedure":
          target = new fhirCsR4.Models.Procedure();
          target.DeserializeJson(ref reader, options);
          break;
        case "Provenance":
          target = new fhirCsR4.Models.Provenance();
          target.DeserializeJson(ref reader, options);
          break;
        case "Questionnaire":
          target = new fhirCsR4.Models.Questionnaire();
          target.DeserializeJson(ref reader, options);
          break;
        case "QuestionnaireResponse":
          target = new fhirCsR4.Models.QuestionnaireResponse();
          target.DeserializeJson(ref reader, options);
          break;
        case "RegulatedAuthorization":
          target = new fhirCsR4.Models.RegulatedAuthorization();
          target.DeserializeJson(ref reader, options);
          break;
        case "RelatedPerson":
          target = new fhirCsR4.Models.RelatedPerson();
          target.DeserializeJson(ref reader, options);
          break;
        case "RequestGroup":
          target = new fhirCsR4.Models.RequestGroup();
          target.DeserializeJson(ref reader, options);
          break;
        case "ResearchDefinition":
          target = new fhirCsR4.Models.ResearchDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "ResearchElementDefinition":
          target = new fhirCsR4.Models.ResearchElementDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "ResearchStudy":
          target = new fhirCsR4.Models.ResearchStudy();
          target.DeserializeJson(ref reader, options);
          break;
        case "ResearchSubject":
          target = new fhirCsR4.Models.ResearchSubject();
          target.DeserializeJson(ref reader, options);
          break;
        case "RiskAssessment":
          target = new fhirCsR4.Models.RiskAssessment();
          target.DeserializeJson(ref reader, options);
          break;
        case "Schedule":
          target = new fhirCsR4.Models.Schedule();
          target.DeserializeJson(ref reader, options);
          break;
        case "SearchParameter":
          target = new fhirCsR4.Models.SearchParameter();
          target.DeserializeJson(ref reader, options);
          break;
        case "ServiceRequest":
          target = new fhirCsR4.Models.ServiceRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "Slot":
          target = new fhirCsR4.Models.Slot();
          target.DeserializeJson(ref reader, options);
          break;
        case "Specimen":
          target = new fhirCsR4.Models.Specimen();
          target.DeserializeJson(ref reader, options);
          break;
        case "SpecimenDefinition":
          target = new fhirCsR4.Models.SpecimenDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "StructureDefinition":
          target = new fhirCsR4.Models.StructureDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "StructureMap":
          target = new fhirCsR4.Models.StructureMap();
          target.DeserializeJson(ref reader, options);
          break;
        case "Subscription":
          target = new fhirCsR4.Models.Subscription();
          target.DeserializeJson(ref reader, options);
          break;
        case "SubscriptionStatus":
          target = new fhirCsR4.Models.SubscriptionStatus();
          target.DeserializeJson(ref reader, options);
          break;
        case "SubscriptionTopic":
          target = new fhirCsR4.Models.SubscriptionTopic();
          target.DeserializeJson(ref reader, options);
          break;
        case "Substance":
          target = new fhirCsR4.Models.Substance();
          target.DeserializeJson(ref reader, options);
          break;
        case "SubstanceDefinition":
          target = new fhirCsR4.Models.SubstanceDefinition();
          target.DeserializeJson(ref reader, options);
          break;
        case "SupplyDelivery":
          target = new fhirCsR4.Models.SupplyDelivery();
          target.DeserializeJson(ref reader, options);
          break;
        case "SupplyRequest":
          target = new fhirCsR4.Models.SupplyRequest();
          target.DeserializeJson(ref reader, options);
          break;
        case "Task":
          target = new fhirCsR4.Models.Task();
          target.DeserializeJson(ref reader, options);
          break;
        case "TerminologyCapabilities":
          target = new fhirCsR4.Models.TerminologyCapabilities();
          target.DeserializeJson(ref reader, options);
          break;
        case "TestReport":
          target = new fhirCsR4.Models.TestReport();
          target.DeserializeJson(ref reader, options);
          break;
        case "TestScript":
          target = new fhirCsR4.Models.TestScript();
          target.DeserializeJson(ref reader, options);
          break;
        case "ValueSet":
          target = new fhirCsR4.Models.ValueSet();
          target.DeserializeJson(ref reader, options);
          break;
        case "VerificationResult":
          target = new fhirCsR4.Models.VerificationResult();
          target.DeserializeJson(ref reader, options);
          break;
        case "VisionPrescription":
          target = new fhirCsR4.Models.VisionPrescription();
          target.DeserializeJson(ref reader, options);
          break;
        default:
          target = new fhirCsR4.Models.Resource();
          target.DeserializeJson(ref reader, options);
          break;
      }

      return (Resource)target;
    }
  }
}
