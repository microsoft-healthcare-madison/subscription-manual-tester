// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using fhirCsR4.Models;

namespace fhirCsR4.ValueSets
{
  /// <summary>
  /// The degree of equivalence between concepts.
  /// </summary>
  public static class ConceptMapEquivalenceCodes
  {
    /// <summary>
    /// This is an explicit assertion that there is no mapping between the source and target concept.
    /// </summary>
    public static readonly Coding Disjoint = new Coding
    {
      Code = "disjoint",
      Display = "Disjoint",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    /// <summary>
    /// The definitions of the concepts are exactly the same (i.e. only grammatical differences) and structural implications of meaning are identical or irrelevant (i.e. intentionally identical).
    /// </summary>
    public static readonly Coding Equal = new Coding
    {
      Code = "equal",
      Display = "Equal",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    /// <summary>
    /// The definitions of the concepts mean the same thing (including when structural implications of meaning are considered) (i.e. extensionally identical).
    /// </summary>
    public static readonly Coding Equivalent = new Coding
    {
      Code = "equivalent",
      Display = "Equivalent",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    /// <summary>
    /// The target mapping overlaps with the source concept, but both source and target cover additional meaning, or the definitions are imprecise and it is uncertain whether they have the same boundaries to their meaning. The sense in which the mapping is inexact SHALL be described in the comments in this case, and applications should be careful when attempting to use these mappings operationally.
    /// </summary>
    public static readonly Coding Inexact = new Coding
    {
      Code = "inexact",
      Display = "Inexact",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    /// <summary>
    /// The target mapping is narrower in meaning than the source concept. The sense in which the mapping is narrower SHALL be described in the comments in this case, and applications should be careful when attempting to use these mappings operationally.
    /// </summary>
    public static readonly Coding Narrower = new Coding
    {
      Code = "narrower",
      Display = "Narrower",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    /// <summary>
    /// The concepts are related to each other, and have at least some overlap in meaning, but the exact relationship is not known.
    /// </summary>
    public static readonly Coding RelatedTo = new Coding
    {
      Code = "relatedto",
      Display = "Related To",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    /// <summary>
    /// The target mapping specializes the meaning of the source concept (e.g. the target is-a source).
    /// </summary>
    public static readonly Coding Specializes = new Coding
    {
      Code = "specializes",
      Display = "Specializes",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    /// <summary>
    /// The target mapping subsumes the meaning of the source concept (e.g. the source is-a target).
    /// </summary>
    public static readonly Coding Subsumes = new Coding
    {
      Code = "subsumes",
      Display = "Subsumes",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    /// <summary>
    /// There is no match for this concept in the target code system.
    /// </summary>
    public static readonly Coding Unmatched = new Coding
    {
      Code = "unmatched",
      Display = "Unmatched",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };
    /// <summary>
    /// The target mapping is wider in meaning than the source concept.
    /// </summary>
    public static readonly Coding Wider = new Coding
    {
      Code = "wider",
      Display = "Wider",
      System = "http://hl7.org/fhir/concept-map-equivalence"
    };

    /// <summary>
    /// Literal for code: Disjoint
    /// </summary>
    public const string LiteralDisjoint = "disjoint";

    /// <summary>
    /// Literal for code: Equal
    /// </summary>
    public const string LiteralEqual = "equal";

    /// <summary>
    /// Literal for code: Equivalent
    /// </summary>
    public const string LiteralEquivalent = "equivalent";

    /// <summary>
    /// Literal for code: Inexact
    /// </summary>
    public const string LiteralInexact = "inexact";

    /// <summary>
    /// Literal for code: Narrower
    /// </summary>
    public const string LiteralNarrower = "narrower";

    /// <summary>
    /// Literal for code: RelatedTo
    /// </summary>
    public const string LiteralRelatedTo = "relatedto";

    /// <summary>
    /// Literal for code: Specializes
    /// </summary>
    public const string LiteralSpecializes = "specializes";

    /// <summary>
    /// Literal for code: Subsumes
    /// </summary>
    public const string LiteralSubsumes = "subsumes";

    /// <summary>
    /// Literal for code: Unmatched
    /// </summary>
    public const string LiteralUnmatched = "unmatched";

    /// <summary>
    /// Literal for code: Wider
    /// </summary>
    public const string LiteralWider = "wider";
  };
}
