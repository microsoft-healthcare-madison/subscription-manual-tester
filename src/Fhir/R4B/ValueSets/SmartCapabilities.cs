// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using fhirCsR4.Models;

namespace fhirCsR4.ValueSets
{
  /// <summary>
  /// Codes that define what the server is capable of.
  /// </summary>
  public static class SmartCapabilitiesCodes
  {
    /// <summary>
    /// support for SMART’s confidential client profile (symmetric client secret authentication).
    /// </summary>
    public static readonly Coding ClientConfidentialSymmetric = new Coding
    {
      Code = "client-confidential-symmetric",
      Display = "Confidential Client Profile",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for SMART’s public client profile (no client authentication).
    /// </summary>
    public static readonly Coding ClientPublic = new Coding
    {
      Code = "client-public",
      Display = "Public Client Profile",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for encounter-level launch context (requested by launch/encounter scope, conveyed via encounter token parameter).
    /// </summary>
    public static readonly Coding ContextEhrEncounter = new Coding
    {
      Code = "context-ehr-encounter",
      Display = "Allows \"Encounter Level Launch Context (EHR)\"",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for patient-level launch context (requested by launch/patient scope, conveyed via patient token parameter).
    /// </summary>
    public static readonly Coding ContextEhrPatient = new Coding
    {
      Code = "context-ehr-patient",
      Display = "Allows \"Patient Level Launch Context (EHR)\"",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for “need patient banner” launch context (conveyed via need_patient_banner token parameter).
    /// </summary>
    public static readonly Coding ContextPassthroughBanner = new Coding
    {
      Code = "context-passthrough-banner",
      Display = "Allows \"Need Patient Banner\"",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for “SMART style URL” launch context (conveyed via smart_style_url token parameter).
    /// </summary>
    public static readonly Coding ContextPassthroughStyle = new Coding
    {
      Code = "context-passthrough-style",
      Display = "Allows \"Smart Style Style\"",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for encounter-level launch context (requested by launch/encounter scope, conveyed via encounter token parameter).
    /// </summary>
    public static readonly Coding ContextStandaloneEncounter = new Coding
    {
      Code = "context-standalone-encounter",
      Display = "Allows \"Encounter Level Launch Context (STANDALONE)\"",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for patient-level launch context (requested by launch/patient scope, conveyed via patient token parameter).
    /// </summary>
    public static readonly Coding ContextStandalonePatient = new Coding
    {
      Code = "context-standalone-patient",
      Display = "Allows \"Patient Level Launch Context (STANDALONE)\"",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for SMART’s EHR Launch mode.
    /// </summary>
    public static readonly Coding LaunchEhr = new Coding
    {
      Code = "launch-ehr",
      Display = "EHR Launch Mode",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for SMART’s Standalone Launch mode.
    /// </summary>
    public static readonly Coding LaunchStandalone = new Coding
    {
      Code = "launch-standalone",
      Display = "Standalone Launch Mode",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for refresh tokens (requested by offline_access scope).
    /// </summary>
    public static readonly Coding PermissionOffline = new Coding
    {
      Code = "permission-offline",
      Display = "Supports Refresh Token",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for patient-level scopes (e.g. patient/Observation.read).
    /// </summary>
    public static readonly Coding PermissionPatient = new Coding
    {
      Code = "permission-patient",
      Display = "Supports Patient Level Scopes",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for user-level scopes (e.g. user/Appointment.read).
    /// </summary>
    public static readonly Coding PermissionUser = new Coding
    {
      Code = "permission-user",
      Display = "Supports User Level Scopes",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };
    /// <summary>
    /// support for SMART’s OpenID Connect profile.
    /// </summary>
    public static readonly Coding SsoOpenidConnect = new Coding
    {
      Code = "sso-openid-connect",
      Display = "Supports OpenID Connect",
      System = "http://terminology.hl7.org/CodeSystem/smart-capabilities"
    };

    /// <summary>
    /// Literal for code: ClientConfidentialSymmetric
    /// </summary>
    public const string LiteralClientConfidentialSymmetric = "client-confidential-symmetric";

    /// <summary>
    /// Literal for code: ClientPublic
    /// </summary>
    public const string LiteralClientPublic = "client-public";

    /// <summary>
    /// Literal for code: ContextEhrEncounter
    /// </summary>
    public const string LiteralContextEhrEncounter = "context-ehr-encounter";

    /// <summary>
    /// Literal for code: ContextEhrPatient
    /// </summary>
    public const string LiteralContextEhrPatient = "context-ehr-patient";

    /// <summary>
    /// Literal for code: ContextPassthroughBanner
    /// </summary>
    public const string LiteralContextPassthroughBanner = "context-passthrough-banner";

    /// <summary>
    /// Literal for code: ContextPassthroughStyle
    /// </summary>
    public const string LiteralContextPassthroughStyle = "context-passthrough-style";

    /// <summary>
    /// Literal for code: ContextStandaloneEncounter
    /// </summary>
    public const string LiteralContextStandaloneEncounter = "context-standalone-encounter";

    /// <summary>
    /// Literal for code: ContextStandalonePatient
    /// </summary>
    public const string LiteralContextStandalonePatient = "context-standalone-patient";

    /// <summary>
    /// Literal for code: LaunchEhr
    /// </summary>
    public const string LiteralLaunchEhr = "launch-ehr";

    /// <summary>
    /// Literal for code: LaunchStandalone
    /// </summary>
    public const string LiteralLaunchStandalone = "launch-standalone";

    /// <summary>
    /// Literal for code: PermissionOffline
    /// </summary>
    public const string LiteralPermissionOffline = "permission-offline";

    /// <summary>
    /// Literal for code: PermissionPatient
    /// </summary>
    public const string LiteralPermissionPatient = "permission-patient";

    /// <summary>
    /// Literal for code: PermissionUser
    /// </summary>
    public const string LiteralPermissionUser = "permission-user";

    /// <summary>
    /// Literal for code: SsoOpenidConnect
    /// </summary>
    public const string LiteralSsoOpenidConnect = "sso-openid-connect";
  };
}
