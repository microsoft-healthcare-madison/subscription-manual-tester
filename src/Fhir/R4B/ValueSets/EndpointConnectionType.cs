// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using fhirCsR4.Models;

namespace fhirCsR4.ValueSets
{
  /// <summary>
  /// This is an example value set defined by the FHIR project, that could be used to represent possible connection type profile values.
  /// </summary>
  public static class EndpointConnectionTypeCodes
  {
    /// <summary>
    /// DICOMweb RESTful Image query - http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.7.html
    /// </summary>
    public static readonly Coding DICOMQIDORS = new Coding
    {
      Code = "dicom-qido-rs",
      Display = "DICOM QIDO-RS",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// DICOMweb RESTful image sending and storage - http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.6.html
    /// </summary>
    public static readonly Coding DICOMSTOWRS = new Coding
    {
      Code = "dicom-stow-rs",
      Display = "DICOM STOW-RS",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// DICOMweb RESTful Image Retrieve - http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_6.5.html
    /// </summary>
    public static readonly Coding DICOMWADORS = new Coding
    {
      Code = "dicom-wado-rs",
      Display = "DICOM WADO-RS",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// DICOMweb Image Retrieve - http://dicom.nema.org/dicom/2013/output/chtml/part18/sect_6.3.html
    /// </summary>
    public static readonly Coding DICOMWADOURI = new Coding
    {
      Code = "dicom-wado-uri",
      Display = "DICOM WADO-URI",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// Direct Project information - http://wiki.directproject.org/
    /// </summary>
    public static readonly Coding DirectProject = new Coding
    {
      Code = "direct-project",
      Display = "Direct Project",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// Use the servers FHIR Messaging interface. Details can be found on the messaging.html page in the FHIR Specification. The FHIR server's base address is specified in the Endpoint.address property.
    /// </summary>
    public static readonly Coding HL7FHIRMessaging = new Coding
    {
      Code = "hl7-fhir-msg",
      Display = "HL7 FHIR Messaging",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// Interact with the server interface using FHIR's RESTful interface. For details on its version/capabilities you should connect the value in Endpoint.address and retrieve the FHIR CapabilityStatement.
    /// </summary>
    public static readonly Coding HL7FHIR = new Coding
    {
      Code = "hl7-fhir-rest",
      Display = "HL7 FHIR",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// HL7v2 messages over an LLP TCP connection
    /// </summary>
    public static readonly Coding HL7V2MLLP = new Coding
    {
      Code = "hl7v2-mllp",
      Display = "HL7 v2 MLLP",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// IHE Invoke Image Display (IID) - http://wiki.ihe.net/index.php/Invoke_Image_Display
    /// </summary>
    public static readonly Coding IHEIID = new Coding
    {
      Code = "ihe-iid",
      Display = "IHE IID",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// IHE Cross Community Access Profile (XCA) - http://wiki.ihe.net/index.php/Cross-Community_Access
    /// </summary>
    public static readonly Coding IHEXCA = new Coding
    {
      Code = "ihe-xca",
      Display = "IHE XCA",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// IHE Cross Community Patient Discovery Profile (XCPD) - http://wiki.ihe.net/index.php/Cross-Community_Patient_Discovery
    /// </summary>
    public static readonly Coding IHEXCPD = new Coding
    {
      Code = "ihe-xcpd",
      Display = "IHE XCPD",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// IHE Cross-Enterprise Document Reliable Exchange (XDR) - http://wiki.ihe.net/index.php/Cross-enterprise_Document_Reliable_Interchange
    /// </summary>
    public static readonly Coding IHEXDR = new Coding
    {
      Code = "ihe-xdr",
      Display = "IHE XDR",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// IHE Cross-Enterprise Document Sharing (XDS) - http://wiki.ihe.net/index.php/Cross-Enterprise_Document_Sharing
    /// </summary>
    public static readonly Coding IHEXDS = new Coding
    {
      Code = "ihe-xds",
      Display = "IHE XDS",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };
    /// <summary>
    /// Email delivery using a digital certificate to encrypt the content using the public key, receiver must have the private key to decrypt the content
    /// </summary>
    public static readonly Coding SecureEmail = new Coding
    {
      Code = "secure-email",
      Display = "Secure email",
      System = "http://terminology.hl7.org/CodeSystem/endpoint-connection-type"
    };

    /// <summary>
    /// Literal for code: DICOMQIDORS
    /// </summary>
    public const string LiteralDICOMQIDORS = "dicom-qido-rs";

    /// <summary>
    /// Literal for code: DICOMSTOWRS
    /// </summary>
    public const string LiteralDICOMSTOWRS = "dicom-stow-rs";

    /// <summary>
    /// Literal for code: DICOMWADORS
    /// </summary>
    public const string LiteralDICOMWADORS = "dicom-wado-rs";

    /// <summary>
    /// Literal for code: DICOMWADOURI
    /// </summary>
    public const string LiteralDICOMWADOURI = "dicom-wado-uri";

    /// <summary>
    /// Literal for code: DirectProject
    /// </summary>
    public const string LiteralDirectProject = "direct-project";

    /// <summary>
    /// Literal for code: HL7FHIRMessaging
    /// </summary>
    public const string LiteralHL7FHIRMessaging = "hl7-fhir-msg";

    /// <summary>
    /// Literal for code: HL7FHIR
    /// </summary>
    public const string LiteralHL7FHIR = "hl7-fhir-rest";

    /// <summary>
    /// Literal for code: HL7V2MLLP
    /// </summary>
    public const string LiteralHL7V2MLLP = "hl7v2-mllp";

    /// <summary>
    /// Literal for code: IHEIID
    /// </summary>
    public const string LiteralIHEIID = "ihe-iid";

    /// <summary>
    /// Literal for code: IHEXCA
    /// </summary>
    public const string LiteralIHEXCA = "ihe-xca";

    /// <summary>
    /// Literal for code: IHEXCPD
    /// </summary>
    public const string LiteralIHEXCPD = "ihe-xcpd";

    /// <summary>
    /// Literal for code: IHEXDR
    /// </summary>
    public const string LiteralIHEXDR = "ihe-xdr";

    /// <summary>
    /// Literal for code: IHEXDS
    /// </summary>
    public const string LiteralIHEXDS = "ihe-xds";

    /// <summary>
    /// Literal for code: SecureEmail
    /// </summary>
    public const string LiteralSecureEmail = "secure-email";
  };
}
