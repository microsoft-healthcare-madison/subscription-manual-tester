// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseItemAdjudication>))]
  public class ClaimResponseItemAdjudication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// For example: amount submitted, eligible amount, co-payment, and benefit payable.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// For example may indicate that the funds for this benefit type have been exhausted.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// For example: eligible percentage or co-payment percentage.
    /// </summary>
    public decimal? Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WriteNumber("value", (decimal)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR4.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR4.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetDecimal();
          break;

        case "_value":
          _Value = new fhirCsR4.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A sub-detail adjudication of a simple product or service.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseItemDetailSubDetail>))]
  public class ClaimResponseItemDetailSubDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// A number to uniquely reference the claim sub-detail entry.
    /// </summary>
    public uint SubDetailSequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("subDetailSequence", SubDetailSequence);

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR4.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "subDetailSequence":
          SubDetailSequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseItemDetail>))]
  public class ClaimResponseItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// A number to uniquely reference the claim detail entry.
    /// </summary>
    public uint DetailSequence { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// A sub-detail adjudication of a simple product or service.
    /// </summary>
    public List<ClaimResponseItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("detailSequence", DetailSequence);

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SubDetail != null) && (SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();

        foreach (ClaimResponseItemDetailSubDetail valSubDetail in SubDetail)
        {
          valSubDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR4.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "detailSequence":
          DetailSequence = reader.GetUInt32();
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetail = new List<ClaimResponseItemDetailSubDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItemDetailSubDetail objSubDetail = new fhirCsR4.Models.ClaimResponseItemDetailSubDetail();
            objSubDetail.DeserializeJson(ref reader, options);
            SubDetail.Add(objSubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetail.Count == 0)
          {
            SubDetail = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseItem>))]
  public class ClaimResponseItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
    /// </summary>
    public List<ClaimResponseItemDetail> Detail { get; set; }
    /// <summary>
    /// A number to uniquely reference the claim item entries.
    /// </summary>
    public uint ItemSequence { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("itemSequence", ItemSequence);

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ClaimResponseItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR4.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ClaimResponseItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItemDetail objDetail = new fhirCsR4.Models.ClaimResponseItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "itemSequence":
          ItemSequence = reader.GetUInt32();
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The third-tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseAddItemDetailSubDetail>))]
  public class ClaimResponseAddItemDetailSubDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ProductOrService != null)
      {
        writer.WritePropertyName("productOrService");
        ProductOrService.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR4.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objModifier = new fhirCsR4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "productOrService":
          ProductOrService = new fhirCsR4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "unitPrice":
          UnitPrice = new fhirCsR4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The second-tier service adjudications for payor added services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseAddItemDetail>))]
  public class ClaimResponseAddItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The third-tier service adjudications for payor added services.
    /// </summary>
    public List<ClaimResponseAddItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ProductOrService != null)
      {
        writer.WritePropertyName("productOrService");
        ProductOrService.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SubDetail != null) && (SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();

        foreach (ClaimResponseAddItemDetailSubDetail valSubDetail in SubDetail)
        {
          valSubDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR4.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objModifier = new fhirCsR4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "productOrService":
          ProductOrService = new fhirCsR4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetail = new List<ClaimResponseAddItemDetailSubDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseAddItemDetailSubDetail objSubDetail = new fhirCsR4.Models.ClaimResponseAddItemDetailSubDetail();
            objSubDetail.DeserializeJson(ref reader, options);
            SubDetail.Add(objSubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetail.Count == 0)
          {
            SubDetail = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new fhirCsR4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The first-tier service adjudications for payor added product or service lines.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseAddItem>))]
  public class ClaimResponseAddItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The adjudication results.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// For example: Providing a tooth code allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
    /// </summary>
    public CodeableConcept BodySite { get; set; }
    /// <summary>
    /// The second-tier service adjudications for payor added services.
    /// </summary>
    public List<ClaimResponseAddItemDetail> Detail { get; set; }
    /// <summary>
    /// The sequence number of the details within the claim item which this line is intended to replace.
    /// </summary>
    public List<uint> DetailSequence { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Claim items which this service line is intended to replace.
    /// </summary>
    public List<uint> ItemSequence { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public CodeableConcept LocationCodeableConcept { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public Address LocationAddress { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public Reference LocationReference { get; set; }
    /// <summary>
    /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// The numbers associated with notes below which apply to the adjudication of this item.
    /// </summary>
    public List<uint> NoteNumber { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// For example: Neonatal program, child dental program or drug users recovery program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The providers who are authorized for the services rendered to the patient.
    /// </summary>
    public List<Reference> Provider { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The date or dates when the service or product was supplied, performed or completed.
    /// </summary>
    public string ServicedDate { get; set; }
    /// <summary>
    /// Extension container element for ServicedDate
    /// </summary>
    public Element _ServicedDate { get; set; }
    /// <summary>
    /// The date or dates when the service or product was supplied, performed or completed.
    /// </summary>
    public Period ServicedPeriod { get; set; }
    /// <summary>
    /// The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
    /// </summary>
    public List<uint> SubdetailSequence { get; set; }
    /// <summary>
    /// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
    /// </summary>
    public List<CodeableConcept> SubSite { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((ItemSequence != null) && (ItemSequence.Count != 0))
      {
        writer.WritePropertyName("itemSequence");
        writer.WriteStartArray();

        foreach (uint valItemSequence in ItemSequence)
        {
          writer.WriteNumberValue(valItemSequence);
        }

        writer.WriteEndArray();
      }

      if ((DetailSequence != null) && (DetailSequence.Count != 0))
      {
        writer.WritePropertyName("detailSequence");
        writer.WriteStartArray();

        foreach (uint valDetailSequence in DetailSequence)
        {
          writer.WriteNumberValue(valDetailSequence);
        }

        writer.WriteEndArray();
      }

      if ((SubdetailSequence != null) && (SubdetailSequence.Count != 0))
      {
        writer.WritePropertyName("subdetailSequence");
        writer.WriteStartArray();

        foreach (uint valSubdetailSequence in SubdetailSequence)
        {
          writer.WriteNumberValue(valSubdetailSequence);
        }

        writer.WriteEndArray();
      }

      if ((Provider != null) && (Provider.Count != 0))
      {
        writer.WritePropertyName("provider");
        writer.WriteStartArray();

        foreach (Reference valProvider in Provider)
        {
          valProvider.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ProductOrService != null)
      {
        writer.WritePropertyName("productOrService");
        ProductOrService.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProgramCode != null) && (ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valProgramCode in ProgramCode)
        {
          valProgramCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ServicedDate))
      {
        writer.WriteString("servicedDate", (string)ServicedDate!);
      }

      if (_ServicedDate != null)
      {
        writer.WritePropertyName("_servicedDate");
        _ServicedDate.SerializeJson(writer, options);
      }

      if (ServicedPeriod != null)
      {
        writer.WritePropertyName("servicedPeriod");
        ServicedPeriod.SerializeJson(writer, options);
      }

      if (LocationCodeableConcept != null)
      {
        writer.WritePropertyName("locationCodeableConcept");
        LocationCodeableConcept.SerializeJson(writer, options);
      }

      if (LocationAddress != null)
      {
        writer.WritePropertyName("locationAddress");
        LocationAddress.SerializeJson(writer, options);
      }

      if (LocationReference != null)
      {
        writer.WritePropertyName("locationReference");
        LocationReference.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if (BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        BodySite.SerializeJson(writer, options);
      }

      if ((SubSite != null) && (SubSite.Count != 0))
      {
        writer.WritePropertyName("subSite");
        writer.WriteStartArray();

        foreach (CodeableConcept valSubSite in SubSite)
        {
          valSubSite.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((NoteNumber != null) && (NoteNumber.Count != 0))
      {
        writer.WritePropertyName("noteNumber");
        writer.WriteStartArray();

        foreach (uint valNoteNumber in NoteNumber)
        {
          writer.WriteNumberValue(valNoteNumber);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ClaimResponseAddItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR4.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "bodySite":
          BodySite = new fhirCsR4.Models.CodeableConcept();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ClaimResponseAddItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseAddItemDetail objDetail = new fhirCsR4.Models.ClaimResponseAddItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "detailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DetailSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DetailSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DetailSequence.Count == 0)
          {
            DetailSequence = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "itemSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ItemSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ItemSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ItemSequence.Count == 0)
          {
            ItemSequence = null;
          }

          break;

        case "locationCodeableConcept":
          LocationCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          LocationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          LocationAddress = new fhirCsR4.Models.Address();
          LocationAddress.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          LocationReference = new fhirCsR4.Models.Reference();
          LocationReference.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objModifier = new fhirCsR4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "noteNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NoteNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NoteNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NoteNumber.Count == 0)
          {
            NoteNumber = null;
          }

          break;

        case "productOrService":
          ProductOrService = new fhirCsR4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objProgramCode = new fhirCsR4.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "provider":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Provider = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objProvider = new fhirCsR4.Models.Reference();
            objProvider.DeserializeJson(ref reader, options);
            Provider.Add(objProvider);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Provider.Count == 0)
          {
            Provider = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "servicedDate":
          ServicedDate = reader.GetString();
          break;

        case "_servicedDate":
          _ServicedDate = new fhirCsR4.Models.Element();
          _ServicedDate.DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          ServicedPeriod = new fhirCsR4.Models.Period();
          ServicedPeriod.DeserializeJson(ref reader, options);
          break;

        case "subdetailSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubdetailSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SubdetailSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubdetailSequence.Count == 0)
          {
            SubdetailSequence = null;
          }

          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objSubSite = new fhirCsR4.Models.CodeableConcept();
            objSubSite.DeserializeJson(ref reader, options);
            SubSite.Add(objSubSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubSite.Count == 0)
          {
            SubSite = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new fhirCsR4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Totals for amounts submitted, co-pays, benefits payable etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseTotal>))]
  public class ClaimResponseTotal : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Monetary total amount associated with the category.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// For example codes indicating: Co-Pay, deductible, eligible, benefit, tax, etc.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR4.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Payment details for the adjudication of the claim.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponsePayment>))]
  public class ClaimResponsePayment : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Insurers will deduct amounts owing from the provider (adjustment), such as a prior overpayment, from the amount owing to the provider (benefits payable) when payment is made to the provider.
    /// </summary>
    public Money Adjustment { get; set; }
    /// <summary>
    /// Reason for the payment adjustment.
    /// </summary>
    public CodeableConcept AdjustmentReason { get; set; }
    /// <summary>
    /// Benefits payable less any payment adjustment.
    /// </summary>
    public Money Amount { get; set; }
    /// <summary>
    /// Estimated date the payment will be issued or the actual issue date of payment.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// For example: EFT number or check number.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Whether this represents partial or complete payment of the benefits payable.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Adjustment != null)
      {
        writer.WritePropertyName("adjustment");
        Adjustment.SerializeJson(writer, options);
      }

      if (AdjustmentReason != null)
      {
        writer.WritePropertyName("adjustmentReason");
        AdjustmentReason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "adjustment":
          Adjustment = new fhirCsR4.Models.Money();
          Adjustment.DeserializeJson(ref reader, options);
          break;

        case "adjustmentReason":
          AdjustmentReason = new fhirCsR4.Models.CodeableConcept();
          AdjustmentReason.DeserializeJson(ref reader, options);
          break;

        case "amount":
          Amount = new fhirCsR4.Models.Money();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A note that describes or explains adjudication results in a human readable form.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseProcessNote>))]
  public class ClaimResponseProcessNote : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Only required if the language is different from the resource language.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// A number to uniquely identify a note entry.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// The explanation or description associated with the processing.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The business purpose of the note text.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Number != null)
      {
        writer.WriteNumber("number", (uint)Number!);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (Language != null)
      {
        writer.WritePropertyName("language");
        Language.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          Language = new fhirCsR4.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        case "number":
          Number = reader.GetUInt32();
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ClaimResponse.processNote.type field
  /// </summary>
  public static class ClaimResponseProcessNoteTypeCodes {
    public const string DISPLAY = "display";
    public const string PRINT = "print";
    public const string PRINTOPER = "printoper";
  }
  /// <summary>
  /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseInsurance>))]
  public class ClaimResponseInsurance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A business agreement number established between the provider and the insurer for special business processing purposes.
    /// </summary>
    public string BusinessArrangement { get; set; }
    /// <summary>
    /// Extension container element for BusinessArrangement
    /// </summary>
    public Element _BusinessArrangement { get; set; }
    /// <summary>
    /// Must not be specified when 'focal=true' for this insurance.
    /// </summary>
    public Reference ClaimResponse { get; set; }
    /// <summary>
    /// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
    /// </summary>
    public Reference Coverage { get; set; }
    /// <summary>
    /// A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
    /// </summary>
    public bool Focal { get; set; }
    /// <summary>
    /// A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      writer.WriteBoolean("focal", Focal);

      if (Coverage != null)
      {
        writer.WritePropertyName("coverage");
        Coverage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BusinessArrangement))
      {
        writer.WriteString("businessArrangement", (string)BusinessArrangement!);
      }

      if (_BusinessArrangement != null)
      {
        writer.WritePropertyName("_businessArrangement");
        _BusinessArrangement.SerializeJson(writer, options);
      }

      if (ClaimResponse != null)
      {
        writer.WritePropertyName("claimResponse");
        ClaimResponse.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "businessArrangement":
          BusinessArrangement = reader.GetString();
          break;

        case "_businessArrangement":
          _BusinessArrangement = new fhirCsR4.Models.Element();
          _BusinessArrangement.DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          ClaimResponse = new fhirCsR4.Models.Reference();
          ClaimResponse.DeserializeJson(ref reader, options);
          break;

        case "coverage":
          Coverage = new fhirCsR4.Models.Reference();
          Coverage.DeserializeJson(ref reader, options);
          break;

        case "focal":
          Focal = reader.GetBoolean();
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponseError>))]
  public class ClaimResponseError : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An error code, from a specified code system, which details why the claim could not be adjudicated.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
    /// </summary>
    public uint? DetailSequence { get; set; }
    /// <summary>
    /// The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
    /// </summary>
    public uint? ItemSequence { get; set; }
    /// <summary>
    /// The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
    /// </summary>
    public uint? SubDetailSequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ItemSequence != null)
      {
        writer.WriteNumber("itemSequence", (uint)ItemSequence!);
      }

      if (DetailSequence != null)
      {
        writer.WriteNumber("detailSequence", (uint)DetailSequence!);
      }

      if (SubDetailSequence != null)
      {
        writer.WriteNumber("subDetailSequence", (uint)SubDetailSequence!);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "detailSequence":
          DetailSequence = reader.GetUInt32();
          break;

        case "itemSequence":
          ItemSequence = reader.GetUInt32();
          break;

        case "subDetailSequence":
          SubDetailSequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This resource provides the adjudication details from the processing of a Claim resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimResponse>))]
  public class ClaimResponse : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ClaimResponse";
    /// <summary>
    /// The first-tier service adjudications for payor added product or service lines.
    /// </summary>
    public List<ClaimResponseAddItem> AddItem { get; set; }
    /// <summary>
    /// The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
    /// </summary>
    public List<ClaimResponseItemAdjudication> Adjudication { get; set; }
    /// <summary>
    /// For example: professional reports, documents, images, clinical resources, or accident reports.
    /// </summary>
    public List<Reference> CommunicationRequest { get; set; }
    /// <summary>
    /// The date this resource was created.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// A human readable description of the status of the adjudication.
    /// </summary>
    public string Disposition { get; set; }
    /// <summary>
    /// Extension container element for Disposition
    /// </summary>
    public Element _Disposition { get; set; }
    /// <summary>
    /// If the request contains errors then an error element should be provided and no adjudication related sections (item, addItem, or payment) should be present.
    /// </summary>
    public List<ClaimResponseError> Error { get; set; }
    /// <summary>
    /// Needed to permit insurers to include the actual form.
    /// </summary>
    public Attachment Form { get; set; }
    /// <summary>
    /// May be needed to identify specific jurisdictional forms.
    /// </summary>
    public CodeableConcept FormCode { get; set; }
    /// <summary>
    /// Fund would be release by a future claim quoting the preAuthRef of this response. Examples of values include: provider, patient, none.
    /// </summary>
    public CodeableConcept FundsReserve { get; set; }
    /// <summary>
    /// A unique identifier assigned to this claim response.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
    /// </summary>
    public List<ClaimResponseInsurance> Insurance { get; set; }
    /// <summary>
    /// The party responsible for authorization, adjudication and reimbursement.
    /// </summary>
    public Reference Insurer { get; set; }
    /// <summary>
    /// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
    /// </summary>
    public List<ClaimResponseItem> Item { get; set; }
    /// <summary>
    /// The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
    /// </summary>
    public string Outcome { get; set; }
    /// <summary>
    /// Extension container element for Outcome
    /// </summary>
    public Element _Outcome { get; set; }
    /// <summary>
    /// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// Type of Party to be reimbursed: subscriber, provider, other.
    /// </summary>
    public CodeableConcept PayeeType { get; set; }
    /// <summary>
    /// Payment details for the adjudication of the claim.
    /// </summary>
    public ClaimResponsePayment Payment { get; set; }
    /// <summary>
    /// The time frame during which this authorization is effective.
    /// </summary>
    public Period PreAuthPeriod { get; set; }
    /// <summary>
    /// This value is only present on preauthorization adjudications.
    /// </summary>
    public string PreAuthRef { get; set; }
    /// <summary>
    /// Extension container element for PreAuthRef
    /// </summary>
    public Element _PreAuthRef { get; set; }
    /// <summary>
    /// A note that describes or explains adjudication results in a human readable form.
    /// </summary>
    public List<ClaimResponseProcessNote> ProcessNote { get; set; }
    /// <summary>
    /// Original request resource reference.
    /// </summary>
    public Reference Request { get; set; }
    /// <summary>
    /// Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
    /// </summary>
    public Reference Requestor { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
    /// </summary>
    public CodeableConcept SubType { get; set; }
    /// <summary>
    /// Totals for amounts submitted, co-pays, benefits payable etc.
    /// </summary>
    public List<ClaimResponseTotal> Total { get; set; }
    /// <summary>
    /// This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
    /// </summary>
    public string Use { get; set; }
    /// <summary>
    /// Extension container element for Use
    /// </summary>
    public Element _Use { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (SubType != null)
      {
        writer.WritePropertyName("subType");
        SubType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Use))
      {
        writer.WriteString("use", (string)Use!);
      }

      if (_Use != null)
      {
        writer.WritePropertyName("_use");
        _Use.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if (Insurer != null)
      {
        writer.WritePropertyName("insurer");
        Insurer.SerializeJson(writer, options);
      }

      if (Requestor != null)
      {
        writer.WritePropertyName("requestor");
        Requestor.SerializeJson(writer, options);
      }

      if (Request != null)
      {
        writer.WritePropertyName("request");
        Request.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Outcome))
      {
        writer.WriteString("outcome", (string)Outcome!);
      }

      if (_Outcome != null)
      {
        writer.WritePropertyName("_outcome");
        _Outcome.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Disposition))
      {
        writer.WriteString("disposition", (string)Disposition!);
      }

      if (_Disposition != null)
      {
        writer.WritePropertyName("_disposition");
        _Disposition.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PreAuthRef))
      {
        writer.WriteString("preAuthRef", (string)PreAuthRef!);
      }

      if (_PreAuthRef != null)
      {
        writer.WritePropertyName("_preAuthRef");
        _PreAuthRef.SerializeJson(writer, options);
      }

      if (PreAuthPeriod != null)
      {
        writer.WritePropertyName("preAuthPeriod");
        PreAuthPeriod.SerializeJson(writer, options);
      }

      if (PayeeType != null)
      {
        writer.WritePropertyName("payeeType");
        PayeeType.SerializeJson(writer, options);
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (ClaimResponseItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AddItem != null) && (AddItem.Count != 0))
      {
        writer.WritePropertyName("addItem");
        writer.WriteStartArray();

        foreach (ClaimResponseAddItem valAddItem in AddItem)
        {
          valAddItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Adjudication != null) && (Adjudication.Count != 0))
      {
        writer.WritePropertyName("adjudication");
        writer.WriteStartArray();

        foreach (ClaimResponseItemAdjudication valAdjudication in Adjudication)
        {
          valAdjudication.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Total != null) && (Total.Count != 0))
      {
        writer.WritePropertyName("total");
        writer.WriteStartArray();

        foreach (ClaimResponseTotal valTotal in Total)
        {
          valTotal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Payment != null)
      {
        writer.WritePropertyName("payment");
        Payment.SerializeJson(writer, options);
      }

      if (FundsReserve != null)
      {
        writer.WritePropertyName("fundsReserve");
        FundsReserve.SerializeJson(writer, options);
      }

      if (FormCode != null)
      {
        writer.WritePropertyName("formCode");
        FormCode.SerializeJson(writer, options);
      }

      if (Form != null)
      {
        writer.WritePropertyName("form");
        Form.SerializeJson(writer, options);
      }

      if ((ProcessNote != null) && (ProcessNote.Count != 0))
      {
        writer.WritePropertyName("processNote");
        writer.WriteStartArray();

        foreach (ClaimResponseProcessNote valProcessNote in ProcessNote)
        {
          valProcessNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((CommunicationRequest != null) && (CommunicationRequest.Count != 0))
      {
        writer.WritePropertyName("communicationRequest");
        writer.WriteStartArray();

        foreach (Reference valCommunicationRequest in CommunicationRequest)
        {
          valCommunicationRequest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Insurance != null) && (Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();

        foreach (ClaimResponseInsurance valInsurance in Insurance)
        {
          valInsurance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Error != null) && (Error.Count != 0))
      {
        writer.WritePropertyName("error");
        writer.WriteStartArray();

        foreach (ClaimResponseError valError in Error)
        {
          valError.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "addItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AddItem = new List<ClaimResponseAddItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseAddItem objAddItem = new fhirCsR4.Models.ClaimResponseAddItem();
            objAddItem.DeserializeJson(ref reader, options);
            AddItem.Add(objAddItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AddItem.Count == 0)
          {
            AddItem = null;
          }

          break;

        case "adjudication":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Adjudication = new List<ClaimResponseItemAdjudication>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItemAdjudication objAdjudication = new fhirCsR4.Models.ClaimResponseItemAdjudication();
            objAdjudication.DeserializeJson(ref reader, options);
            Adjudication.Add(objAdjudication);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Adjudication.Count == 0)
          {
            Adjudication = null;
          }

          break;

        case "communicationRequest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CommunicationRequest = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objCommunicationRequest = new fhirCsR4.Models.Reference();
            objCommunicationRequest.DeserializeJson(ref reader, options);
            CommunicationRequest.Add(objCommunicationRequest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CommunicationRequest.Count == 0)
          {
            CommunicationRequest = null;
          }

          break;

        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR4.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "disposition":
          Disposition = reader.GetString();
          break;

        case "_disposition":
          _Disposition = new fhirCsR4.Models.Element();
          _Disposition.DeserializeJson(ref reader, options);
          break;

        case "error":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Error = new List<ClaimResponseError>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseError objError = new fhirCsR4.Models.ClaimResponseError();
            objError.DeserializeJson(ref reader, options);
            Error.Add(objError);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Error.Count == 0)
          {
            Error = null;
          }

          break;

        case "form":
          Form = new fhirCsR4.Models.Attachment();
          Form.DeserializeJson(ref reader, options);
          break;

        case "formCode":
          FormCode = new fhirCsR4.Models.CodeableConcept();
          FormCode.DeserializeJson(ref reader, options);
          break;

        case "fundsReserve":
          FundsReserve = new fhirCsR4.Models.CodeableConcept();
          FundsReserve.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Insurance = new List<ClaimResponseInsurance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseInsurance objInsurance = new fhirCsR4.Models.ClaimResponseInsurance();
            objInsurance.DeserializeJson(ref reader, options);
            Insurance.Add(objInsurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Insurance.Count == 0)
          {
            Insurance = null;
          }

          break;

        case "insurer":
          Insurer = new fhirCsR4.Models.Reference();
          Insurer.DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<ClaimResponseItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseItem objItem = new fhirCsR4.Models.ClaimResponseItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "outcome":
          Outcome = reader.GetString();
          break;

        case "_outcome":
          _Outcome = new fhirCsR4.Models.Element();
          _Outcome.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR4.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "payeeType":
          PayeeType = new fhirCsR4.Models.CodeableConcept();
          PayeeType.DeserializeJson(ref reader, options);
          break;

        case "payment":
          Payment = new fhirCsR4.Models.ClaimResponsePayment();
          Payment.DeserializeJson(ref reader, options);
          break;

        case "preAuthPeriod":
          PreAuthPeriod = new fhirCsR4.Models.Period();
          PreAuthPeriod.DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          PreAuthRef = reader.GetString();
          break;

        case "_preAuthRef":
          _PreAuthRef = new fhirCsR4.Models.Element();
          _PreAuthRef.DeserializeJson(ref reader, options);
          break;

        case "processNote":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcessNote = new List<ClaimResponseProcessNote>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseProcessNote objProcessNote = new fhirCsR4.Models.ClaimResponseProcessNote();
            objProcessNote.DeserializeJson(ref reader, options);
            ProcessNote.Add(objProcessNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcessNote.Count == 0)
          {
            ProcessNote = null;
          }

          break;

        case "request":
          Request = new fhirCsR4.Models.Reference();
          Request.DeserializeJson(ref reader, options);
          break;

        case "requestor":
          Requestor = new fhirCsR4.Models.Reference();
          Requestor.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subType":
          SubType = new fhirCsR4.Models.CodeableConcept();
          SubType.DeserializeJson(ref reader, options);
          break;

        case "total":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Total = new List<ClaimResponseTotal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimResponseTotal objTotal = new fhirCsR4.Models.ClaimResponseTotal();
            objTotal.DeserializeJson(ref reader, options);
            Total.Add(objTotal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Total.Count == 0)
          {
            Total = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "use":
          Use = reader.GetString();
          break;

        case "_use":
          _Use = new fhirCsR4.Models.Element();
          _Use.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ClaimResponse.outcome field
  /// </summary>
  public static class ClaimResponseOutcomeCodes {
    public const string COMPLETE = "complete";
    public const string ERROR = "error";
    public const string PARTIAL = "partial";
  }
  /// <summary>
  /// Code Values for the ClaimResponse.status field
  /// </summary>
  public static class ClaimResponseStatusCodes {
    public const string ACTIVE = "active";
    public const string CANCELLED = "cancelled";
    public const string DRAFT = "draft";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// Code Values for the ClaimResponse.use field
  /// </summary>
  public static class ClaimResponseUseCodes {
    public const string CLAIM = "claim";
    public const string PREAUTHORIZATION = "preauthorization";
    public const string PREDETERMINATION = "predetermination";
  }
}
