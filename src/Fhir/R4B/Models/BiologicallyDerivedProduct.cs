// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// How this product was collected.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<BiologicallyDerivedProductCollection>))]
  public class BiologicallyDerivedProductCollection : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Time of product collection.
    /// </summary>
    public string CollectedDateTime { get; set; }
    /// <summary>
    /// Extension container element for CollectedDateTime
    /// </summary>
    public Element _CollectedDateTime { get; set; }
    /// <summary>
    /// Time of product collection.
    /// </summary>
    public Period CollectedPeriod { get; set; }
    /// <summary>
    /// Healthcare professional who is performing the collection.
    /// </summary>
    public Reference Collector { get; set; }
    /// <summary>
    /// The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.
    /// </summary>
    public Reference Source { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Collector != null)
      {
        writer.WritePropertyName("collector");
        Collector.SerializeJson(writer, options);
      }

      if (Source != null)
      {
        writer.WritePropertyName("source");
        Source.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CollectedDateTime))
      {
        writer.WriteString("collectedDateTime", (string)CollectedDateTime!);
      }

      if (_CollectedDateTime != null)
      {
        writer.WritePropertyName("_collectedDateTime");
        _CollectedDateTime.SerializeJson(writer, options);
      }

      if (CollectedPeriod != null)
      {
        writer.WritePropertyName("collectedPeriod");
        CollectedPeriod.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "collectedDateTime":
          CollectedDateTime = reader.GetString();
          break;

        case "_collectedDateTime":
          _CollectedDateTime = new fhirCsR4.Models.Element();
          _CollectedDateTime.DeserializeJson(ref reader, options);
          break;

        case "collectedPeriod":
          CollectedPeriod = new fhirCsR4.Models.Period();
          CollectedPeriod.DeserializeJson(ref reader, options);
          break;

        case "collector":
          Collector = new fhirCsR4.Models.Reference();
          Collector.DeserializeJson(ref reader, options);
          break;

        case "source":
          Source = new fhirCsR4.Models.Reference();
          Source.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<BiologicallyDerivedProductProcessing>))]
  public class BiologicallyDerivedProductProcessing : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Substance added during processing.
    /// </summary>
    public Reference Additive { get; set; }
    /// <summary>
    /// Description of of processing.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Procesing code.
    /// </summary>
    public CodeableConcept Procedure { get; set; }
    /// <summary>
    /// Time of processing.
    /// </summary>
    public string TimeDateTime { get; set; }
    /// <summary>
    /// Extension container element for TimeDateTime
    /// </summary>
    public Element _TimeDateTime { get; set; }
    /// <summary>
    /// Time of processing.
    /// </summary>
    public Period TimePeriod { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Procedure != null)
      {
        writer.WritePropertyName("procedure");
        Procedure.SerializeJson(writer, options);
      }

      if (Additive != null)
      {
        writer.WritePropertyName("additive");
        Additive.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TimeDateTime))
      {
        writer.WriteString("timeDateTime", (string)TimeDateTime!);
      }

      if (_TimeDateTime != null)
      {
        writer.WritePropertyName("_timeDateTime");
        _TimeDateTime.SerializeJson(writer, options);
      }

      if (TimePeriod != null)
      {
        writer.WritePropertyName("timePeriod");
        TimePeriod.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "additive":
          Additive = new fhirCsR4.Models.Reference();
          Additive.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "procedure":
          Procedure = new fhirCsR4.Models.CodeableConcept();
          Procedure.DeserializeJson(ref reader, options);
          break;

        case "timeDateTime":
          TimeDateTime = reader.GetString();
          break;

        case "_timeDateTime":
          _TimeDateTime = new fhirCsR4.Models.Element();
          _TimeDateTime.DeserializeJson(ref reader, options);
          break;

        case "timePeriod":
          TimePeriod = new fhirCsR4.Models.Period();
          TimePeriod.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<BiologicallyDerivedProductManipulation>))]
  public class BiologicallyDerivedProductManipulation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Description of manipulation.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Time of manipulation.
    /// </summary>
    public string TimeDateTime { get; set; }
    /// <summary>
    /// Extension container element for TimeDateTime
    /// </summary>
    public Element _TimeDateTime { get; set; }
    /// <summary>
    /// Time of manipulation.
    /// </summary>
    public Period TimePeriod { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TimeDateTime))
      {
        writer.WriteString("timeDateTime", (string)TimeDateTime!);
      }

      if (_TimeDateTime != null)
      {
        writer.WritePropertyName("_timeDateTime");
        _TimeDateTime.SerializeJson(writer, options);
      }

      if (TimePeriod != null)
      {
        writer.WritePropertyName("timePeriod");
        TimePeriod.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "timeDateTime":
          TimeDateTime = reader.GetString();
          break;

        case "_timeDateTime":
          _TimeDateTime = new fhirCsR4.Models.Element();
          _TimeDateTime.DeserializeJson(ref reader, options);
          break;

        case "timePeriod":
          TimePeriod = new fhirCsR4.Models.Period();
          TimePeriod.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Product storage.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<BiologicallyDerivedProductStorage>))]
  public class BiologicallyDerivedProductStorage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Description of storage.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Storage timeperiod.
    /// </summary>
    public Period Duration { get; set; }
    /// <summary>
    /// Temperature scale used.
    /// </summary>
    public string Scale { get; set; }
    /// <summary>
    /// Extension container element for Scale
    /// </summary>
    public Element _Scale { get; set; }
    /// <summary>
    /// Storage temperature.
    /// </summary>
    public decimal? Temperature { get; set; }
    /// <summary>
    /// Extension container element for Temperature
    /// </summary>
    public Element _Temperature { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Temperature != null)
      {
        writer.WriteNumber("temperature", (decimal)Temperature!);
      }

      if (_Temperature != null)
      {
        writer.WritePropertyName("_temperature");
        _Temperature.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Scale))
      {
        writer.WriteString("scale", (string)Scale!);
      }

      if (_Scale != null)
      {
        writer.WritePropertyName("_scale");
        _Scale.SerializeJson(writer, options);
      }

      if (Duration != null)
      {
        writer.WritePropertyName("duration");
        Duration.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "duration":
          Duration = new fhirCsR4.Models.Period();
          Duration.DeserializeJson(ref reader, options);
          break;

        case "scale":
          Scale = reader.GetString();
          break;

        case "_scale":
          _Scale = new fhirCsR4.Models.Element();
          _Scale.DeserializeJson(ref reader, options);
          break;

        case "temperature":
          Temperature = reader.GetDecimal();
          break;

        case "_temperature":
          _Temperature = new fhirCsR4.Models.Element();
          _Temperature.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the BiologicallyDerivedProduct.storage.scale field
  /// </summary>
  public static class BiologicallyDerivedProductStorageScaleCodes {
    public const string FARENHEIT = "farenheit";
    public const string CELSIUS = "celsius";
    public const string KELVIN = "kelvin";
  }
  /// <summary>
  /// A material substance originating from a biological entity intended to be transplanted or infused
  /// into another (possibly the same) biological entity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<BiologicallyDerivedProduct>))]
  public class BiologicallyDerivedProduct : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "BiologicallyDerivedProduct";
    /// <summary>
    /// How this product was collected.
    /// </summary>
    public BiologicallyDerivedProductCollection Collection { get; set; }
    /// <summary>
    /// This records identifiers associated with this biologically derived product instance that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Any manipulation of product post-collection that is intended to alter the product.  For example a buffy-coat enrichment or CD8 reduction of Peripheral Blood Stem Cells to make it more suitable for infusion.
    /// </summary>
    public BiologicallyDerivedProductManipulation Manipulation { get; set; }
    /// <summary>
    /// For products that have multiple collections. For example Peripheral Blood Stem Cells may be collected over several days from a single donor and the donation split into in multiple containers which must be linked to the parent donation.
    /// </summary>
    public List<Reference> Parent { get; set; }
    /// <summary>
    /// Any processing of the product during collection that does not change the fundamental nature of the product. For example adding anti-coagulants during the collection of Peripheral Blood Stem Cells.
    /// </summary>
    public List<BiologicallyDerivedProductProcessing> Processing { get; set; }
    /// <summary>
    /// Broad category of this product.
    /// </summary>
    public string ProductCategory { get; set; }
    /// <summary>
    /// Extension container element for ProductCategory
    /// </summary>
    public Element _ProductCategory { get; set; }
    /// <summary>
    /// A code that identifies the kind of this biologically derived product (SNOMED Ctcode).
    /// </summary>
    public CodeableConcept ProductCode { get; set; }
    /// <summary>
    /// Number of discrete units within this product.
    /// </summary>
    public int? Quantity { get; set; }
    /// <summary>
    /// Procedure request to obtain this biologically derived product.
    /// </summary>
    public List<Reference> Request { get; set; }
    /// <summary>
    /// Whether the product is currently available.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Product storage.
    /// </summary>
    public List<BiologicallyDerivedProductStorage> Storage { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ProductCategory))
      {
        writer.WriteString("productCategory", (string)ProductCategory!);
      }

      if (_ProductCategory != null)
      {
        writer.WritePropertyName("_productCategory");
        _ProductCategory.SerializeJson(writer, options);
      }

      if (ProductCode != null)
      {
        writer.WritePropertyName("productCode");
        ProductCode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((Request != null) && (Request.Count != 0))
      {
        writer.WritePropertyName("request");
        writer.WriteStartArray();

        foreach (Reference valRequest in Request)
        {
          valRequest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Quantity != null)
      {
        writer.WriteNumber("quantity", (int)Quantity!);
      }

      if ((Parent != null) && (Parent.Count != 0))
      {
        writer.WritePropertyName("parent");
        writer.WriteStartArray();

        foreach (Reference valParent in Parent)
        {
          valParent.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Collection != null)
      {
        writer.WritePropertyName("collection");
        Collection.SerializeJson(writer, options);
      }

      if ((Processing != null) && (Processing.Count != 0))
      {
        writer.WritePropertyName("processing");
        writer.WriteStartArray();

        foreach (BiologicallyDerivedProductProcessing valProcessing in Processing)
        {
          valProcessing.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Manipulation != null)
      {
        writer.WritePropertyName("manipulation");
        Manipulation.SerializeJson(writer, options);
      }

      if ((Storage != null) && (Storage.Count != 0))
      {
        writer.WritePropertyName("storage");
        writer.WriteStartArray();

        foreach (BiologicallyDerivedProductStorage valStorage in Storage)
        {
          valStorage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "collection":
          Collection = new fhirCsR4.Models.BiologicallyDerivedProductCollection();
          Collection.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "manipulation":
          Manipulation = new fhirCsR4.Models.BiologicallyDerivedProductManipulation();
          Manipulation.DeserializeJson(ref reader, options);
          break;

        case "parent":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Parent = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objParent = new fhirCsR4.Models.Reference();
            objParent.DeserializeJson(ref reader, options);
            Parent.Add(objParent);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Parent.Count == 0)
          {
            Parent = null;
          }

          break;

        case "processing":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Processing = new List<BiologicallyDerivedProductProcessing>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.BiologicallyDerivedProductProcessing objProcessing = new fhirCsR4.Models.BiologicallyDerivedProductProcessing();
            objProcessing.DeserializeJson(ref reader, options);
            Processing.Add(objProcessing);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Processing.Count == 0)
          {
            Processing = null;
          }

          break;

        case "productCategory":
          ProductCategory = reader.GetString();
          break;

        case "_productCategory":
          _ProductCategory = new fhirCsR4.Models.Element();
          _ProductCategory.DeserializeJson(ref reader, options);
          break;

        case "productCode":
          ProductCode = new fhirCsR4.Models.CodeableConcept();
          ProductCode.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = reader.GetInt32();
          break;

        case "request":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Request = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objRequest = new fhirCsR4.Models.Reference();
            objRequest.DeserializeJson(ref reader, options);
            Request.Add(objRequest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Request.Count == 0)
          {
            Request = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "storage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Storage = new List<BiologicallyDerivedProductStorage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.BiologicallyDerivedProductStorage objStorage = new fhirCsR4.Models.BiologicallyDerivedProductStorage();
            objStorage.DeserializeJson(ref reader, options);
            Storage.Add(objStorage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Storage.Count == 0)
          {
            Storage = null;
          }

          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the BiologicallyDerivedProduct.productCategory field
  /// </summary>
  public static class BiologicallyDerivedProductProductCategoryCodes {
    public const string ORGAN = "organ";
    public const string TISSUE = "tissue";
    public const string FLUID = "fluid";
    public const string CELLS = "cells";
    public const string BIOLOGICALAGENT = "biologicalAgent";
  }
  /// <summary>
  /// Code Values for the BiologicallyDerivedProduct.status field
  /// </summary>
  public static class BiologicallyDerivedProductStatusCodes {
    public const string AVAILABLE = "available";
    public const string UNAVAILABLE = "unavailable";
  }
}
