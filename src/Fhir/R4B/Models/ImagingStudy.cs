// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImagingStudySeriesPerformer>))]
  public class ImagingStudySeriesPerformer : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates who or what performed the series.
    /// </summary>
    public Reference Actor { get; set; }
    /// <summary>
    /// Distinguishes the type of involvement of the performer in the series.
    /// </summary>
    public CodeableConcept Function { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Function != null)
      {
        writer.WritePropertyName("function");
        Function.SerializeJson(writer, options);
      }

      if (Actor != null)
      {
        writer.WritePropertyName("actor");
        Actor.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          Actor = new fhirCsR4.Models.Reference();
          Actor.DeserializeJson(ref reader, options);
          break;

        case "function":
          Function = new fhirCsR4.Models.CodeableConcept();
          Function.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A single SOP instance within the series, e.g. an image, or presentation state.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImagingStudySeriesInstance>))]
  public class ImagingStudySeriesInstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The number of instance in the series.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// DICOM instance  type.
    /// </summary>
    public Coding SopClass { get; set; }
    /// <summary>
    /// Particularly for post-acquisition analytic objects, such as SR, presentation states, value mapping, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// See  [DICOM PS3.3 C.12.1](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html#sect_C.12.1).
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (SopClass != null)
      {
        writer.WritePropertyName("sopClass");
        SopClass.SerializeJson(writer, options);
      }

      if (Number != null)
      {
        writer.WriteNumber("number", (uint)Number!);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "number":
          Number = reader.GetUInt32();
          break;

        case "sopClass":
          SopClass = new fhirCsR4.Models.Coding();
          SopClass.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR4.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Each study has one or more series of images or other content.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImagingStudySeries>))]
  public class ImagingStudySeries : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
    /// </summary>
    public Coding BodySite { get; set; }
    /// <summary>
    /// A description of the series.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG) formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; and DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances.
    /// </summary>
    public List<Reference> Endpoint { get; set; }
    /// <summary>
    /// A single SOP instance within the series, e.g. an image, or presentation state.
    /// </summary>
    public List<ImagingStudySeriesInstance> Instance { get; set; }
    /// <summary>
    /// The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
    /// </summary>
    public Coding Laterality { get; set; }
    /// <summary>
    /// The modality of this series sequence.
    /// </summary>
    public Coding Modality { get; set; }
    /// <summary>
    /// The numeric identifier of this series in the study.
    /// </summary>
    public uint? Number { get; set; }
    /// <summary>
    /// Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
    /// </summary>
    public uint? NumberOfInstances { get; set; }
    /// <summary>
    /// If the person who performed the series is not known, their Organization may be recorded. A patient, or related person, may be the performer, e.g. for patient-captured images.
    /// </summary>
    public List<ImagingStudySeriesPerformer> Performer { get; set; }
    /// <summary>
    /// The specimen imaged, e.g., for whole slide imaging of a biopsy.
    /// </summary>
    public List<Reference> Specimen { get; set; }
    /// <summary>
    /// The date and time the series was started.
    /// </summary>
    public string Started { get; set; }
    /// <summary>
    /// Extension container element for Started
    /// </summary>
    public Element _Started { get; set; }
    /// <summary>
    /// See [DICOM PS3.3 C.7.3](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.7.3.html).
    /// </summary>
    public string Uid { get; set; }
    /// <summary>
    /// Extension container element for Uid
    /// </summary>
    public Element _Uid { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uid))
      {
        writer.WriteString("uid", (string)Uid!);
      }

      if (_Uid != null)
      {
        writer.WritePropertyName("_uid");
        _Uid.SerializeJson(writer, options);
      }

      if (Number != null)
      {
        writer.WriteNumber("number", (uint)Number!);
      }

      if (Modality != null)
      {
        writer.WritePropertyName("modality");
        Modality.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (NumberOfInstances != null)
      {
        writer.WriteNumber("numberOfInstances", (uint)NumberOfInstances!);
      }

      if ((Endpoint != null) && (Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();

        foreach (Reference valEndpoint in Endpoint)
        {
          valEndpoint.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        BodySite.SerializeJson(writer, options);
      }

      if (Laterality != null)
      {
        writer.WritePropertyName("laterality");
        Laterality.SerializeJson(writer, options);
      }

      if ((Specimen != null) && (Specimen.Count != 0))
      {
        writer.WritePropertyName("specimen");
        writer.WriteStartArray();

        foreach (Reference valSpecimen in Specimen)
        {
          valSpecimen.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Started))
      {
        writer.WriteString("started", (string)Started!);
      }

      if (_Started != null)
      {
        writer.WritePropertyName("_started");
        _Started.SerializeJson(writer, options);
      }

      if ((Performer != null) && (Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();

        foreach (ImagingStudySeriesPerformer valPerformer in Performer)
        {
          valPerformer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Instance != null) && (Instance.Count != 0))
      {
        writer.WritePropertyName("instance");
        writer.WriteStartArray();

        foreach (ImagingStudySeriesInstance valInstance in Instance)
        {
          valInstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "bodySite":
          BodySite = new fhirCsR4.Models.Coding();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objEndpoint = new fhirCsR4.Models.Reference();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "instance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Instance = new List<ImagingStudySeriesInstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImagingStudySeriesInstance objInstance = new fhirCsR4.Models.ImagingStudySeriesInstance();
            objInstance.DeserializeJson(ref reader, options);
            Instance.Add(objInstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Instance.Count == 0)
          {
            Instance = null;
          }

          break;

        case "laterality":
          Laterality = new fhirCsR4.Models.Coding();
          Laterality.DeserializeJson(ref reader, options);
          break;

        case "modality":
          Modality = new fhirCsR4.Models.Coding();
          Modality.DeserializeJson(ref reader, options);
          break;

        case "number":
          Number = reader.GetUInt32();
          break;

        case "numberOfInstances":
          NumberOfInstances = reader.GetUInt32();
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Performer = new List<ImagingStudySeriesPerformer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImagingStudySeriesPerformer objPerformer = new fhirCsR4.Models.ImagingStudySeriesPerformer();
            objPerformer.DeserializeJson(ref reader, options);
            Performer.Add(objPerformer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Performer.Count == 0)
          {
            Performer = null;
          }

          break;

        case "specimen":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specimen = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSpecimen = new fhirCsR4.Models.Reference();
            objSpecimen.DeserializeJson(ref reader, options);
            Specimen.Add(objSpecimen);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specimen.Count == 0)
          {
            Specimen = null;
          }

          break;

        case "started":
          Started = reader.GetString();
          break;

        case "_started":
          _Started = new fhirCsR4.Models.Element();
          _Started.DeserializeJson(ref reader, options);
          break;

        case "uid":
          Uid = reader.GetString();
          break;

        case "_uid":
          _Uid = new fhirCsR4.Models.Element();
          _Uid.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImagingStudy>))]
  public class ImagingStudy : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ImagingStudy";
    /// <summary>
    /// A list of the diagnostic requests that resulted in this imaging study being performed.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// The Imaging Manager description of the study. Institution-generated description or classification of the Study (component) performed.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// This will typically be the encounter the event occurred within, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission test).
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Typical endpoint types include DICOM WADO-RS, which is used to retrieve DICOM instances in native or rendered (e.g., JPG, PNG), formats using a RESTful API; DICOM WADO-URI, which can similarly retrieve native or rendered instances, except using an HTTP query-based approach; DICOM QIDO-RS, which allows RESTful query for DICOM information without retrieving the actual instances; or IHE Invoke Image Display (IID), which provides standard invocation of an imaging web viewer.
    /// </summary>
    public List<Reference> Endpoint { get; set; }
    /// <summary>
    /// See discussion under [Imaging Study Implementation Notes](imagingstudy.html#notes) for encoding of DICOM Study Instance UID. Accession Number should use ACSN Identifier type.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Who read the study and interpreted the images or other content.
    /// </summary>
    public List<Reference> Interpreter { get; set; }
    /// <summary>
    /// The principal physical location where the ImagingStudy was performed.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// A list of all the series.modality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).
    /// </summary>
    public List<Coding> Modality { get; set; }
    /// <summary>
    /// Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
    /// </summary>
    public uint? NumberOfInstances { get; set; }
    /// <summary>
    /// Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.
    /// </summary>
    public uint? NumberOfSeries { get; set; }
    /// <summary>
    /// The code for the performed procedure type.
    /// </summary>
    public List<CodeableConcept> ProcedureCode { get; set; }
    /// <summary>
    /// The procedure which this ImagingStudy was part of.
    /// </summary>
    public Reference ProcedureReference { get; set; }
    /// <summary>
    /// Description of clinical condition indicating why the ImagingStudy was requested.
    /// </summary>
    public List<CodeableConcept> ReasonCode { get; set; }
    /// <summary>
    /// Indicates another resource whose existence justifies this Study.
    /// </summary>
    public List<Reference> ReasonReference { get; set; }
    /// <summary>
    /// The requesting/referring physician.
    /// </summary>
    public Reference Referrer { get; set; }
    /// <summary>
    /// Each study has one or more series of images or other content.
    /// </summary>
    public List<ImagingStudySeries> Series { get; set; }
    /// <summary>
    /// Date and time the study started.
    /// </summary>
    public string Started { get; set; }
    /// <summary>
    /// Extension container element for Started
    /// </summary>
    public Element _Started { get; set; }
    /// <summary>
    /// Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// QA phantoms can be recorded with a Device; multiple subjects (such as mice) can be recorded with a Group.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((Modality != null) && (Modality.Count != 0))
      {
        writer.WritePropertyName("modality");
        writer.WriteStartArray();

        foreach (Coding valModality in Modality)
        {
          valModality.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Started))
      {
        writer.WriteString("started", (string)Started!);
      }

      if (_Started != null)
      {
        writer.WritePropertyName("_started");
        _Started.SerializeJson(writer, options);
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Referrer != null)
      {
        writer.WritePropertyName("referrer");
        Referrer.SerializeJson(writer, options);
      }

      if ((Interpreter != null) && (Interpreter.Count != 0))
      {
        writer.WritePropertyName("interpreter");
        writer.WriteStartArray();

        foreach (Reference valInterpreter in Interpreter)
        {
          valInterpreter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Endpoint != null) && (Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();

        foreach (Reference valEndpoint in Endpoint)
        {
          valEndpoint.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (NumberOfSeries != null)
      {
        writer.WriteNumber("numberOfSeries", (uint)NumberOfSeries!);
      }

      if (NumberOfInstances != null)
      {
        writer.WriteNumber("numberOfInstances", (uint)NumberOfInstances!);
      }

      if (ProcedureReference != null)
      {
        writer.WritePropertyName("procedureReference");
        ProcedureReference.SerializeJson(writer, options);
      }

      if ((ProcedureCode != null) && (ProcedureCode.Count != 0))
      {
        writer.WritePropertyName("procedureCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valProcedureCode in ProcedureCode)
        {
          valProcedureCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if ((ReasonCode != null) && (ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valReasonCode in ReasonCode)
        {
          valReasonCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReasonReference != null) && (ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();

        foreach (Reference valReasonReference in ReasonReference)
        {
          valReasonReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Series != null) && (Series.Count != 0))
      {
        writer.WritePropertyName("series");
        writer.WriteStartArray();

        foreach (ImagingStudySeries valSeries in Series)
        {
          valSeries.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objBasedOn = new fhirCsR4.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR4.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objEndpoint = new fhirCsR4.Models.Reference();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "interpreter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interpreter = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objInterpreter = new fhirCsR4.Models.Reference();
            objInterpreter.DeserializeJson(ref reader, options);
            Interpreter.Add(objInterpreter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interpreter.Count == 0)
          {
            Interpreter = null;
          }

          break;

        case "location":
          Location = new fhirCsR4.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "modality":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modality = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Coding objModality = new fhirCsR4.Models.Coding();
            objModality.DeserializeJson(ref reader, options);
            Modality.Add(objModality);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modality.Count == 0)
          {
            Modality = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "numberOfInstances":
          NumberOfInstances = reader.GetUInt32();
          break;

        case "numberOfSeries":
          NumberOfSeries = reader.GetUInt32();
          break;

        case "procedureCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcedureCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objProcedureCode = new fhirCsR4.Models.CodeableConcept();
            objProcedureCode.DeserializeJson(ref reader, options);
            ProcedureCode.Add(objProcedureCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcedureCode.Count == 0)
          {
            ProcedureCode = null;
          }

          break;

        case "procedureReference":
          ProcedureReference = new fhirCsR4.Models.Reference();
          ProcedureReference.DeserializeJson(ref reader, options);
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objReasonCode = new fhirCsR4.Models.CodeableConcept();
            objReasonCode.DeserializeJson(ref reader, options);
            ReasonCode.Add(objReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonCode.Count == 0)
          {
            ReasonCode = null;
          }

          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objReasonReference = new fhirCsR4.Models.Reference();
            objReasonReference.DeserializeJson(ref reader, options);
            ReasonReference.Add(objReasonReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonReference.Count == 0)
          {
            ReasonReference = null;
          }

          break;

        case "referrer":
          Referrer = new fhirCsR4.Models.Reference();
          Referrer.DeserializeJson(ref reader, options);
          break;

        case "series":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Series = new List<ImagingStudySeries>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImagingStudySeries objSeries = new fhirCsR4.Models.ImagingStudySeries();
            objSeries.DeserializeJson(ref reader, options);
            Series.Add(objSeries);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Series.Count == 0)
          {
            Series = null;
          }

          break;

        case "started":
          Started = reader.GetString();
          break;

        case "_started":
          _Started = new fhirCsR4.Models.Element();
          _Started.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR4.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImagingStudy.status field
  /// </summary>
  public static class ImagingStudyStatusCodes {
    public const string REGISTERED = "registered";
    public const string AVAILABLE = "available";
    public const string CANCELLED = "cancelled";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
  }
}
