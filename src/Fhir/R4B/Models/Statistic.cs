// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Number of samples in the statistic.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<StatisticSampleSize>))]
  public class StatisticSampleSize : Element,  IFhirJsonSerializable {
    /// <summary>
    /// Human-readable summary of population sample size.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Number of participants with known results for measured variables.
    /// </summary>
    public uint? KnownDataCount { get; set; }
    /// <summary>
    /// Footnote or explanatory note about the sample size.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// A human-readable string to clarify or explain concepts about the sample size.
    /// </summary>
    public uint? NumberOfParticipants { get; set; }
    /// <summary>
    /// Number of participants in the population.
    /// </summary>
    public uint? NumberOfStudies { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (NumberOfStudies != null)
      {
        writer.WriteNumber("numberOfStudies", (uint)NumberOfStudies!);
      }

      if (NumberOfParticipants != null)
      {
        writer.WriteNumber("numberOfParticipants", (uint)NumberOfParticipants!);
      }

      if (KnownDataCount != null)
      {
        writer.WriteNumber("knownDataCount", (uint)KnownDataCount!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "knownDataCount":
          KnownDataCount = reader.GetUInt32();
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "numberOfParticipants":
          NumberOfParticipants = reader.GetUInt32();
          break;

        case "numberOfStudies":
          NumberOfStudies = reader.GetUInt32();
          break;

        default:
          ((fhirCsR4.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A nested attribute estimate; which is the attribute estimate of an attribute estimate.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<StatisticAttributeEstimateAttributeEstimate>))]
  public class StatisticAttributeEstimateAttributeEstimate : Element,  IFhirJsonSerializable {
    /// <summary>
    /// Human-readable summary of the estimate.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Use 95 for a 95% confidence interval.
    /// </summary>
    public decimal? Level { get; set; }
    /// <summary>
    /// Extension container element for Level
    /// </summary>
    public Element _Level { get; set; }
    /// <summary>
    /// Footnote or explanatory note about the estimate.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Often the pvalue.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Lower bound of confidence interval.
    /// </summary>
    public Range Range { get; set; }
    /// <summary>
    /// The type of attribute estimate, eg confidence interval or p value.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (Level != null)
      {
        writer.WriteNumber("level", (decimal)Level!);
      }

      if (_Level != null)
      {
        writer.WritePropertyName("_level");
        _Level.SerializeJson(writer, options);
      }

      if (Range != null)
      {
        writer.WritePropertyName("range");
        Range.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "level":
          Level = reader.GetDecimal();
          break;

        case "_level":
          _Level = new fhirCsR4.Models.Element();
          _Level.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "range":
          Range = new fhirCsR4.Models.Range();
          Range.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A statistical attribute of the statistic such as a measure of heterogeneity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<StatisticAttributeEstimate>))]
  public class StatisticAttributeEstimate : Element,  IFhirJsonSerializable {
    /// <summary>
    /// A nested attribute estimate; which is the attribute estimate of an attribute estimate.
    /// </summary>
    public List<StatisticAttributeEstimateAttributeEstimate> AttributeEstimate { get; set; }
    /// <summary>
    /// Human-readable summary of the estimate.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Use 95 for a 95% confidence interval.
    /// </summary>
    public decimal? Level { get; set; }
    /// <summary>
    /// Extension container element for Level
    /// </summary>
    public Element _Level { get; set; }
    /// <summary>
    /// Footnote or explanatory note about the estimate.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Often the p value.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Lower bound of confidence interval.
    /// </summary>
    public Range Range { get; set; }
    /// <summary>
    /// The type of attribute estimate, eg confidence interval or p value.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (Level != null)
      {
        writer.WriteNumber("level", (decimal)Level!);
      }

      if (_Level != null)
      {
        writer.WritePropertyName("_level");
        _Level.SerializeJson(writer, options);
      }

      if (Range != null)
      {
        writer.WritePropertyName("range");
        Range.SerializeJson(writer, options);
      }

      if ((AttributeEstimate != null) && (AttributeEstimate.Count != 0))
      {
        writer.WritePropertyName("attributeEstimate");
        writer.WriteStartArray();

        foreach (StatisticAttributeEstimateAttributeEstimate valAttributeEstimate in AttributeEstimate)
        {
          valAttributeEstimate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "attributeEstimate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AttributeEstimate = new List<StatisticAttributeEstimateAttributeEstimate>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.StatisticAttributeEstimateAttributeEstimate objAttributeEstimate = new fhirCsR4.Models.StatisticAttributeEstimateAttributeEstimate();
            objAttributeEstimate.DeserializeJson(ref reader, options);
            AttributeEstimate.Add(objAttributeEstimate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AttributeEstimate.Count == 0)
          {
            AttributeEstimate = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "level":
          Level = reader.GetDecimal();
          break;

        case "_level":
          _Level = new fhirCsR4.Models.Element();
          _Level.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "range":
          Range = new fhirCsR4.Models.Range();
          Range.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A variable adjusted for in the adjusted analysis.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<StatisticModelCharacteristicVariable>))]
  public class StatisticModelCharacteristicVariable : Element,  IFhirJsonSerializable {
    /// <summary>
    /// How the variable is classified for use in adjusted analysis.
    /// </summary>
    public string Handling { get; set; }
    /// <summary>
    /// Extension container element for Handling
    /// </summary>
    public Element _Handling { get; set; }
    /// <summary>
    /// Description for grouping of ordinal or polychotomous variables.
    /// </summary>
    public List<CodeableConcept> ValueCategory { get; set; }
    /// <summary>
    /// Discrete value for grouping of ordinal or polychotomous variables.
    /// </summary>
    public List<Quantity> ValueQuantity { get; set; }
    /// <summary>
    /// Range of values for grouping of ordinal or polychotomous variables.
    /// </summary>
    public List<Range> ValueRange { get; set; }
    /// <summary>
    /// Description of the variable.
    /// </summary>
    public Reference VariableDefinition { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.Element)this).SerializeJson(writer, options, false);

      if (VariableDefinition != null)
      {
        writer.WritePropertyName("variableDefinition");
        VariableDefinition.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Handling))
      {
        writer.WriteString("handling", (string)Handling!);
      }

      if (_Handling != null)
      {
        writer.WritePropertyName("_handling");
        _Handling.SerializeJson(writer, options);
      }

      if ((ValueCategory != null) && (ValueCategory.Count != 0))
      {
        writer.WritePropertyName("valueCategory");
        writer.WriteStartArray();

        foreach (CodeableConcept valValueCategory in ValueCategory)
        {
          valValueCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ValueQuantity != null) && (ValueQuantity.Count != 0))
      {
        writer.WritePropertyName("valueQuantity");
        writer.WriteStartArray();

        foreach (Quantity valValueQuantity in ValueQuantity)
        {
          valValueQuantity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ValueRange != null) && (ValueRange.Count != 0))
      {
        writer.WritePropertyName("valueRange");
        writer.WriteStartArray();

        foreach (Range valValueRange in ValueRange)
        {
          valValueRange.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "handling":
          Handling = reader.GetString();
          break;

        case "_handling":
          _Handling = new fhirCsR4.Models.Element();
          _Handling.DeserializeJson(ref reader, options);
          break;

        case "valueCategory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueCategory = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objValueCategory = new fhirCsR4.Models.CodeableConcept();
            objValueCategory.DeserializeJson(ref reader, options);
            ValueCategory.Add(objValueCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueCategory.Count == 0)
          {
            ValueCategory = null;
          }

          break;

        case "valueQuantity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueQuantity = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Quantity objValueQuantity = new fhirCsR4.Models.Quantity();
            objValueQuantity.DeserializeJson(ref reader, options);
            ValueQuantity.Add(objValueQuantity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueQuantity.Count == 0)
          {
            ValueQuantity = null;
          }

          break;

        case "valueRange":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueRange = new List<Range>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Range objValueRange = new fhirCsR4.Models.Range();
            objValueRange.DeserializeJson(ref reader, options);
            ValueRange.Add(objValueRange);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueRange.Count == 0)
          {
            ValueRange = null;
          }

          break;

        case "variableDefinition":
          VariableDefinition = new fhirCsR4.Models.Reference();
          VariableDefinition.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Statistic.modelCharacteristic.variable.handling field
  /// </summary>
  public static class StatisticModelCharacteristicVariableHandlingCodes {
    public const string CONTINUOUS = "continuous";
    public const string DICHOTOMOUS = "dichotomous";
    public const string ORDINAL = "ordinal";
    public const string POLYCHOTOMOUS = "polychotomous";
  }
  /// <summary>
  /// A component of the method to generate the statistic.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<StatisticModelCharacteristic>))]
  public class StatisticModelCharacteristic : Element,  IFhirJsonSerializable {
    /// <summary>
    /// Description of a component of the method to generate the statistic.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Further specification of the quantified value of the component of the method to generate the statistic.
    /// </summary>
    public Quantity Value { get; set; }
    /// <summary>
    /// A variable adjusted for in the adjusted analysis.
    /// </summary>
    public List<StatisticModelCharacteristicVariable> Variable { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.Element)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Value != null)
      {
        writer.WritePropertyName("value");
        Value.SerializeJson(writer, options);
      }

      if ((Variable != null) && (Variable.Count != 0))
      {
        writer.WritePropertyName("variable");
        writer.WriteStartArray();

        foreach (StatisticModelCharacteristicVariable valVariable in Variable)
        {
          valVariable.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = new fhirCsR4.Models.Quantity();
          Value.DeserializeJson(ref reader, options);
          break;

        case "variable":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Variable = new List<StatisticModelCharacteristicVariable>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.StatisticModelCharacteristicVariable objVariable = new fhirCsR4.Models.StatisticModelCharacteristicVariable();
            objVariable.DeserializeJson(ref reader, options);
            Variable.Add(objVariable);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Variable.Count == 0)
          {
            Variable = null;
          }

          break;

        default:
          ((fhirCsR4.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A fact or piece of data from a  study of a large quantity of numerical data.  A mathematical or quantified characteristic of a group of observations.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Statistic>))]
  public class Statistic : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A statistical attribute of the statistic such as a measure of heterogeneity.
    /// </summary>
    public List<StatisticAttributeEstimate> AttributeEstimate { get; set; }
    /// <summary>
    /// A description of the content value of the statistic.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A component of the method to generate the statistic.
    /// </summary>
    public List<StatisticModelCharacteristic> ModelCharacteristic { get; set; }
    /// <summary>
    /// Footnotes and/or explanatory notes.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// When the number of events is the statistic, use Statistic.quantity and set Statistic.type.coding.code=C25463 and Statistic.type.coding.display=Count. When the statistic is a Proportion, use Statistic.numberOfEvents instead of Statistic.sampleSize.numeratorCount and enter an integer as the value. When the statistic is an Event Rate (where individual participants may have 2 or more events), use Statistic.numberOfEvents to record the total number of events rather than the number of participants with events. When the statistic is any statistic associated with a number of events expressed as an integer, use Statistic.numberOfEvents instead of Statistic.sampleSize.numeratorCount and enter an integer as the value.
    /// </summary>
    public uint? NumberOfEvents { get; set; }
    /// <summary>
    /// Statistic value.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Number of samples in the statistic.
    /// </summary>
    public StatisticSampleSize SampleSize { get; set; }
    /// <summary>
    /// Type of statistic, eg relative risk.
    /// </summary>
    public CodeableConcept StatisticType { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (StatisticType != null)
      {
        writer.WritePropertyName("statisticType");
        StatisticType.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (NumberOfEvents != null)
      {
        writer.WriteNumber("numberOfEvents", (uint)NumberOfEvents!);
      }

      if (SampleSize != null)
      {
        writer.WritePropertyName("sampleSize");
        SampleSize.SerializeJson(writer, options);
      }

      if ((AttributeEstimate != null) && (AttributeEstimate.Count != 0))
      {
        writer.WritePropertyName("attributeEstimate");
        writer.WriteStartArray();

        foreach (StatisticAttributeEstimate valAttributeEstimate in AttributeEstimate)
        {
          valAttributeEstimate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ModelCharacteristic != null) && (ModelCharacteristic.Count != 0))
      {
        writer.WritePropertyName("modelCharacteristic");
        writer.WriteStartArray();

        foreach (StatisticModelCharacteristic valModelCharacteristic in ModelCharacteristic)
        {
          valModelCharacteristic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "attributeEstimate":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AttributeEstimate = new List<StatisticAttributeEstimate>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.StatisticAttributeEstimate objAttributeEstimate = new fhirCsR4.Models.StatisticAttributeEstimate();
            objAttributeEstimate.DeserializeJson(ref reader, options);
            AttributeEstimate.Add(objAttributeEstimate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AttributeEstimate.Count == 0)
          {
            AttributeEstimate = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "modelCharacteristic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ModelCharacteristic = new List<StatisticModelCharacteristic>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.StatisticModelCharacteristic objModelCharacteristic = new fhirCsR4.Models.StatisticModelCharacteristic();
            objModelCharacteristic.DeserializeJson(ref reader, options);
            ModelCharacteristic.Add(objModelCharacteristic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ModelCharacteristic.Count == 0)
          {
            ModelCharacteristic = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "numberOfEvents":
          NumberOfEvents = reader.GetUInt32();
          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "sampleSize":
          SampleSize = new fhirCsR4.Models.StatisticSampleSize();
          SampleSize.DeserializeJson(ref reader, options);
          break;

        case "statisticType":
          StatisticType = new fhirCsR4.Models.CodeableConcept();
          StatisticType.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
