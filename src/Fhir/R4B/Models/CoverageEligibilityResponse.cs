// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Benefits used to date.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CoverageEligibilityResponseInsuranceItemBenefit>))]
  public class CoverageEligibilityResponseInsuranceItemBenefit : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The quantity of the benefit which is permitted under the coverage.
    /// </summary>
    public uint? AllowedUnsignedInt { get; set; }
    /// <summary>
    /// The quantity of the benefit which is permitted under the coverage.
    /// </summary>
    public string AllowedString { get; set; }
    /// <summary>
    /// Extension container element for AllowedString
    /// </summary>
    public Element _AllowedString { get; set; }
    /// <summary>
    /// The quantity of the benefit which is permitted under the coverage.
    /// </summary>
    public Money AllowedMoney { get; set; }
    /// <summary>
    /// For example: deductible, visits, benefit amount.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The quantity of the benefit which have been consumed to date.
    /// </summary>
    public uint? UsedUnsignedInt { get; set; }
    /// <summary>
    /// The quantity of the benefit which have been consumed to date.
    /// </summary>
    public string UsedString { get; set; }
    /// <summary>
    /// Extension container element for UsedString
    /// </summary>
    public Element _UsedString { get; set; }
    /// <summary>
    /// The quantity of the benefit which have been consumed to date.
    /// </summary>
    public Money UsedMoney { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (AllowedUnsignedInt != null)
      {
        writer.WriteNumber("allowedUnsignedInt", (uint)AllowedUnsignedInt!);
      }

      if (!string.IsNullOrEmpty(AllowedString))
      {
        writer.WriteString("allowedString", (string)AllowedString!);
      }

      if (_AllowedString != null)
      {
        writer.WritePropertyName("_allowedString");
        _AllowedString.SerializeJson(writer, options);
      }

      if (AllowedMoney != null)
      {
        writer.WritePropertyName("allowedMoney");
        AllowedMoney.SerializeJson(writer, options);
      }

      if (UsedUnsignedInt != null)
      {
        writer.WriteNumber("usedUnsignedInt", (uint)UsedUnsignedInt!);
      }

      if (!string.IsNullOrEmpty(UsedString))
      {
        writer.WriteString("usedString", (string)UsedString!);
      }

      if (_UsedString != null)
      {
        writer.WritePropertyName("_usedString");
        _UsedString.SerializeJson(writer, options);
      }

      if (UsedMoney != null)
      {
        writer.WritePropertyName("usedMoney");
        UsedMoney.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allowedUnsignedInt":
          AllowedUnsignedInt = reader.GetUInt32();
          break;

        case "allowedString":
          AllowedString = reader.GetString();
          break;

        case "_allowedString":
          _AllowedString = new fhirCsR4.Models.Element();
          _AllowedString.DeserializeJson(ref reader, options);
          break;

        case "allowedMoney":
          AllowedMoney = new fhirCsR4.Models.Money();
          AllowedMoney.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "usedUnsignedInt":
          UsedUnsignedInt = reader.GetUInt32();
          break;

        case "usedString":
          UsedString = reader.GetString();
          break;

        case "_usedString":
          _UsedString = new fhirCsR4.Models.Element();
          _UsedString.DeserializeJson(ref reader, options);
          break;

        case "usedMoney":
          UsedMoney = new fhirCsR4.Models.Money();
          UsedMoney.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Benefits and optionally current balances, and authorization details by category or service.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CoverageEligibilityResponseInsuranceItem>))]
  public class CoverageEligibilityResponseInsuranceItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
    /// </summary>
    public bool? AuthorizationRequired { get; set; }
    /// <summary>
    /// Codes or comments regarding information or actions associated with the preauthorization.
    /// </summary>
    public List<CodeableConcept> AuthorizationSupporting { get; set; }
    /// <summary>
    /// A web location for obtaining requirements or descriptive information regarding the preauthorization.
    /// </summary>
    public string AuthorizationUrl { get; set; }
    /// <summary>
    /// Extension container element for AuthorizationUrl
    /// </summary>
    public Element _AuthorizationUrl { get; set; }
    /// <summary>
    /// Benefits used to date.
    /// </summary>
    public List<CoverageEligibilityResponseInsuranceItemBenefit> Benefit { get; set; }
    /// <summary>
    /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// For example 'DENT2 covers 100% of basic, 50% of major but excludes Ortho, Implants and Cosmetic services'.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
    /// </summary>
    public bool? Excluded { get; set; }
    /// <summary>
    /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example: MED01, or DENT2.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
    /// </summary>
    public CodeableConcept Network { get; set; }
    /// <summary>
    /// Code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI).
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// The practitioner who is eligible for the provision of the product or service.
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
    /// </summary>
    public CodeableConcept Term { get; set; }
    /// <summary>
    /// Indicates if the benefits apply to an individual or to the family.
    /// </summary>
    public CodeableConcept Unit { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (ProductOrService != null)
      {
        writer.WritePropertyName("productOrService");
        ProductOrService.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Provider != null)
      {
        writer.WritePropertyName("provider");
        Provider.SerializeJson(writer, options);
      }

      if (Excluded != null)
      {
        writer.WriteBoolean("excluded", (bool)Excluded!);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Network != null)
      {
        writer.WritePropertyName("network");
        Network.SerializeJson(writer, options);
      }

      if (Unit != null)
      {
        writer.WritePropertyName("unit");
        Unit.SerializeJson(writer, options);
      }

      if (Term != null)
      {
        writer.WritePropertyName("term");
        Term.SerializeJson(writer, options);
      }

      if ((Benefit != null) && (Benefit.Count != 0))
      {
        writer.WritePropertyName("benefit");
        writer.WriteStartArray();

        foreach (CoverageEligibilityResponseInsuranceItemBenefit valBenefit in Benefit)
        {
          valBenefit.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (AuthorizationRequired != null)
      {
        writer.WriteBoolean("authorizationRequired", (bool)AuthorizationRequired!);
      }

      if ((AuthorizationSupporting != null) && (AuthorizationSupporting.Count != 0))
      {
        writer.WritePropertyName("authorizationSupporting");
        writer.WriteStartArray();

        foreach (CodeableConcept valAuthorizationSupporting in AuthorizationSupporting)
        {
          valAuthorizationSupporting.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(AuthorizationUrl))
      {
        writer.WriteString("authorizationUrl", (string)AuthorizationUrl!);
      }

      if (_AuthorizationUrl != null)
      {
        writer.WritePropertyName("_authorizationUrl");
        _AuthorizationUrl.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authorizationRequired":
          AuthorizationRequired = reader.GetBoolean();
          break;

        case "authorizationSupporting":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AuthorizationSupporting = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objAuthorizationSupporting = new fhirCsR4.Models.CodeableConcept();
            objAuthorizationSupporting.DeserializeJson(ref reader, options);
            AuthorizationSupporting.Add(objAuthorizationSupporting);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AuthorizationSupporting.Count == 0)
          {
            AuthorizationSupporting = null;
          }

          break;

        case "authorizationUrl":
          AuthorizationUrl = reader.GetString();
          break;

        case "_authorizationUrl":
          _AuthorizationUrl = new fhirCsR4.Models.Element();
          _AuthorizationUrl.DeserializeJson(ref reader, options);
          break;

        case "benefit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Benefit = new List<CoverageEligibilityResponseInsuranceItemBenefit>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CoverageEligibilityResponseInsuranceItemBenefit objBenefit = new fhirCsR4.Models.CoverageEligibilityResponseInsuranceItemBenefit();
            objBenefit.DeserializeJson(ref reader, options);
            Benefit.Add(objBenefit);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Benefit.Count == 0)
          {
            Benefit = null;
          }

          break;

        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "excluded":
          Excluded = reader.GetBoolean();
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objModifier = new fhirCsR4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "network":
          Network = new fhirCsR4.Models.CodeableConcept();
          Network.DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          ProductOrService = new fhirCsR4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "provider":
          Provider = new fhirCsR4.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "term":
          Term = new fhirCsR4.Models.CodeableConcept();
          Term.DeserializeJson(ref reader, options);
          break;

        case "unit":
          Unit = new fhirCsR4.Models.CodeableConcept();
          Unit.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CoverageEligibilityResponseInsurance>))]
  public class CoverageEligibilityResponseInsurance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The term of the benefits documented in this response.
    /// </summary>
    public Period BenefitPeriod { get; set; }
    /// <summary>
    /// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
    /// </summary>
    public Reference Coverage { get; set; }
    /// <summary>
    /// Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
    /// </summary>
    public bool? Inforce { get; set; }
    /// <summary>
    /// Benefits and optionally current balances, and authorization details by category or service.
    /// </summary>
    public List<CoverageEligibilityResponseInsuranceItem> Item { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Coverage != null)
      {
        writer.WritePropertyName("coverage");
        Coverage.SerializeJson(writer, options);
      }

      if (Inforce != null)
      {
        writer.WriteBoolean("inforce", (bool)Inforce!);
      }

      if (BenefitPeriod != null)
      {
        writer.WritePropertyName("benefitPeriod");
        BenefitPeriod.SerializeJson(writer, options);
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (CoverageEligibilityResponseInsuranceItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "benefitPeriod":
          BenefitPeriod = new fhirCsR4.Models.Period();
          BenefitPeriod.DeserializeJson(ref reader, options);
          break;

        case "coverage":
          Coverage = new fhirCsR4.Models.Reference();
          Coverage.DeserializeJson(ref reader, options);
          break;

        case "inforce":
          Inforce = reader.GetBoolean();
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<CoverageEligibilityResponseInsuranceItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CoverageEligibilityResponseInsuranceItem objItem = new fhirCsR4.Models.CoverageEligibilityResponseInsuranceItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Errors encountered during the processing of the request.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CoverageEligibilityResponseError>))]
  public class CoverageEligibilityResponseError : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An error code,from a specified code system, which details why the eligibility check could not be performed.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CoverageEligibilityResponse>))]
  public class CoverageEligibilityResponse : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "CoverageEligibilityResponse";
    /// <summary>
    /// The date this resource was created.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// A human readable description of the status of the adjudication.
    /// </summary>
    public string Disposition { get; set; }
    /// <summary>
    /// Extension container element for Disposition
    /// </summary>
    public Element _Disposition { get; set; }
    /// <summary>
    /// Errors encountered during the processing of the request.
    /// </summary>
    public List<CoverageEligibilityResponseError> Error { get; set; }
    /// <summary>
    /// May be needed to identify specific jurisdictional forms.
    /// </summary>
    public CodeableConcept Form { get; set; }
    /// <summary>
    /// A unique identifier assigned to this coverage eligiblity request.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
    /// </summary>
    public List<CoverageEligibilityResponseInsurance> Insurance { get; set; }
    /// <summary>
    /// The Insurer who issued the coverage in question and is the author of the response.
    /// </summary>
    public Reference Insurer { get; set; }
    /// <summary>
    /// The resource may be used to indicate that: the request has been held (queued) for processing; that it has been processed and errors found (error); that no errors were found and that some of the adjudication has been undertaken (partial) or that all of the adjudication has been undertaken (complete).
    /// </summary>
    public string Outcome { get; set; }
    /// <summary>
    /// Extension container element for Outcome
    /// </summary>
    public Element _Outcome { get; set; }
    /// <summary>
    /// The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
    /// </summary>
    public string PreAuthRef { get; set; }
    /// <summary>
    /// Extension container element for PreAuthRef
    /// </summary>
    public Element _PreAuthRef { get; set; }
    /// <summary>
    /// Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
    /// </summary>
    public List<string> Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public List<Element> _Purpose { get; set; }
    /// <summary>
    /// Reference to the original request resource.
    /// </summary>
    public Reference Request { get; set; }
    /// <summary>
    /// Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
    /// </summary>
    public Reference Requestor { get; set; }
    /// <summary>
    /// The date or dates when the enclosed suite of services were performed or completed.
    /// </summary>
    public string ServicedDate { get; set; }
    /// <summary>
    /// Extension container element for ServicedDate
    /// </summary>
    public Element _ServicedDate { get; set; }
    /// <summary>
    /// The date or dates when the enclosed suite of services were performed or completed.
    /// </summary>
    public Period ServicedPeriod { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((Purpose != null) && (Purpose.Count != 0))
      {
        writer.WritePropertyName("purpose");
        writer.WriteStartArray();

        foreach (string valPurpose in Purpose)
        {
          writer.WriteStringValue(valPurpose);
        }

        writer.WriteEndArray();
      }

      if ((_Purpose != null) && (_Purpose.Count != 0))
      {
        writer.WritePropertyName("_purpose");
        writer.WriteStartArray();

        foreach (Element val_Purpose in _Purpose)
        {
          val_Purpose.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ServicedDate))
      {
        writer.WriteString("servicedDate", (string)ServicedDate!);
      }

      if (_ServicedDate != null)
      {
        writer.WritePropertyName("_servicedDate");
        _ServicedDate.SerializeJson(writer, options);
      }

      if (ServicedPeriod != null)
      {
        writer.WritePropertyName("servicedPeriod");
        ServicedPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if (Requestor != null)
      {
        writer.WritePropertyName("requestor");
        Requestor.SerializeJson(writer, options);
      }

      if (Request != null)
      {
        writer.WritePropertyName("request");
        Request.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Outcome))
      {
        writer.WriteString("outcome", (string)Outcome!);
      }

      if (_Outcome != null)
      {
        writer.WritePropertyName("_outcome");
        _Outcome.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Disposition))
      {
        writer.WriteString("disposition", (string)Disposition!);
      }

      if (_Disposition != null)
      {
        writer.WritePropertyName("_disposition");
        _Disposition.SerializeJson(writer, options);
      }

      if (Insurer != null)
      {
        writer.WritePropertyName("insurer");
        Insurer.SerializeJson(writer, options);
      }

      if ((Insurance != null) && (Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();

        foreach (CoverageEligibilityResponseInsurance valInsurance in Insurance)
        {
          valInsurance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(PreAuthRef))
      {
        writer.WriteString("preAuthRef", (string)PreAuthRef!);
      }

      if (_PreAuthRef != null)
      {
        writer.WritePropertyName("_preAuthRef");
        _PreAuthRef.SerializeJson(writer, options);
      }

      if (Form != null)
      {
        writer.WritePropertyName("form");
        Form.SerializeJson(writer, options);
      }

      if ((Error != null) && (Error.Count != 0))
      {
        writer.WritePropertyName("error");
        writer.WriteStartArray();

        foreach (CoverageEligibilityResponseError valError in Error)
        {
          valError.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR4.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "disposition":
          Disposition = reader.GetString();
          break;

        case "_disposition":
          _Disposition = new fhirCsR4.Models.Element();
          _Disposition.DeserializeJson(ref reader, options);
          break;

        case "error":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Error = new List<CoverageEligibilityResponseError>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CoverageEligibilityResponseError objError = new fhirCsR4.Models.CoverageEligibilityResponseError();
            objError.DeserializeJson(ref reader, options);
            Error.Add(objError);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Error.Count == 0)
          {
            Error = null;
          }

          break;

        case "form":
          Form = new fhirCsR4.Models.CodeableConcept();
          Form.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Insurance = new List<CoverageEligibilityResponseInsurance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CoverageEligibilityResponseInsurance objInsurance = new fhirCsR4.Models.CoverageEligibilityResponseInsurance();
            objInsurance.DeserializeJson(ref reader, options);
            Insurance.Add(objInsurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Insurance.Count == 0)
          {
            Insurance = null;
          }

          break;

        case "insurer":
          Insurer = new fhirCsR4.Models.Reference();
          Insurer.DeserializeJson(ref reader, options);
          break;

        case "outcome":
          Outcome = reader.GetString();
          break;

        case "_outcome":
          _Outcome = new fhirCsR4.Models.Element();
          _Outcome.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR4.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          PreAuthRef = reader.GetString();
          break;

        case "_preAuthRef":
          _PreAuthRef = new fhirCsR4.Models.Element();
          _PreAuthRef.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Purpose = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Purpose.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Purpose.Count == 0)
          {
            Purpose = null;
          }

          break;

        case "_purpose":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Purpose = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Purpose = new fhirCsR4.Models.Element();
            obj_Purpose.DeserializeJson(ref reader, options);
            _Purpose.Add(obj_Purpose);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Purpose.Count == 0)
          {
            _Purpose = null;
          }

          break;

        case "request":
          Request = new fhirCsR4.Models.Reference();
          Request.DeserializeJson(ref reader, options);
          break;

        case "requestor":
          Requestor = new fhirCsR4.Models.Reference();
          Requestor.DeserializeJson(ref reader, options);
          break;

        case "servicedDate":
          ServicedDate = reader.GetString();
          break;

        case "_servicedDate":
          _ServicedDate = new fhirCsR4.Models.Element();
          _ServicedDate.DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          ServicedPeriod = new fhirCsR4.Models.Period();
          ServicedPeriod.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CoverageEligibilityResponse.outcome field
  /// </summary>
  public static class CoverageEligibilityResponseOutcomeCodes {
    public const string COMPLETE = "complete";
    public const string ERROR = "error";
    public const string PARTIAL = "partial";
  }
  /// <summary>
  /// Code Values for the CoverageEligibilityResponse.purpose field
  /// </summary>
  public static class CoverageEligibilityResponsePurposeCodes {
    public const string AUTH_REQUIREMENTS = "auth-requirements";
    public const string BENEFITS = "benefits";
    public const string DISCOVERY = "discovery";
    public const string VALIDATION = "validation";
  }
  /// <summary>
  /// Code Values for the CoverageEligibilityResponse.status field
  /// </summary>
  public static class CoverageEligibilityResponseStatusCodes {
    public const string ACTIVE = "active";
    public const string CANCELLED = "cancelled";
    public const string DRAFT = "draft";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
}
