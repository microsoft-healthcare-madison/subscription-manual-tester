// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceUdiCarrier>))]
  public class DeviceUdiCarrier : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The AIDC form of UDIs should be scanned or otherwise used for the identification of the device whenever possible to minimize errors in records resulting from manual transcriptions. If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
    /// </summary>
    public byte[] CarrierAIDC { get; set; }
    /// <summary>
    /// If separate barcodes for DI and PI are present, concatenate the string with DI first and in order of human readable expression on label.
    /// </summary>
    public string CarrierHRF { get; set; }
    /// <summary>
    /// Extension container element for CarrierHRF
    /// </summary>
    public Element _CarrierHRF { get; set; }
    /// <summary>
    /// The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
    /// </summary>
    public string DeviceIdentifier { get; set; }
    /// <summary>
    /// Extension container element for DeviceIdentifier
    /// </summary>
    public Element _DeviceIdentifier { get; set; }
    /// <summary>
    /// A coded entry to indicate how the data was entered.
    /// </summary>
    public string EntryType { get; set; }
    /// <summary>
    /// Extension container element for EntryType
    /// </summary>
    public Element _EntryType { get; set; }
    /// <summary>
    /// Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
    /// 1) GS1: 
    /// http://hl7.org/fhir/NamingSystem/gs1-di, 
    /// 2) HIBCC:
    /// http://hl7.org/fhir/NamingSystem/hibcc-dI, 
    /// 3) ICCBBA for blood containers:
    /// http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
    /// 4) ICCBA for other devices:
    /// http://hl7.org/fhir/NamingSystem/iccbba-other-di.
    /// </summary>
    public string Issuer { get; set; }
    /// <summary>
    /// Extension container element for Issuer
    /// </summary>
    public Element _Issuer { get; set; }
    /// <summary>
    /// The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
    /// </summary>
    public string Jurisdiction { get; set; }
    /// <summary>
    /// Extension container element for Jurisdiction
    /// </summary>
    public Element _Jurisdiction { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(DeviceIdentifier))
      {
        writer.WriteString("deviceIdentifier", (string)DeviceIdentifier!);
      }

      if (_DeviceIdentifier != null)
      {
        writer.WritePropertyName("_deviceIdentifier");
        _DeviceIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issuer))
      {
        writer.WriteString("issuer", (string)Issuer!);
      }

      if (_Issuer != null)
      {
        writer.WritePropertyName("_issuer");
        _Issuer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Jurisdiction))
      {
        writer.WriteString("jurisdiction", (string)Jurisdiction!);
      }

      if (_Jurisdiction != null)
      {
        writer.WritePropertyName("_jurisdiction");
        _Jurisdiction.SerializeJson(writer, options);
      }

      if (CarrierAIDC != null)
      {
        writer.WriteString("carrierAIDC", System.Convert.ToBase64String(CarrierAIDC));
      }

      if (!string.IsNullOrEmpty(CarrierHRF))
      {
        writer.WriteString("carrierHRF", (string)CarrierHRF!);
      }

      if (_CarrierHRF != null)
      {
        writer.WritePropertyName("_carrierHRF");
        _CarrierHRF.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EntryType))
      {
        writer.WriteString("entryType", (string)EntryType!);
      }

      if (_EntryType != null)
      {
        writer.WritePropertyName("_entryType");
        _EntryType.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "carrierAIDC":
          CarrierAIDC = System.Convert.FromBase64String(reader.GetString());
          break;

        case "carrierHRF":
          CarrierHRF = reader.GetString();
          break;

        case "_carrierHRF":
          _CarrierHRF = new fhirCsR4.Models.Element();
          _CarrierHRF.DeserializeJson(ref reader, options);
          break;

        case "deviceIdentifier":
          DeviceIdentifier = reader.GetString();
          break;

        case "_deviceIdentifier":
          _DeviceIdentifier = new fhirCsR4.Models.Element();
          _DeviceIdentifier.DeserializeJson(ref reader, options);
          break;

        case "entryType":
          EntryType = reader.GetString();
          break;

        case "_entryType":
          _EntryType = new fhirCsR4.Models.Element();
          _EntryType.DeserializeJson(ref reader, options);
          break;

        case "issuer":
          Issuer = reader.GetString();
          break;

        case "_issuer":
          _Issuer = new fhirCsR4.Models.Element();
          _Issuer.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = reader.GetString();
          break;

        case "_jurisdiction":
          _Jurisdiction = new fhirCsR4.Models.Element();
          _Jurisdiction.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Device.udiCarrier.entryType field
  /// </summary>
  public static class DeviceUdiCarrierEntryTypeCodes {
    public const string BARCODE = "barcode";
    public const string RFID = "rfid";
    public const string MANUAL = "manual";
    public const string CARD = "card";
    public const string SELF_REPORTED = "self-reported";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceDeviceName>))]
  public class DeviceDeviceName : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name that identifies the device.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The type of deviceName.
    /// UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Device.deviceName.type field
  /// </summary>
  public static class DeviceDeviceNameTypeCodes {
    public const string UDI_LABEL_NAME = "udi-label-name";
    public const string USER_FRIENDLY_NAME = "user-friendly-name";
    public const string PATIENT_REPORTED_NAME = "patient-reported-name";
    public const string MANUFACTURER_NAME = "manufacturer-name";
    public const string MODEL_NAME = "model-name";
    public const string OTHER = "other";
  }
  /// <summary>
  /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceSpecialization>))]
  public class DeviceSpecialization : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The standard that is used to operate and communicate.
    /// </summary>
    public CodeableConcept SystemType { get; set; }
    /// <summary>
    /// The version of the standard that is used to operate and communicate.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (SystemType != null)
      {
        writer.WritePropertyName("systemType");
        SystemType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "systemType":
          SystemType = new fhirCsR4.Models.CodeableConcept();
          SystemType.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The actual design of the device or software version running on the device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceVersion>))]
  public class DeviceVersion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A single component of the device version.
    /// </summary>
    public Identifier Component { get; set; }
    /// <summary>
    /// The type of the device version, e.g. manufacturer, approved, internal.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The version text.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Component != null)
      {
        writer.WritePropertyName("component");
        Component.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "component":
          Component = new fhirCsR4.Models.Identifier();
          Component.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceProperty>))]
  public class DeviceProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Property value as a code, e.g., NTP4 (synced to NTP).
    /// </summary>
    public List<CodeableConcept> ValueCode { get; set; }
    /// <summary>
    /// Property value as a quantity.
    /// </summary>
    public List<Quantity> ValueQuantity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((ValueQuantity != null) && (ValueQuantity.Count != 0))
      {
        writer.WritePropertyName("valueQuantity");
        writer.WriteStartArray();

        foreach (Quantity valValueQuantity in ValueQuantity)
        {
          valValueQuantity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ValueCode != null) && (ValueCode.Count != 0))
      {
        writer.WritePropertyName("valueCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valValueCode in ValueCode)
        {
          valValueCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objValueCode = new fhirCsR4.Models.CodeableConcept();
            objValueCode.DeserializeJson(ref reader, options);
            ValueCode.Add(objValueCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueCode.Count == 0)
          {
            ValueCode = null;
          }

          break;

        case "valueQuantity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueQuantity = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Quantity objValueQuantity = new fhirCsR4.Models.Quantity();
            objValueQuantity.DeserializeJson(ref reader, options);
            ValueQuantity.Add(objValueQuantity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueQuantity.Count == 0)
          {
            ValueQuantity = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Device>))]
  public class Device : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Device";
    /// <summary>
    /// used for troubleshooting etc.
    /// </summary>
    public List<ContactPoint> Contact { get; set; }
    /// <summary>
    /// The reference to the definition for the device.
    /// </summary>
    public Reference Definition { get; set; }
    /// <summary>
    /// This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
    /// </summary>
    public List<DeviceDeviceName> DeviceName { get; set; }
    /// <summary>
    /// For example, this applies to devices in the United States regulated under *Code of Federal Regulation 21CFR§1271.290(c)*.
    /// </summary>
    public string DistinctIdentifier { get; set; }
    /// <summary>
    /// Extension container element for DistinctIdentifier
    /// </summary>
    public Element _DistinctIdentifier { get; set; }
    /// <summary>
    /// The date and time beyond which this device is no longer valid or should not be used (if applicable).
    /// </summary>
    public string ExpirationDate { get; set; }
    /// <summary>
    /// Extension container element for ExpirationDate
    /// </summary>
    public Element _ExpirationDate { get; set; }
    /// <summary>
    /// The barcode string from a barcode present on a device label or package may identify the instance, include names given to the device in local usage, or may identify the type of device. If the identifier identifies the type of device, Device.type element should be used.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The place where the device can be found.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// Lot number assigned by the manufacturer.
    /// </summary>
    public string LotNumber { get; set; }
    /// <summary>
    /// Extension container element for LotNumber
    /// </summary>
    public Element _LotNumber { get; set; }
    /// <summary>
    /// The date and time when the device was manufactured.
    /// </summary>
    public string ManufactureDate { get; set; }
    /// <summary>
    /// Extension container element for ManufactureDate
    /// </summary>
    public Element _ManufactureDate { get; set; }
    /// <summary>
    /// A name of the manufacturer.
    /// </summary>
    public string Manufacturer { get; set; }
    /// <summary>
    /// Extension container element for Manufacturer
    /// </summary>
    public Element _Manufacturer { get; set; }
    /// <summary>
    /// The manufacturer's model number for the device.
    /// </summary>
    public string ModelNumber { get; set; }
    /// <summary>
    /// Extension container element for ModelNumber
    /// </summary>
    public Element _ModelNumber { get; set; }
    /// <summary>
    /// Descriptive information, usage information or implantation information that is not captured in an existing element.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// An organization that is responsible for the provision and ongoing maintenance of the device.
    /// </summary>
    public Reference Owner { get; set; }
    /// <summary>
    /// The device that this device is attached to or is part of.
    /// </summary>
    public Reference Parent { get; set; }
    /// <summary>
    /// Alphanumeric Maximum 20.
    /// </summary>
    public string PartNumber { get; set; }
    /// <summary>
    /// Extension container element for PartNumber
    /// </summary>
    public Element _PartNumber { get; set; }
    /// <summary>
    /// Patient information, If the device is affixed to a person.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
    /// </summary>
    public List<DeviceProperty> Property { get; set; }
    /// <summary>
    /// Provides additional safety characteristics about a medical device.  For example devices containing latex.
    /// </summary>
    public List<CodeableConcept> Safety { get; set; }
    /// <summary>
    /// Alphanumeric Maximum 20.
    /// </summary>
    public string SerialNumber { get; set; }
    /// <summary>
    /// Extension container element for SerialNumber
    /// </summary>
    public Element _SerialNumber { get; set; }
    /// <summary>
    /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
    /// </summary>
    public List<DeviceSpecialization> Specialization { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains the codes inactive and entered-in-error that mark the device (record)as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Reason for the dtatus of the Device availability.
    /// </summary>
    public List<CodeableConcept> StatusReason { get; set; }
    /// <summary>
    /// The kind or type of device.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// UDI may identify an unique instance of a device, or it may only identify the type of the device.  See [UDI mappings](device-mappings.html#udi) for a complete mapping of UDI parts to Device.
    /// </summary>
    public List<DeviceUdiCarrier> UdiCarrier { get; set; }
    /// <summary>
    /// If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// The actual design of the device or software version running on the device.
    /// </summary>
    public List<DeviceVersion> Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Definition != null)
      {
        writer.WritePropertyName("definition");
        Definition.SerializeJson(writer, options);
      }

      if ((UdiCarrier != null) && (UdiCarrier.Count != 0))
      {
        writer.WritePropertyName("udiCarrier");
        writer.WriteStartArray();

        foreach (DeviceUdiCarrier valUdiCarrier in UdiCarrier)
        {
          valUdiCarrier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((StatusReason != null) && (StatusReason.Count != 0))
      {
        writer.WritePropertyName("statusReason");
        writer.WriteStartArray();

        foreach (CodeableConcept valStatusReason in StatusReason)
        {
          valStatusReason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(DistinctIdentifier))
      {
        writer.WriteString("distinctIdentifier", (string)DistinctIdentifier!);
      }

      if (_DistinctIdentifier != null)
      {
        writer.WritePropertyName("_distinctIdentifier");
        _DistinctIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Manufacturer))
      {
        writer.WriteString("manufacturer", (string)Manufacturer!);
      }

      if (_Manufacturer != null)
      {
        writer.WritePropertyName("_manufacturer");
        _Manufacturer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ManufactureDate))
      {
        writer.WriteString("manufactureDate", (string)ManufactureDate!);
      }

      if (_ManufactureDate != null)
      {
        writer.WritePropertyName("_manufactureDate");
        _ManufactureDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ExpirationDate))
      {
        writer.WriteString("expirationDate", (string)ExpirationDate!);
      }

      if (_ExpirationDate != null)
      {
        writer.WritePropertyName("_expirationDate");
        _ExpirationDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LotNumber))
      {
        writer.WriteString("lotNumber", (string)LotNumber!);
      }

      if (_LotNumber != null)
      {
        writer.WritePropertyName("_lotNumber");
        _LotNumber.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SerialNumber))
      {
        writer.WriteString("serialNumber", (string)SerialNumber!);
      }

      if (_SerialNumber != null)
      {
        writer.WritePropertyName("_serialNumber");
        _SerialNumber.SerializeJson(writer, options);
      }

      if ((DeviceName != null) && (DeviceName.Count != 0))
      {
        writer.WritePropertyName("deviceName");
        writer.WriteStartArray();

        foreach (DeviceDeviceName valDeviceName in DeviceName)
        {
          valDeviceName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ModelNumber))
      {
        writer.WriteString("modelNumber", (string)ModelNumber!);
      }

      if (_ModelNumber != null)
      {
        writer.WritePropertyName("_modelNumber");
        _ModelNumber.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PartNumber))
      {
        writer.WriteString("partNumber", (string)PartNumber!);
      }

      if (_PartNumber != null)
      {
        writer.WritePropertyName("_partNumber");
        _PartNumber.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Specialization != null) && (Specialization.Count != 0))
      {
        writer.WritePropertyName("specialization");
        writer.WriteStartArray();

        foreach (DeviceSpecialization valSpecialization in Specialization)
        {
          valSpecialization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Version != null) && (Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();

        foreach (DeviceVersion valVersion in Version)
        {
          valVersion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (DeviceProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (Owner != null)
      {
        writer.WritePropertyName("owner");
        Owner.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactPoint valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Safety != null) && (Safety.Count != 0))
      {
        writer.WritePropertyName("safety");
        writer.WriteStartArray();

        foreach (CodeableConcept valSafety in Safety)
        {
          valSafety.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Parent != null)
      {
        writer.WritePropertyName("parent");
        Parent.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactPoint objContact = new fhirCsR4.Models.ContactPoint();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "definition":
          Definition = new fhirCsR4.Models.Reference();
          Definition.DeserializeJson(ref reader, options);
          break;

        case "deviceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DeviceName = new List<DeviceDeviceName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceDeviceName objDeviceName = new fhirCsR4.Models.DeviceDeviceName();
            objDeviceName.DeserializeJson(ref reader, options);
            DeviceName.Add(objDeviceName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DeviceName.Count == 0)
          {
            DeviceName = null;
          }

          break;

        case "distinctIdentifier":
          DistinctIdentifier = reader.GetString();
          break;

        case "_distinctIdentifier":
          _DistinctIdentifier = new fhirCsR4.Models.Element();
          _DistinctIdentifier.DeserializeJson(ref reader, options);
          break;

        case "expirationDate":
          ExpirationDate = reader.GetString();
          break;

        case "_expirationDate":
          _ExpirationDate = new fhirCsR4.Models.Element();
          _ExpirationDate.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "location":
          Location = new fhirCsR4.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "lotNumber":
          LotNumber = reader.GetString();
          break;

        case "_lotNumber":
          _LotNumber = new fhirCsR4.Models.Element();
          _LotNumber.DeserializeJson(ref reader, options);
          break;

        case "manufactureDate":
          ManufactureDate = reader.GetString();
          break;

        case "_manufactureDate":
          _ManufactureDate = new fhirCsR4.Models.Element();
          _ManufactureDate.DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          Manufacturer = reader.GetString();
          break;

        case "_manufacturer":
          _Manufacturer = new fhirCsR4.Models.Element();
          _Manufacturer.DeserializeJson(ref reader, options);
          break;

        case "modelNumber":
          ModelNumber = reader.GetString();
          break;

        case "_modelNumber":
          _ModelNumber = new fhirCsR4.Models.Element();
          _ModelNumber.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "owner":
          Owner = new fhirCsR4.Models.Reference();
          Owner.DeserializeJson(ref reader, options);
          break;

        case "parent":
          Parent = new fhirCsR4.Models.Reference();
          Parent.DeserializeJson(ref reader, options);
          break;

        case "partNumber":
          PartNumber = reader.GetString();
          break;

        case "_partNumber":
          _PartNumber = new fhirCsR4.Models.Element();
          _PartNumber.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR4.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<DeviceProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceProperty objProperty = new fhirCsR4.Models.DeviceProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "safety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Safety = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objSafety = new fhirCsR4.Models.CodeableConcept();
            objSafety.DeserializeJson(ref reader, options);
            Safety.Add(objSafety);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Safety.Count == 0)
          {
            Safety = null;
          }

          break;

        case "serialNumber":
          SerialNumber = reader.GetString();
          break;

        case "_serialNumber":
          _SerialNumber = new fhirCsR4.Models.Element();
          _SerialNumber.DeserializeJson(ref reader, options);
          break;

        case "specialization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specialization = new List<DeviceSpecialization>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceSpecialization objSpecialization = new fhirCsR4.Models.DeviceSpecialization();
            objSpecialization.DeserializeJson(ref reader, options);
            Specialization.Add(objSpecialization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specialization.Count == 0)
          {
            Specialization = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StatusReason = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objStatusReason = new fhirCsR4.Models.CodeableConcept();
            objStatusReason.DeserializeJson(ref reader, options);
            StatusReason.Add(objStatusReason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StatusReason.Count == 0)
          {
            StatusReason = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "udiCarrier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UdiCarrier = new List<DeviceUdiCarrier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceUdiCarrier objUdiCarrier = new fhirCsR4.Models.DeviceUdiCarrier();
            objUdiCarrier.DeserializeJson(ref reader, options);
            UdiCarrier.Add(objUdiCarrier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UdiCarrier.Count == 0)
          {
            UdiCarrier = null;
          }

          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Version = new List<DeviceVersion>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceVersion objVersion = new fhirCsR4.Models.DeviceVersion();
            objVersion.DeserializeJson(ref reader, options);
            Version.Add(objVersion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Version.Count == 0)
          {
            Version = null;
          }

          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Device.status field
  /// </summary>
  public static class DeviceStatusCodes {
    public const string ACTIVE = "active";
    public const string INACTIVE = "inactive";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
  }
}
