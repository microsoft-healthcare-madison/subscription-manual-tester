// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Interval.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<OrderedDistributionInterval>))]
  public class OrderedDistributionInterval : Element,  IFhirJsonSerializable {
    /// <summary>
    /// Values and parameters for a single statistic related to the interval.
    /// </summary>
    public List<Statistic> IntervalStatistic { get; set; }
    /// <summary>
    /// Relative order of interval.
    /// </summary>
    public int RankOrder { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.Element)this).SerializeJson(writer, options, false);

      writer.WriteNumber("rankOrder", RankOrder);

      if ((IntervalStatistic != null) && (IntervalStatistic.Count != 0))
      {
        writer.WritePropertyName("intervalStatistic");
        writer.WriteStartArray();

        foreach (Statistic valIntervalStatistic in IntervalStatistic)
        {
          valIntervalStatistic.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "intervalStatistic":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          IntervalStatistic = new List<Statistic>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Statistic objIntervalStatistic = new fhirCsR4.Models.Statistic();
            objIntervalStatistic.DeserializeJson(ref reader, options);
            IntervalStatistic.Add(objIntervalStatistic);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (IntervalStatistic.Count == 0)
          {
            IntervalStatistic = null;
          }

          break;

        case "rankOrder":
          RankOrder = reader.GetInt32();
          break;

        default:
          ((fhirCsR4.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An ordered list (distribution) of statistics.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<OrderedDistribution>))]
  public class OrderedDistribution : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Bottom of first interval.
    /// </summary>
    public Quantity BottomOfFirstInterval { get; set; }
    /// <summary>
    /// A description of the content and value of the statistic.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Interval.
    /// </summary>
    public List<OrderedDistributionInterval> Interval { get; set; }
    /// <summary>
    /// Footnotes and/or explanatory notes.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Number of intervals in an array, eg 4 for quartiles.
    /// </summary>
    public int NumberOfIntervals { get; set; }
    /// <summary>
    /// Singular value of the statistic at the upper bound of the interval.
    /// </summary>
    public Quantity TopOfInterval { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      writer.WriteNumber("numberOfIntervals", NumberOfIntervals);

      if (BottomOfFirstInterval != null)
      {
        writer.WritePropertyName("bottomOfFirstInterval");
        BottomOfFirstInterval.SerializeJson(writer, options);
      }

      if ((Interval != null) && (Interval.Count != 0))
      {
        writer.WritePropertyName("interval");
        writer.WriteStartArray();

        foreach (OrderedDistributionInterval valInterval in Interval)
        {
          valInterval.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (TopOfInterval != null)
      {
        writer.WritePropertyName("topOfInterval");
        TopOfInterval.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "bottomOfFirstInterval":
          BottomOfFirstInterval = new fhirCsR4.Models.Quantity();
          BottomOfFirstInterval.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "interval":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interval = new List<OrderedDistributionInterval>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.OrderedDistributionInterval objInterval = new fhirCsR4.Models.OrderedDistributionInterval();
            objInterval.DeserializeJson(ref reader, options);
            Interval.Add(objInterval);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interval.Count == 0)
          {
            Interval = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "numberOfIntervals":
          NumberOfIntervals = reader.GetInt32();
          break;

        case "topOfInterval":
          TopOfInterval = new fhirCsR4.Models.Quantity();
          TopOfInterval.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
