// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlanContact>))]
  public class InsurancePlanContact : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Visiting or postal addresses for the contact.
    /// </summary>
    public Address Address { get; set; }
    /// <summary>
    /// A name associated with the contact.
    /// </summary>
    public HumanName Name { get; set; }
    /// <summary>
    /// Indicates a purpose for which the contact can be reached.
    /// </summary>
    public CodeableConcept Purpose { get; set; }
    /// <summary>
    /// A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Purpose != null)
      {
        writer.WritePropertyName("purpose");
        Purpose.SerializeJson(writer, options);
      }

      if (Name != null)
      {
        writer.WritePropertyName("name");
        Name.SerializeJson(writer, options);
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Address != null)
      {
        writer.WritePropertyName("address");
        Address.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          Address = new fhirCsR4.Models.Address();
          Address.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = new fhirCsR4.Models.HumanName();
          Name.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = new fhirCsR4.Models.CodeableConcept();
          Purpose.DeserializeJson(ref reader, options);
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactPoint objTelecom = new fhirCsR4.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The specific limits on the benefit.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlanCoverageBenefitLimit>))]
  public class InsurancePlanCoverageBenefitLimit : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Use `CodeableConcept.text` element if the data is free (uncoded) text.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// May also be called “eligible expense,” “payment allowance,” or “negotiated rate.”.
    /// </summary>
    public Quantity Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Value != null)
      {
        writer.WritePropertyName("value");
        Value.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = new fhirCsR4.Models.Quantity();
          Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Specific benefits under this type of coverage.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlanCoverageBenefit>))]
  public class InsurancePlanCoverageBenefit : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The specific limits on the benefit.
    /// </summary>
    public List<InsurancePlanCoverageBenefitLimit> Limit { get; set; }
    /// <summary>
    /// The referral requirements to have access/coverage for this benefit.
    /// </summary>
    public string Requirement { get; set; }
    /// <summary>
    /// Extension container element for Requirement
    /// </summary>
    public Element _Requirement { get; set; }
    /// <summary>
    /// Type of benefit (primary care; speciality care; inpatient; outpatient).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Requirement))
      {
        writer.WriteString("requirement", (string)Requirement!);
      }

      if (_Requirement != null)
      {
        writer.WritePropertyName("_requirement");
        _Requirement.SerializeJson(writer, options);
      }

      if ((Limit != null) && (Limit.Count != 0))
      {
        writer.WritePropertyName("limit");
        writer.WriteStartArray();

        foreach (InsurancePlanCoverageBenefitLimit valLimit in Limit)
        {
          valLimit.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "limit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Limit = new List<InsurancePlanCoverageBenefitLimit>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.InsurancePlanCoverageBenefitLimit objLimit = new fhirCsR4.Models.InsurancePlanCoverageBenefitLimit();
            objLimit.DeserializeJson(ref reader, options);
            Limit.Add(objLimit);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Limit.Count == 0)
          {
            Limit = null;
          }

          break;

        case "requirement":
          Requirement = reader.GetString();
          break;

        case "_requirement":
          _Requirement = new fhirCsR4.Models.Element();
          _Requirement.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details about the coverage offered by the insurance product.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlanCoverage>))]
  public class InsurancePlanCoverage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Specific benefits under this type of coverage.
    /// </summary>
    public List<InsurancePlanCoverageBenefit> Benefit { get; set; }
    /// <summary>
    /// Networks are represented as a hierarchy of organization resources.
    /// </summary>
    public List<Reference> Network { get; set; }
    /// <summary>
    /// Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Network != null) && (Network.Count != 0))
      {
        writer.WritePropertyName("network");
        writer.WriteStartArray();

        foreach (Reference valNetwork in Network)
        {
          valNetwork.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Benefit != null) && (Benefit.Count != 0))
      {
        writer.WritePropertyName("benefit");
        writer.WriteStartArray();

        foreach (InsurancePlanCoverageBenefit valBenefit in Benefit)
        {
          valBenefit.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "benefit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Benefit = new List<InsurancePlanCoverageBenefit>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.InsurancePlanCoverageBenefit objBenefit = new fhirCsR4.Models.InsurancePlanCoverageBenefit();
            objBenefit.DeserializeJson(ref reader, options);
            Benefit.Add(objBenefit);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Benefit.Count == 0)
          {
            Benefit = null;
          }

          break;

        case "network":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Network = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objNetwork = new fhirCsR4.Models.Reference();
            objNetwork.DeserializeJson(ref reader, options);
            Network.Add(objNetwork);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Network.Count == 0)
          {
            Network = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Overall costs associated with the plan.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlanPlanGeneralCost>))]
  public class InsurancePlanPlanGeneralCost : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Additional information about the general costs associated with this plan.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// Value of the cost.
    /// </summary>
    public Money Cost { get; set; }
    /// <summary>
    /// Number of participants enrolled in the plan.
    /// </summary>
    public uint? GroupSize { get; set; }
    /// <summary>
    /// Type of cost.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (GroupSize != null)
      {
        writer.WriteNumber("groupSize", (uint)GroupSize!);
      }

      if (Cost != null)
      {
        writer.WritePropertyName("cost");
        Cost.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Comment))
      {
        writer.WriteString("comment", (string)Comment!);
      }

      if (_Comment != null)
      {
        writer.WritePropertyName("_comment");
        _Comment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new fhirCsR4.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "cost":
          Cost = new fhirCsR4.Models.Money();
          Cost.DeserializeJson(ref reader, options);
          break;

        case "groupSize":
          GroupSize = reader.GetUInt32();
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of the costs associated with a specific benefit.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlanPlanSpecificCostBenefitCost>))]
  public class InsurancePlanPlanSpecificCostBenefitCost : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).
    /// </summary>
    public CodeableConcept Applicability { get; set; }
    /// <summary>
    /// Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).
    /// </summary>
    public List<CodeableConcept> Qualifiers { get; set; }
    /// <summary>
    /// Type of cost (copay; individual cap; family cap; coinsurance; deductible).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).
    /// </summary>
    public Quantity Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Applicability != null)
      {
        writer.WritePropertyName("applicability");
        Applicability.SerializeJson(writer, options);
      }

      if ((Qualifiers != null) && (Qualifiers.Count != 0))
      {
        writer.WritePropertyName("qualifiers");
        writer.WriteStartArray();

        foreach (CodeableConcept valQualifiers in Qualifiers)
        {
          valQualifiers.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Value != null)
      {
        writer.WritePropertyName("value");
        Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "applicability":
          Applicability = new fhirCsR4.Models.CodeableConcept();
          Applicability.DeserializeJson(ref reader, options);
          break;

        case "qualifiers":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Qualifiers = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objQualifiers = new fhirCsR4.Models.CodeableConcept();
            objQualifiers.DeserializeJson(ref reader, options);
            Qualifiers.Add(objQualifiers);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Qualifiers.Count == 0)
          {
            Qualifiers = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = new fhirCsR4.Models.Quantity();
          Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of the specific benefits under this category of benefit.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlanPlanSpecificCostBenefit>))]
  public class InsurancePlanPlanSpecificCostBenefit : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// List of the costs associated with a specific benefit.
    /// </summary>
    public List<InsurancePlanPlanSpecificCostBenefitCost> Cost { get; set; }
    /// <summary>
    /// Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Cost != null) && (Cost.Count != 0))
      {
        writer.WritePropertyName("cost");
        writer.WriteStartArray();

        foreach (InsurancePlanPlanSpecificCostBenefitCost valCost in Cost)
        {
          valCost.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Cost = new List<InsurancePlanPlanSpecificCostBenefitCost>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.InsurancePlanPlanSpecificCostBenefitCost objCost = new fhirCsR4.Models.InsurancePlanPlanSpecificCostBenefitCost();
            objCost.DeserializeJson(ref reader, options);
            Cost.Add(objCost);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Cost.Count == 0)
          {
            Cost = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Costs associated with the coverage provided by the product.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlanPlanSpecificCost>))]
  public class InsurancePlanPlanSpecificCost : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// List of the specific benefits under this category of benefit.
    /// </summary>
    public List<InsurancePlanPlanSpecificCostBenefit> Benefit { get; set; }
    /// <summary>
    /// General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if ((Benefit != null) && (Benefit.Count != 0))
      {
        writer.WritePropertyName("benefit");
        writer.WriteStartArray();

        foreach (InsurancePlanPlanSpecificCostBenefit valBenefit in Benefit)
        {
          valBenefit.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "benefit":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Benefit = new List<InsurancePlanPlanSpecificCostBenefit>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.InsurancePlanPlanSpecificCostBenefit objBenefit = new fhirCsR4.Models.InsurancePlanPlanSpecificCostBenefit();
            objBenefit.DeserializeJson(ref reader, options);
            Benefit.Add(objBenefit);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Benefit.Count == 0)
          {
            Benefit = null;
          }

          break;

        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details about an insurance plan.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlanPlan>))]
  public class InsurancePlanPlan : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The geographic region in which a health insurance plan's benefits apply.
    /// </summary>
    public List<Reference> CoverageArea { get; set; }
    /// <summary>
    /// Overall costs associated with the plan.
    /// </summary>
    public List<InsurancePlanPlanGeneralCost> GeneralCost { get; set; }
    /// <summary>
    /// Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Networks are represented as a hierarchy of organization resources.
    /// </summary>
    public List<Reference> Network { get; set; }
    /// <summary>
    /// Costs associated with the coverage provided by the product.
    /// </summary>
    public List<InsurancePlanPlanSpecificCost> SpecificCost { get; set; }
    /// <summary>
    /// Type of plan. For example, "Platinum" or "High Deductable".
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((CoverageArea != null) && (CoverageArea.Count != 0))
      {
        writer.WritePropertyName("coverageArea");
        writer.WriteStartArray();

        foreach (Reference valCoverageArea in CoverageArea)
        {
          valCoverageArea.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Network != null) && (Network.Count != 0))
      {
        writer.WritePropertyName("network");
        writer.WriteStartArray();

        foreach (Reference valNetwork in Network)
        {
          valNetwork.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((GeneralCost != null) && (GeneralCost.Count != 0))
      {
        writer.WritePropertyName("generalCost");
        writer.WriteStartArray();

        foreach (InsurancePlanPlanGeneralCost valGeneralCost in GeneralCost)
        {
          valGeneralCost.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SpecificCost != null) && (SpecificCost.Count != 0))
      {
        writer.WritePropertyName("specificCost");
        writer.WriteStartArray();

        foreach (InsurancePlanPlanSpecificCost valSpecificCost in SpecificCost)
        {
          valSpecificCost.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "coverageArea":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CoverageArea = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objCoverageArea = new fhirCsR4.Models.Reference();
            objCoverageArea.DeserializeJson(ref reader, options);
            CoverageArea.Add(objCoverageArea);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CoverageArea.Count == 0)
          {
            CoverageArea = null;
          }

          break;

        case "generalCost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          GeneralCost = new List<InsurancePlanPlanGeneralCost>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.InsurancePlanPlanGeneralCost objGeneralCost = new fhirCsR4.Models.InsurancePlanPlanGeneralCost();
            objGeneralCost.DeserializeJson(ref reader, options);
            GeneralCost.Add(objGeneralCost);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (GeneralCost.Count == 0)
          {
            GeneralCost = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "network":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Network = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objNetwork = new fhirCsR4.Models.Reference();
            objNetwork.DeserializeJson(ref reader, options);
            Network.Add(objNetwork);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Network.Count == 0)
          {
            Network = null;
          }

          break;

        case "specificCost":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SpecificCost = new List<InsurancePlanPlanSpecificCost>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.InsurancePlanPlanSpecificCost objSpecificCost = new fhirCsR4.Models.InsurancePlanPlanSpecificCost();
            objSpecificCost.DeserializeJson(ref reader, options);
            SpecificCost.Add(objSpecificCost);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SpecificCost.Count == 0)
          {
            SpecificCost = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details of a Health Insurance product/plan provided by an organization.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<InsurancePlan>))]
  public class InsurancePlan : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "InsurancePlan";
    /// <summary>
    /// An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.
    /// </summary>
    public Reference AdministeredBy { get; set; }
    /// <summary>
    /// There are no dates associated with the alias/historic names, as this is not intended to track when names were used, but to assist in searching so that older names can still result in identifying the product/plan.
    /// </summary>
    public List<string> Alias { get; set; }
    /// <summary>
    /// Extension container element for Alias
    /// </summary>
    public List<Element> _Alias { get; set; }
    /// <summary>
    /// Where multiple contacts for the same purpose are provided there is a standard extension that can be used to determine which one is the preferred contact to use.
    /// </summary>
    public List<InsurancePlanContact> Contact { get; set; }
    /// <summary>
    /// Details about the coverage offered by the insurance product.
    /// </summary>
    public List<InsurancePlanCoverage> Coverage { get; set; }
    /// <summary>
    /// The geographic region in which a health insurance product's benefits apply.
    /// </summary>
    public List<Reference> CoverageArea { get; set; }
    /// <summary>
    /// The technical endpoints providing access to services operated for the health insurance product.
    /// </summary>
    public List<Reference> Endpoint { get; set; }
    /// <summary>
    /// Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// If the name of the product/plan changes, consider putting the old name in the alias column so that it can still be located through searches.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Networks are represented as a hierarchy of organization resources.
    /// </summary>
    public List<Reference> Network { get; set; }
    /// <summary>
    /// The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.
    /// </summary>
    public Reference OwnedBy { get; set; }
    /// <summary>
    /// The period of time that the health insurance product is available.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Details about an insurance plan.
    /// </summary>
    public List<InsurancePlanPlan> Plan { get; set; }
    /// <summary>
    /// The current state of the health insurance product.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The kind of health insurance product.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if ((Alias != null) && (Alias.Count != 0))
      {
        writer.WritePropertyName("alias");
        writer.WriteStartArray();

        foreach (string valAlias in Alias)
        {
          writer.WriteStringValue(valAlias);
        }

        writer.WriteEndArray();
      }

      if ((_Alias != null) && (_Alias.Count != 0))
      {
        writer.WritePropertyName("_alias");
        writer.WriteStartArray();

        foreach (Element val_Alias in _Alias)
        {
          val_Alias.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if (OwnedBy != null)
      {
        writer.WritePropertyName("ownedBy");
        OwnedBy.SerializeJson(writer, options);
      }

      if (AdministeredBy != null)
      {
        writer.WritePropertyName("administeredBy");
        AdministeredBy.SerializeJson(writer, options);
      }

      if ((CoverageArea != null) && (CoverageArea.Count != 0))
      {
        writer.WritePropertyName("coverageArea");
        writer.WriteStartArray();

        foreach (Reference valCoverageArea in CoverageArea)
        {
          valCoverageArea.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (InsurancePlanContact valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Endpoint != null) && (Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();

        foreach (Reference valEndpoint in Endpoint)
        {
          valEndpoint.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Network != null) && (Network.Count != 0))
      {
        writer.WritePropertyName("network");
        writer.WriteStartArray();

        foreach (Reference valNetwork in Network)
        {
          valNetwork.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Coverage != null) && (Coverage.Count != 0))
      {
        writer.WritePropertyName("coverage");
        writer.WriteStartArray();

        foreach (InsurancePlanCoverage valCoverage in Coverage)
        {
          valCoverage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Plan != null) && (Plan.Count != 0))
      {
        writer.WritePropertyName("plan");
        writer.WriteStartArray();

        foreach (InsurancePlanPlan valPlan in Plan)
        {
          valPlan.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "administeredBy":
          AdministeredBy = new fhirCsR4.Models.Reference();
          AdministeredBy.DeserializeJson(ref reader, options);
          break;

        case "alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Alias = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Alias.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Alias.Count == 0)
          {
            Alias = null;
          }

          break;

        case "_alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Alias = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Alias = new fhirCsR4.Models.Element();
            obj_Alias.DeserializeJson(ref reader, options);
            _Alias.Add(obj_Alias);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Alias.Count == 0)
          {
            _Alias = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<InsurancePlanContact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.InsurancePlanContact objContact = new fhirCsR4.Models.InsurancePlanContact();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "coverage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Coverage = new List<InsurancePlanCoverage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.InsurancePlanCoverage objCoverage = new fhirCsR4.Models.InsurancePlanCoverage();
            objCoverage.DeserializeJson(ref reader, options);
            Coverage.Add(objCoverage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Coverage.Count == 0)
          {
            Coverage = null;
          }

          break;

        case "coverageArea":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CoverageArea = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objCoverageArea = new fhirCsR4.Models.Reference();
            objCoverageArea.DeserializeJson(ref reader, options);
            CoverageArea.Add(objCoverageArea);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CoverageArea.Count == 0)
          {
            CoverageArea = null;
          }

          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objEndpoint = new fhirCsR4.Models.Reference();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "network":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Network = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objNetwork = new fhirCsR4.Models.Reference();
            objNetwork.DeserializeJson(ref reader, options);
            Network.Add(objNetwork);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Network.Count == 0)
          {
            Network = null;
          }

          break;

        case "ownedBy":
          OwnedBy = new fhirCsR4.Models.Reference();
          OwnedBy.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR4.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "plan":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Plan = new List<InsurancePlanPlan>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.InsurancePlanPlan objPlan = new fhirCsR4.Models.InsurancePlanPlan();
            objPlan.DeserializeJson(ref reader, options);
            Plan.Add(objPlan);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Plan.Count == 0)
          {
            Plan = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objType = new fhirCsR4.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the InsurancePlan.status field
  /// </summary>
  public static class InsurancePlanStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
