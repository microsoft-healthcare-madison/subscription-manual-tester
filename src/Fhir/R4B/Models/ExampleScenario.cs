// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Actor participating in the resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ExampleScenarioActor>))]
  public class ExampleScenarioActor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// should this be called ID or acronym?
    /// </summary>
    public string ActorId { get; set; }
    /// <summary>
    /// Extension container element for ActorId
    /// </summary>
    public Element _ActorId { get; set; }
    /// <summary>
    /// Cardinality: is name and description 1..1?
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Cardinality: is name and description 1..1?
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The type of actor - person or system.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(ActorId))
      {
        writer.WriteString("actorId", (string)ActorId!);
      }

      if (_ActorId != null)
      {
        writer.WritePropertyName("_actorId");
        _ActorId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actorId":
          ActorId = reader.GetString();
          break;

        case "_actorId":
          _ActorId = new fhirCsR4.Models.Element();
          _ActorId.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ExampleScenario.actor.type field
  /// </summary>
  public static class ExampleScenarioActorTypeCodes {
    public const string PERSON = "person";
    public const string ENTITY = "entity";
  }
  /// <summary>
  /// A specific version of the resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ExampleScenarioInstanceVersion>))]
  public class ExampleScenarioInstanceVersion : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The description of the resource version.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The identifier of a specific version of a resource.
    /// </summary>
    public string VersionId { get; set; }
    /// <summary>
    /// Extension container element for VersionId
    /// </summary>
    public Element _VersionId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(VersionId))
      {
        writer.WriteString("versionId", (string)VersionId!);
      }

      if (_VersionId != null)
      {
        writer.WritePropertyName("_versionId");
        _VersionId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "versionId":
          VersionId = reader.GetString();
          break;

        case "_versionId":
          _VersionId = new fhirCsR4.Models.Element();
          _VersionId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Resources contained in the instance (e.g. the observations contained in a bundle).
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ExampleScenarioInstanceContainedInstance>))]
  public class ExampleScenarioInstanceContainedInstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Each resource contained in the instance.
    /// </summary>
    public string ResourceId { get; set; }
    /// <summary>
    /// Extension container element for ResourceId
    /// </summary>
    public Element _ResourceId { get; set; }
    /// <summary>
    /// A specific version of a resource contained in the instance.
    /// </summary>
    public string VersionId { get; set; }
    /// <summary>
    /// Extension container element for VersionId
    /// </summary>
    public Element _VersionId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(ResourceId))
      {
        writer.WriteString("resourceId", (string)ResourceId!);
      }

      if (_ResourceId != null)
      {
        writer.WritePropertyName("_resourceId");
        _ResourceId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(VersionId))
      {
        writer.WriteString("versionId", (string)VersionId!);
      }

      if (_VersionId != null)
      {
        writer.WritePropertyName("_versionId");
        _VersionId.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "resourceId":
          ResourceId = reader.GetString();
          break;

        case "_resourceId":
          _ResourceId = new fhirCsR4.Models.Element();
          _ResourceId.DeserializeJson(ref reader, options);
          break;

        case "versionId":
          VersionId = reader.GetString();
          break;

        case "_versionId":
          _VersionId = new fhirCsR4.Models.Element();
          _VersionId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Each resource and each version that is present in the workflow.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ExampleScenarioInstance>))]
  public class ExampleScenarioInstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Resources contained in the instance (e.g. the observations contained in a bundle).
    /// </summary>
    public List<ExampleScenarioInstanceContainedInstance> ContainedInstance { get; set; }
    /// <summary>
    /// Human-friendly description of the resource instance.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A short name for the resource instance.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The id of the resource for referencing.
    /// </summary>
    public string ResourceId { get; set; }
    /// <summary>
    /// Extension container element for ResourceId
    /// </summary>
    public Element _ResourceId { get; set; }
    /// <summary>
    /// The type of the resource.
    /// </summary>
    public string ResourceType { get; set; }
    /// <summary>
    /// Extension container element for ResourceType
    /// </summary>
    public Element _ResourceType { get; set; }
    /// <summary>
    /// A specific version of the resource.
    /// </summary>
    public List<ExampleScenarioInstanceVersion> Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(ResourceId))
      {
        writer.WriteString("resourceId", (string)ResourceId!);
      }

      if (_ResourceId != null)
      {
        writer.WritePropertyName("_resourceId");
        _ResourceId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }

      if (_ResourceType != null)
      {
        writer.WritePropertyName("_resourceType");
        _ResourceType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Version != null) && (Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();

        foreach (ExampleScenarioInstanceVersion valVersion in Version)
        {
          valVersion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ContainedInstance != null) && (ContainedInstance.Count != 0))
      {
        writer.WritePropertyName("containedInstance");
        writer.WriteStartArray();

        foreach (ExampleScenarioInstanceContainedInstance valContainedInstance in ContainedInstance)
        {
          valContainedInstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "containedInstance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ContainedInstance = new List<ExampleScenarioInstanceContainedInstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ExampleScenarioInstanceContainedInstance objContainedInstance = new fhirCsR4.Models.ExampleScenarioInstanceContainedInstance();
            objContainedInstance.DeserializeJson(ref reader, options);
            ContainedInstance.Add(objContainedInstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ContainedInstance.Count == 0)
          {
            ContainedInstance = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "resourceId":
          ResourceId = reader.GetString();
          break;

        case "_resourceId":
          _ResourceId = new fhirCsR4.Models.Element();
          _ResourceId.DeserializeJson(ref reader, options);
          break;

        case "resourceType":
          ResourceType = reader.GetString();
          break;

        case "_resourceType":
          _ResourceType = new fhirCsR4.Models.Element();
          _ResourceType.DeserializeJson(ref reader, options);
          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Version = new List<ExampleScenarioInstanceVersion>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ExampleScenarioInstanceVersion objVersion = new fhirCsR4.Models.ExampleScenarioInstanceVersion();
            objVersion.DeserializeJson(ref reader, options);
            Version.Add(objVersion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Version.Count == 0)
          {
            Version = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Each interaction or action.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ExampleScenarioProcessStepOperation>))]
  public class ExampleScenarioProcessStepOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A comment to be inserted in the diagram.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Who starts the transaction.
    /// </summary>
    public string Initiator { get; set; }
    /// <summary>
    /// Extension container element for Initiator
    /// </summary>
    public Element _Initiator { get; set; }
    /// <summary>
    /// Whether the initiator is deactivated right after the transaction.
    /// </summary>
    public bool? InitiatorActive { get; set; }
    /// <summary>
    /// The human-friendly name of the interaction.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The sequential number of the interaction, e.g. 1.2.5.
    /// </summary>
    public string Number { get; set; }
    /// <summary>
    /// Extension container element for Number
    /// </summary>
    public Element _Number { get; set; }
    /// <summary>
    /// Who receives the transaction.
    /// </summary>
    public string Receiver { get; set; }
    /// <summary>
    /// Extension container element for Receiver
    /// </summary>
    public Element _Receiver { get; set; }
    /// <summary>
    /// Whether the receiver is deactivated right after the transaction.
    /// </summary>
    public bool? ReceiverActive { get; set; }
    /// <summary>
    /// Each resource instance used by the initiator.
    /// </summary>
    public ExampleScenarioInstanceContainedInstance Request { get; set; }
    /// <summary>
    /// Each resource instance used by the responder.
    /// </summary>
    public ExampleScenarioInstanceContainedInstance Response { get; set; }
    /// <summary>
    /// The type of operation - CRUD.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Number))
      {
        writer.WriteString("number", (string)Number!);
      }

      if (_Number != null)
      {
        writer.WritePropertyName("_number");
        _Number.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Initiator))
      {
        writer.WriteString("initiator", (string)Initiator!);
      }

      if (_Initiator != null)
      {
        writer.WritePropertyName("_initiator");
        _Initiator.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Receiver))
      {
        writer.WriteString("receiver", (string)Receiver!);
      }

      if (_Receiver != null)
      {
        writer.WritePropertyName("_receiver");
        _Receiver.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (InitiatorActive != null)
      {
        writer.WriteBoolean("initiatorActive", (bool)InitiatorActive!);
      }

      if (ReceiverActive != null)
      {
        writer.WriteBoolean("receiverActive", (bool)ReceiverActive!);
      }

      if (Request != null)
      {
        writer.WritePropertyName("request");
        Request.SerializeJson(writer, options);
      }

      if (Response != null)
      {
        writer.WritePropertyName("response");
        Response.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "initiator":
          Initiator = reader.GetString();
          break;

        case "_initiator":
          _Initiator = new fhirCsR4.Models.Element();
          _Initiator.DeserializeJson(ref reader, options);
          break;

        case "initiatorActive":
          InitiatorActive = reader.GetBoolean();
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "number":
          Number = reader.GetString();
          break;

        case "_number":
          _Number = new fhirCsR4.Models.Element();
          _Number.DeserializeJson(ref reader, options);
          break;

        case "receiver":
          Receiver = reader.GetString();
          break;

        case "_receiver":
          _Receiver = new fhirCsR4.Models.Element();
          _Receiver.DeserializeJson(ref reader, options);
          break;

        case "receiverActive":
          ReceiverActive = reader.GetBoolean();
          break;

        case "request":
          Request = new fhirCsR4.Models.ExampleScenarioInstanceContainedInstance();
          Request.DeserializeJson(ref reader, options);
          break;

        case "response":
          Response = new fhirCsR4.Models.ExampleScenarioInstanceContainedInstance();
          Response.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ExampleScenarioProcessStepAlternative>))]
  public class ExampleScenarioProcessStepAlternative : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// What happens in each alternative option.
    /// </summary>
    public List<ExampleScenarioProcessStep> Step { get; set; }
    /// <summary>
    /// The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Step != null) && (Step.Count != 0))
      {
        writer.WritePropertyName("step");
        writer.WriteStartArray();

        foreach (ExampleScenarioProcessStep valStep in Step)
        {
          valStep.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "step":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Step = new List<ExampleScenarioProcessStep>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ExampleScenarioProcessStep objStep = new fhirCsR4.Models.ExampleScenarioProcessStep();
            objStep.DeserializeJson(ref reader, options);
            Step.Add(objStep);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Step.Count == 0)
          {
            Step = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Each step of the process.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ExampleScenarioProcessStep>))]
  public class ExampleScenarioProcessStep : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
    /// </summary>
    public List<ExampleScenarioProcessStepAlternative> Alternative { get; set; }
    /// <summary>
    /// Each interaction or action.
    /// </summary>
    public ExampleScenarioProcessStepOperation Operation { get; set; }
    /// <summary>
    /// If there is a pause in the flow.
    /// </summary>
    public bool? Pause { get; set; }
    /// <summary>
    /// Nested process.
    /// </summary>
    public List<ExampleScenarioProcess> Process { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Process != null) && (Process.Count != 0))
      {
        writer.WritePropertyName("process");
        writer.WriteStartArray();

        foreach (ExampleScenarioProcess valProcess in Process)
        {
          valProcess.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Pause != null)
      {
        writer.WriteBoolean("pause", (bool)Pause!);
      }

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if ((Alternative != null) && (Alternative.Count != 0))
      {
        writer.WritePropertyName("alternative");
        writer.WriteStartArray();

        foreach (ExampleScenarioProcessStepAlternative valAlternative in Alternative)
        {
          valAlternative.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "alternative":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Alternative = new List<ExampleScenarioProcessStepAlternative>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ExampleScenarioProcessStepAlternative objAlternative = new fhirCsR4.Models.ExampleScenarioProcessStepAlternative();
            objAlternative.DeserializeJson(ref reader, options);
            Alternative.Add(objAlternative);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Alternative.Count == 0)
          {
            Alternative = null;
          }

          break;

        case "operation":
          Operation = new fhirCsR4.Models.ExampleScenarioProcessStepOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        case "pause":
          Pause = reader.GetBoolean();
          break;

        case "process":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Process = new List<ExampleScenarioProcess>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ExampleScenarioProcess objProcess = new fhirCsR4.Models.ExampleScenarioProcess();
            objProcess.DeserializeJson(ref reader, options);
            Process.Add(objProcess);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Process.Count == 0)
          {
            Process = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Each major process - a group of operations.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ExampleScenarioProcess>))]
  public class ExampleScenarioProcess : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A longer description of the group of operations.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Description of final status after the process ends.
    /// </summary>
    public string PostConditions { get; set; }
    /// <summary>
    /// Extension container element for PostConditions
    /// </summary>
    public Element _PostConditions { get; set; }
    /// <summary>
    /// Description of initial status before the process starts.
    /// </summary>
    public string PreConditions { get; set; }
    /// <summary>
    /// Extension container element for PreConditions
    /// </summary>
    public Element _PreConditions { get; set; }
    /// <summary>
    /// Each step of the process.
    /// </summary>
    public List<ExampleScenarioProcessStep> Step { get; set; }
    /// <summary>
    /// The diagram title of the group of operations.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PreConditions))
      {
        writer.WriteString("preConditions", (string)PreConditions!);
      }

      if (_PreConditions != null)
      {
        writer.WritePropertyName("_preConditions");
        _PreConditions.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PostConditions))
      {
        writer.WriteString("postConditions", (string)PostConditions!);
      }

      if (_PostConditions != null)
      {
        writer.WritePropertyName("_postConditions");
        _PostConditions.SerializeJson(writer, options);
      }

      if ((Step != null) && (Step.Count != 0))
      {
        writer.WritePropertyName("step");
        writer.WriteStartArray();

        foreach (ExampleScenarioProcessStep valStep in Step)
        {
          valStep.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "postConditions":
          PostConditions = reader.GetString();
          break;

        case "_postConditions":
          _PostConditions = new fhirCsR4.Models.Element();
          _PostConditions.DeserializeJson(ref reader, options);
          break;

        case "preConditions":
          PreConditions = reader.GetString();
          break;

        case "_preConditions":
          _PreConditions = new fhirCsR4.Models.Element();
          _PreConditions.DeserializeJson(ref reader, options);
          break;

        case "step":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Step = new List<ExampleScenarioProcessStep>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ExampleScenarioProcessStep objStep = new fhirCsR4.Models.ExampleScenarioProcessStep();
            objStep.DeserializeJson(ref reader, options);
            Step.Add(objStep);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Step.Count == 0)
          {
            Step = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Example of workflow instance.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ExampleScenario>))]
  public class ExampleScenario : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ExampleScenario";
    /// <summary>
    /// Actor participating in the resource.
    /// </summary>
    public List<ExampleScenarioActor> Actor { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// nullFrequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the example scenario. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Allows filtering of example scenarios that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this example scenario outside of FHIR, where it is not possible to use the logical URI.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Each resource and each version that is present in the workflow.
    /// </summary>
    public List<ExampleScenarioInstance> Instance { get; set; }
    /// <summary>
    /// It may be possible for the example scenario to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Each major process - a group of operations.
    /// </summary>
    public List<ExampleScenarioProcess> Process { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the example scenario is the organization or individual primarily responsible for the maintenance and upkeep of the example scenario. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the example scenario. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the example scenario. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this example scenario.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Allows filtering of example scenarios that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different example scenario instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the example scenario with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Another nested workflow.
    /// </summary>
    public List<string> Workflow { get; set; }
    /// <summary>
    /// Extension container element for Workflow
    /// </summary>
    public List<Element> _Workflow { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (ExampleScenarioActor valActor in Actor)
        {
          valActor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Instance != null) && (Instance.Count != 0))
      {
        writer.WritePropertyName("instance");
        writer.WriteStartArray();

        foreach (ExampleScenarioInstance valInstance in Instance)
        {
          valInstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Process != null) && (Process.Count != 0))
      {
        writer.WritePropertyName("process");
        writer.WriteStartArray();

        foreach (ExampleScenarioProcess valProcess in Process)
        {
          valProcess.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Workflow != null) && (Workflow.Count != 0))
      {
        writer.WritePropertyName("workflow");
        writer.WriteStartArray();

        foreach (string valWorkflow in Workflow)
        {
          writer.WriteStringValue(valWorkflow);
        }

        writer.WriteEndArray();
      }

      if ((_Workflow != null) && (_Workflow.Count != 0))
      {
        writer.WritePropertyName("_workflow");
        writer.WriteStartArray();

        foreach (Element val_Workflow in _Workflow)
        {
          val_Workflow.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<ExampleScenarioActor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ExampleScenarioActor objActor = new fhirCsR4.Models.ExampleScenarioActor();
            objActor.DeserializeJson(ref reader, options);
            Actor.Add(objActor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactDetail objContact = new fhirCsR4.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "instance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Instance = new List<ExampleScenarioInstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ExampleScenarioInstance objInstance = new fhirCsR4.Models.ExampleScenarioInstance();
            objInstance.DeserializeJson(ref reader, options);
            Instance.Add(objInstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Instance.Count == 0)
          {
            Instance = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objJurisdiction = new fhirCsR4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "process":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Process = new List<ExampleScenarioProcess>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ExampleScenarioProcess objProcess = new fhirCsR4.Models.ExampleScenarioProcess();
            objProcess.DeserializeJson(ref reader, options);
            Process.Add(objProcess);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Process.Count == 0)
          {
            Process = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR4.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR4.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.UsageContext objUseContext = new fhirCsR4.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        case "workflow":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Workflow = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Workflow.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Workflow.Count == 0)
          {
            Workflow = null;
          }

          break;

        case "_workflow":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Workflow = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Workflow = new fhirCsR4.Models.Element();
            obj_Workflow.DeserializeJson(ref reader, options);
            _Workflow.Add(obj_Workflow);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Workflow.Count == 0)
          {
            _Workflow = null;
          }

          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ExampleScenario.status field
  /// </summary>
  public static class ExampleScenarioStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
