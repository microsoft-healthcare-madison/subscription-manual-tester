// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Media>))]
  public class Media : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Media";
    /// <summary>
    /// A procedure that is fulfilled in whole or in part by the creation of this media.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// Only used if not implicit in code found in Observation.code.  In many systems, this may be represented as a related observation instead of an inline component.   
    /// If the use case requires BodySite to be handled as a separate resource (e.g. to identify and track separately) then use the standard extension[ bodySite](extension-bodysite.html).
    /// </summary>
    public CodeableConcept BodySite { get; set; }
    /// <summary>
    /// Recommended content types: image/jpeg, image/png, image/tiff, video/mpeg, audio/mp4, application/dicom. Application/dicom can contain the transfer syntax as a parameter.  For media that covers a period of time (video/sound), the content.creationTime is the end time. Creation time is used for tracking, organizing versions and searching.
    /// </summary>
    public Attachment Content { get; set; }
    /// <summary>
    /// The date and time(s) at which the media was collected.
    /// </summary>
    public string CreatedDateTime { get; set; }
    /// <summary>
    /// Extension container element for CreatedDateTime
    /// </summary>
    public Element _CreatedDateTime { get; set; }
    /// <summary>
    /// The date and time(s) at which the media was collected.
    /// </summary>
    public Period CreatedPeriod { get; set; }
    /// <summary>
    /// An extension should be used if further typing of the device is needed.  Secondary devices used to support collecting a media can be represented using either extension or through the Observation.related element.
    /// </summary>
    public Reference Device { get; set; }
    /// <summary>
    /// The name of the device / manufacturer of the device  that was used to make the recording.
    /// </summary>
    public string DeviceName { get; set; }
    /// <summary>
    /// Extension container element for DeviceName
    /// </summary>
    public Element _DeviceName { get; set; }
    /// <summary>
    /// The duration might differ from occurrencePeriod if recording was paused.
    /// </summary>
    public decimal? Duration { get; set; }
    /// <summary>
    /// Extension container element for Duration
    /// </summary>
    public Element _Duration { get; set; }
    /// <summary>
    /// This will typically be the encounter the media occurred within.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// if the number of frames is not supplied, the value may be unknown. Applications should not assume that there is only one frame unless it is explicitly stated.
    /// </summary>
    public uint? Frames { get; set; }
    /// <summary>
    /// Height of the image in pixels (photo/video).
    /// </summary>
    public uint? Height { get; set; }
    /// <summary>
    /// The identifier label and use can be used to determine what kind of identifier it is.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// It may be the same as the [`lastUpdated` ](resource-definitions.html#Meta.lastUpdated) time of the resource itself.  For Observations that do require review and verification for certain updates, it might not be the same as the `lastUpdated` time of the resource itself due to a non-clinically significant update that does not require the new version to be reviewed and verified again.
    /// </summary>
    public string Issued { get; set; }
    /// <summary>
    /// Extension container element for Issued
    /// </summary>
    public Element _Issued { get; set; }
    /// <summary>
    /// Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
    /// </summary>
    public CodeableConcept Modality { get; set; }
    /// <summary>
    /// Not to be used for observations, conclusions, etc. Instead use an [Observation](observation.html) based on the Media/ImagingStudy resource.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// The person who administered the collection of the image.
    /// </summary>
    public Reference Operator { get; set; }
    /// <summary>
    /// Not to be used to link an event to an Encounter - use Media.encounter for that.
    /// [The allowed reference resources may be adjusted as appropriate for the event resource].
    /// </summary>
    public List<Reference> PartOf { get; set; }
    /// <summary>
    /// Textual reasons can be captured using reasonCode.text.
    /// </summary>
    public List<CodeableConcept> ReasonCode { get; set; }
    /// <summary>
    /// A nominal state-transition diagram can be found in the [[event.html#statemachine | Event pattern]] documentation
    /// Unknown does not represent "other" - one of the defined statuses must apply.  Unknown is used when the authoring system is not sure what the current status is.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Who/What this Media is a record of.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// A code that classifies whether the media is an image, video or audio recording or some other media category.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The name of the imaging view e.g. Lateral or Antero-posterior (AP).
    /// </summary>
    public CodeableConcept View { get; set; }
    /// <summary>
    /// Width of the image in pixels (photo/video).
    /// </summary>
    public uint? Width { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PartOf != null) && (PartOf.Count != 0))
      {
        writer.WritePropertyName("partOf");
        writer.WriteStartArray();

        foreach (Reference valPartOf in PartOf)
        {
          valPartOf.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Modality != null)
      {
        writer.WritePropertyName("modality");
        Modality.SerializeJson(writer, options);
      }

      if (View != null)
      {
        writer.WritePropertyName("view");
        View.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CreatedDateTime))
      {
        writer.WriteString("createdDateTime", (string)CreatedDateTime!);
      }

      if (_CreatedDateTime != null)
      {
        writer.WritePropertyName("_createdDateTime");
        _CreatedDateTime.SerializeJson(writer, options);
      }

      if (CreatedPeriod != null)
      {
        writer.WritePropertyName("createdPeriod");
        CreatedPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issued))
      {
        writer.WriteString("issued", (string)Issued!);
      }

      if (_Issued != null)
      {
        writer.WritePropertyName("_issued");
        _Issued.SerializeJson(writer, options);
      }

      if (Operator != null)
      {
        writer.WritePropertyName("operator");
        Operator.SerializeJson(writer, options);
      }

      if ((ReasonCode != null) && (ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valReasonCode in ReasonCode)
        {
          valReasonCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        BodySite.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DeviceName))
      {
        writer.WriteString("deviceName", (string)DeviceName!);
      }

      if (_DeviceName != null)
      {
        writer.WritePropertyName("_deviceName");
        _DeviceName.SerializeJson(writer, options);
      }

      if (Device != null)
      {
        writer.WritePropertyName("device");
        Device.SerializeJson(writer, options);
      }

      if (Height != null)
      {
        writer.WriteNumber("height", (uint)Height!);
      }

      if (Width != null)
      {
        writer.WriteNumber("width", (uint)Width!);
      }

      if (Frames != null)
      {
        writer.WriteNumber("frames", (uint)Frames!);
      }

      if (Duration != null)
      {
        writer.WriteNumber("duration", (decimal)Duration!);
      }

      if (_Duration != null)
      {
        writer.WritePropertyName("_duration");
        _Duration.SerializeJson(writer, options);
      }

      if (Content != null)
      {
        writer.WritePropertyName("content");
        Content.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objBasedOn = new fhirCsR4.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "bodySite":
          BodySite = new fhirCsR4.Models.CodeableConcept();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "content":
          Content = new fhirCsR4.Models.Attachment();
          Content.DeserializeJson(ref reader, options);
          break;

        case "createdDateTime":
          CreatedDateTime = reader.GetString();
          break;

        case "_createdDateTime":
          _CreatedDateTime = new fhirCsR4.Models.Element();
          _CreatedDateTime.DeserializeJson(ref reader, options);
          break;

        case "createdPeriod":
          CreatedPeriod = new fhirCsR4.Models.Period();
          CreatedPeriod.DeserializeJson(ref reader, options);
          break;

        case "device":
          Device = new fhirCsR4.Models.Reference();
          Device.DeserializeJson(ref reader, options);
          break;

        case "deviceName":
          DeviceName = reader.GetString();
          break;

        case "_deviceName":
          _DeviceName = new fhirCsR4.Models.Element();
          _DeviceName.DeserializeJson(ref reader, options);
          break;

        case "duration":
          Duration = reader.GetDecimal();
          break;

        case "_duration":
          _Duration = new fhirCsR4.Models.Element();
          _Duration.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR4.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "frames":
          Frames = reader.GetUInt32();
          break;

        case "height":
          Height = reader.GetUInt32();
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "issued":
          Issued = reader.GetString();
          break;

        case "_issued":
          _Issued = new fhirCsR4.Models.Element();
          _Issued.DeserializeJson(ref reader, options);
          break;

        case "modality":
          Modality = new fhirCsR4.Models.CodeableConcept();
          Modality.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "operator":
          Operator = new fhirCsR4.Models.Reference();
          Operator.DeserializeJson(ref reader, options);
          break;

        case "partOf":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PartOf = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objPartOf = new fhirCsR4.Models.Reference();
            objPartOf.DeserializeJson(ref reader, options);
            PartOf.Add(objPartOf);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PartOf.Count == 0)
          {
            PartOf = null;
          }

          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objReasonCode = new fhirCsR4.Models.CodeableConcept();
            objReasonCode.DeserializeJson(ref reader, options);
            ReasonCode.Add(objReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonCode.Count == 0)
          {
            ReasonCode = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR4.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "view":
          View = new fhirCsR4.Models.CodeableConcept();
          View.DeserializeJson(ref reader, options);
          break;

        case "width":
          Width = reader.GetUInt32();
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Media.status field
  /// </summary>
  public static class MediaStatusCodes {
    public const string PREPARATION = "preparation";
    public const string IN_PROGRESS = "in-progress";
    public const string NOT_DONE = "not-done";
    public const string ON_HOLD = "on-hold";
    public const string STOPPED = "stopped";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string UNKNOWN = "unknown";
  }
}
