// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Strength expressed in terms of a reference substance.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<IngredientSubstanceStrengthReferenceStrength>))]
  public class IngredientSubstanceStrengthReferenceStrength : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The country or countries for which the strength range applies.
    /// </summary>
    public List<CodeableConcept> Country { get; set; }
    /// <summary>
    /// For when strength is measured at a particular point or distance.
    /// </summary>
    public string MeasurementPoint { get; set; }
    /// <summary>
    /// Extension container element for MeasurementPoint
    /// </summary>
    public Element _MeasurementPoint { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance. When there is a range of strengths, this represents the lower limit.
    /// </summary>
    public Ratio Strength { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance. When there is a range of strengths, this represents the upper limit.
    /// </summary>
    public Ratio StrengthHighLimit { get; set; }
    /// <summary>
    /// Relevant reference substance.
    /// </summary>
    public CodeableReference Substance { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Substance != null)
      {
        writer.WritePropertyName("substance");
        Substance.SerializeJson(writer, options);
      }

      if (Strength != null)
      {
        writer.WritePropertyName("strength");
        Strength.SerializeJson(writer, options);
      }

      if (StrengthHighLimit != null)
      {
        writer.WritePropertyName("strengthHighLimit");
        StrengthHighLimit.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MeasurementPoint))
      {
        writer.WriteString("measurementPoint", (string)MeasurementPoint!);
      }

      if (_MeasurementPoint != null)
      {
        writer.WritePropertyName("_measurementPoint");
        _MeasurementPoint.SerializeJson(writer, options);
      }

      if ((Country != null) && (Country.Count != 0))
      {
        writer.WritePropertyName("country");
        writer.WriteStartArray();

        foreach (CodeableConcept valCountry in Country)
        {
          valCountry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "country":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Country = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objCountry = new fhirCsR4.Models.CodeableConcept();
            objCountry.DeserializeJson(ref reader, options);
            Country.Add(objCountry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Country.Count == 0)
          {
            Country = null;
          }

          break;

        case "measurementPoint":
          MeasurementPoint = reader.GetString();
          break;

        case "_measurementPoint":
          _MeasurementPoint = new fhirCsR4.Models.Element();
          _MeasurementPoint.DeserializeJson(ref reader, options);
          break;

        case "strength":
          Strength = new fhirCsR4.Models.Ratio();
          Strength.DeserializeJson(ref reader, options);
          break;

        case "strengthHighLimit":
          StrengthHighLimit = new fhirCsR4.Models.Ratio();
          StrengthHighLimit.DeserializeJson(ref reader, options);
          break;

        case "substance":
          Substance = new fhirCsR4.Models.CodeableReference();
          Substance.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. When there is a range of strengths, this represents the lower limit.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<IngredientSubstanceStrength>))]
  public class IngredientSubstanceStrength : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The strength per unitary volume (or mass).
    /// </summary>
    public Ratio Concentration { get; set; }
    /// <summary>
    /// An upper limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the lower limit.
    /// </summary>
    public Ratio ConcentrationHighLimit { get; set; }
    /// <summary>
    /// A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.
    /// </summary>
    public string ConcentrationText { get; set; }
    /// <summary>
    /// Extension container element for ConcentrationText
    /// </summary>
    public Element _ConcentrationText { get; set; }
    /// <summary>
    /// The country or countries for which the strength range applies.
    /// </summary>
    public List<CodeableConcept> Country { get; set; }
    /// <summary>
    /// For when strength is measured at a particular point or distance.
    /// </summary>
    public string MeasurementPoint { get; set; }
    /// <summary>
    /// Extension container element for MeasurementPoint
    /// </summary>
    public Element _MeasurementPoint { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
    /// </summary>
    public Ratio Presentation { get; set; }
    /// <summary>
    /// An upper limit for the quantity of substance in the unit of presentation. When there is a range of strengths, this represents the upper limit.
    /// </summary>
    public Ratio PresentationHighLimit { get; set; }
    /// <summary>
    /// A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.
    /// </summary>
    public string PresentationText { get; set; }
    /// <summary>
    /// Extension container element for PresentationText
    /// </summary>
    public Element _PresentationText { get; set; }
    /// <summary>
    /// Strength expressed in terms of a reference substance.
    /// </summary>
    public List<IngredientSubstanceStrengthReferenceStrength> ReferenceStrength { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Presentation != null)
      {
        writer.WritePropertyName("presentation");
        Presentation.SerializeJson(writer, options);
      }

      if (PresentationHighLimit != null)
      {
        writer.WritePropertyName("presentationHighLimit");
        PresentationHighLimit.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PresentationText))
      {
        writer.WriteString("presentationText", (string)PresentationText!);
      }

      if (_PresentationText != null)
      {
        writer.WritePropertyName("_presentationText");
        _PresentationText.SerializeJson(writer, options);
      }

      if (Concentration != null)
      {
        writer.WritePropertyName("concentration");
        Concentration.SerializeJson(writer, options);
      }

      if (ConcentrationHighLimit != null)
      {
        writer.WritePropertyName("concentrationHighLimit");
        ConcentrationHighLimit.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ConcentrationText))
      {
        writer.WriteString("concentrationText", (string)ConcentrationText!);
      }

      if (_ConcentrationText != null)
      {
        writer.WritePropertyName("_concentrationText");
        _ConcentrationText.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MeasurementPoint))
      {
        writer.WriteString("measurementPoint", (string)MeasurementPoint!);
      }

      if (_MeasurementPoint != null)
      {
        writer.WritePropertyName("_measurementPoint");
        _MeasurementPoint.SerializeJson(writer, options);
      }

      if ((Country != null) && (Country.Count != 0))
      {
        writer.WritePropertyName("country");
        writer.WriteStartArray();

        foreach (CodeableConcept valCountry in Country)
        {
          valCountry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReferenceStrength != null) && (ReferenceStrength.Count != 0))
      {
        writer.WritePropertyName("referenceStrength");
        writer.WriteStartArray();

        foreach (IngredientSubstanceStrengthReferenceStrength valReferenceStrength in ReferenceStrength)
        {
          valReferenceStrength.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "concentration":
          Concentration = new fhirCsR4.Models.Ratio();
          Concentration.DeserializeJson(ref reader, options);
          break;

        case "concentrationHighLimit":
          ConcentrationHighLimit = new fhirCsR4.Models.Ratio();
          ConcentrationHighLimit.DeserializeJson(ref reader, options);
          break;

        case "concentrationText":
          ConcentrationText = reader.GetString();
          break;

        case "_concentrationText":
          _ConcentrationText = new fhirCsR4.Models.Element();
          _ConcentrationText.DeserializeJson(ref reader, options);
          break;

        case "country":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Country = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objCountry = new fhirCsR4.Models.CodeableConcept();
            objCountry.DeserializeJson(ref reader, options);
            Country.Add(objCountry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Country.Count == 0)
          {
            Country = null;
          }

          break;

        case "measurementPoint":
          MeasurementPoint = reader.GetString();
          break;

        case "_measurementPoint":
          _MeasurementPoint = new fhirCsR4.Models.Element();
          _MeasurementPoint.DeserializeJson(ref reader, options);
          break;

        case "presentation":
          Presentation = new fhirCsR4.Models.Ratio();
          Presentation.DeserializeJson(ref reader, options);
          break;

        case "presentationHighLimit":
          PresentationHighLimit = new fhirCsR4.Models.Ratio();
          PresentationHighLimit.DeserializeJson(ref reader, options);
          break;

        case "presentationText":
          PresentationText = reader.GetString();
          break;

        case "_presentationText":
          _PresentationText = new fhirCsR4.Models.Element();
          _PresentationText.DeserializeJson(ref reader, options);
          break;

        case "referenceStrength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReferenceStrength = new List<IngredientSubstanceStrengthReferenceStrength>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.IngredientSubstanceStrengthReferenceStrength objReferenceStrength = new fhirCsR4.Models.IngredientSubstanceStrengthReferenceStrength();
            objReferenceStrength.DeserializeJson(ref reader, options);
            ReferenceStrength.Add(objReferenceStrength);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReferenceStrength.Count == 0)
          {
            ReferenceStrength = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The substance that comprises this ingredient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<IngredientSubstance>))]
  public class IngredientSubstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code or full resource that represents the ingredient substance.
    /// </summary>
    public CodeableReference Code { get; set; }
    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. When there is a range of strengths, this represents the lower limit.
    /// </summary>
    public List<IngredientSubstanceStrength> Strength { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if ((Strength != null) && (Strength.Count != 0))
      {
        writer.WritePropertyName("strength");
        writer.WriteStartArray();

        foreach (IngredientSubstanceStrength valStrength in Strength)
        {
          valStrength.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR4.Models.CodeableReference();
          Code.DeserializeJson(ref reader, options);
          break;

        case "strength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Strength = new List<IngredientSubstanceStrength>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.IngredientSubstanceStrength objStrength = new fhirCsR4.Models.IngredientSubstanceStrength();
            objStrength.DeserializeJson(ref reader, options);
            Strength.Add(objStrength);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Strength.Count == 0)
          {
            Strength = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A specified substance that comprises this ingredient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<IngredientSpecifiedSubstance>))]
  public class IngredientSpecifiedSubstance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Substance as a 'specified substance', implying extra substance related characteristics.
    /// </summary>
    public CodeableReference Code { get; set; }
    /// <summary>
    /// Confidentiality level of the specified substance as the ingredient.
    /// </summary>
    public CodeableConcept Confidentiality { get; set; }
    /// <summary>
    /// The group of specified substance, e.g. group 1 to 4, where the group categorises the level of 
    /// description of the substance according to standardised sets of properties.
    /// </summary>
    public CodeableConcept Group { get; set; }
    /// <summary>
    /// Quantity of the substance or specified substance present in the manufactured item or pharmaceutical product.
    /// </summary>
    public List<IngredientSubstanceStrength> Strength { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Group != null)
      {
        writer.WritePropertyName("group");
        Group.SerializeJson(writer, options);
      }

      if (Confidentiality != null)
      {
        writer.WritePropertyName("confidentiality");
        Confidentiality.SerializeJson(writer, options);
      }

      if ((Strength != null) && (Strength.Count != 0))
      {
        writer.WritePropertyName("strength");
        writer.WriteStartArray();

        foreach (IngredientSubstanceStrength valStrength in Strength)
        {
          valStrength.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR4.Models.CodeableReference();
          Code.DeserializeJson(ref reader, options);
          break;

        case "confidentiality":
          Confidentiality = new fhirCsR4.Models.CodeableConcept();
          Confidentiality.DeserializeJson(ref reader, options);
          break;

        case "group":
          Group = new fhirCsR4.Models.CodeableConcept();
          Group.DeserializeJson(ref reader, options);
          break;

        case "strength":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Strength = new List<IngredientSubstanceStrength>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.IngredientSubstanceStrength objStrength = new fhirCsR4.Models.IngredientSubstanceStrength();
            objStrength.DeserializeJson(ref reader, options);
            Strength.Add(objStrength);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Strength.Count == 0)
          {
            Strength = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An ingredient of a manufactured item or pharmaceutical product.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Ingredient>))]
  public class Ingredient : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Ingredient";
    /// <summary>
    /// If the ingredient is a known or suspected allergen.
    /// </summary>
    public bool? AllergenicIndicator { get; set; }
    /// <summary>
    /// A general description of the ingredient, or any supporting text. May be used for an unstructured list of excipients.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: Antioxidant, Alkalizing Agent.
    /// </summary>
    public List<CodeableConcept> Function { get; set; }
    /// <summary>
    /// The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The organization that manufactures this ingredient.
    /// </summary>
    public List<Reference> Manufacturer { get; set; }
    /// <summary>
    /// A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// A specified substance that comprises this ingredient.
    /// </summary>
    public List<IngredientSpecifiedSubstance> SpecifiedSubstance { get; set; }
    /// <summary>
    /// The substance that comprises this ingredient.
    /// </summary>
    public IngredientSubstance Substance { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if ((Function != null) && (Function.Count != 0))
      {
        writer.WritePropertyName("function");
        writer.WriteStartArray();

        foreach (CodeableConcept valFunction in Function)
        {
          valFunction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (AllergenicIndicator != null)
      {
        writer.WriteBoolean("allergenicIndicator", (bool)AllergenicIndicator!);
      }

      if ((Manufacturer != null) && (Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();

        foreach (Reference valManufacturer in Manufacturer)
        {
          valManufacturer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Substance != null)
      {
        writer.WritePropertyName("substance");
        Substance.SerializeJson(writer, options);
      }

      if ((SpecifiedSubstance != null) && (SpecifiedSubstance.Count != 0))
      {
        writer.WritePropertyName("specifiedSubstance");
        writer.WriteStartArray();

        foreach (IngredientSpecifiedSubstance valSpecifiedSubstance in SpecifiedSubstance)
        {
          valSpecifiedSubstance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allergenicIndicator":
          AllergenicIndicator = reader.GetBoolean();
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "function":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Function = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objFunction = new fhirCsR4.Models.CodeableConcept();
            objFunction.DeserializeJson(ref reader, options);
            Function.Add(objFunction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Function.Count == 0)
          {
            Function = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Manufacturer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objManufacturer = new fhirCsR4.Models.Reference();
            objManufacturer.DeserializeJson(ref reader, options);
            Manufacturer.Add(objManufacturer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Manufacturer.Count == 0)
          {
            Manufacturer = null;
          }

          break;

        case "role":
          Role = new fhirCsR4.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "specifiedSubstance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SpecifiedSubstance = new List<IngredientSpecifiedSubstance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.IngredientSpecifiedSubstance objSpecifiedSubstance = new fhirCsR4.Models.IngredientSpecifiedSubstance();
            objSpecifiedSubstance.DeserializeJson(ref reader, options);
            SpecifiedSubstance.Add(objSpecifiedSubstance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SpecifiedSubstance.Count == 0)
          {
            SpecifiedSubstance = null;
          }

          break;

        case "substance":
          Substance = new fhirCsR4.Models.IngredientSubstance();
          Substance.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
