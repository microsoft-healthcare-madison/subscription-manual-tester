// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceDefinitionUdiDeviceIdentifier>))]
  public class DeviceDefinitionUdiDeviceIdentifier : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
    /// </summary>
    public string DeviceIdentifier { get; set; }
    /// <summary>
    /// Extension container element for DeviceIdentifier
    /// </summary>
    public Element _DeviceIdentifier { get; set; }
    /// <summary>
    /// The organization that assigns the identifier algorithm.
    /// </summary>
    public string Issuer { get; set; }
    /// <summary>
    /// Extension container element for Issuer
    /// </summary>
    public Element _Issuer { get; set; }
    /// <summary>
    /// The jurisdiction to which the deviceIdentifier applies.
    /// </summary>
    public string Jurisdiction { get; set; }
    /// <summary>
    /// Extension container element for Jurisdiction
    /// </summary>
    public Element _Jurisdiction { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(DeviceIdentifier))
      {
        writer.WriteString("deviceIdentifier", (string)DeviceIdentifier!);
      }

      if (_DeviceIdentifier != null)
      {
        writer.WritePropertyName("_deviceIdentifier");
        _DeviceIdentifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issuer))
      {
        writer.WriteString("issuer", (string)Issuer!);
      }

      if (_Issuer != null)
      {
        writer.WritePropertyName("_issuer");
        _Issuer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Jurisdiction))
      {
        writer.WriteString("jurisdiction", (string)Jurisdiction!);
      }

      if (_Jurisdiction != null)
      {
        writer.WritePropertyName("_jurisdiction");
        _Jurisdiction.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "deviceIdentifier":
          DeviceIdentifier = reader.GetString();
          break;

        case "_deviceIdentifier":
          _DeviceIdentifier = new fhirCsR4.Models.Element();
          _DeviceIdentifier.DeserializeJson(ref reader, options);
          break;

        case "issuer":
          Issuer = reader.GetString();
          break;

        case "_issuer":
          _Issuer = new fhirCsR4.Models.Element();
          _Issuer.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          Jurisdiction = reader.GetString();
          break;

        case "_jurisdiction":
          _Jurisdiction = new fhirCsR4.Models.Element();
          _Jurisdiction.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A name given to the device to identify it.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceDefinitionDeviceName>))]
  public class DeviceDefinitionDeviceName : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name of the device.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The type of deviceName.
    /// UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the DeviceDefinition.deviceName.type field
  /// </summary>
  public static class DeviceDefinitionDeviceNameTypeCodes {
    public const string UDI_LABEL_NAME = "udi-label-name";
    public const string USER_FRIENDLY_NAME = "user-friendly-name";
    public const string PATIENT_REPORTED_NAME = "patient-reported-name";
    public const string MANUFACTURER_NAME = "manufacturer-name";
    public const string MODEL_NAME = "model-name";
    public const string OTHER = "other";
  }
  /// <summary>
  /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceDefinitionSpecialization>))]
  public class DeviceDefinitionSpecialization : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The standard that is used to operate and communicate.
    /// </summary>
    public string SystemType { get; set; }
    /// <summary>
    /// Extension container element for SystemType
    /// </summary>
    public Element _SystemType { get; set; }
    /// <summary>
    /// The version of the standard that is used to operate and communicate.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(SystemType))
      {
        writer.WriteString("systemType", (string)SystemType!);
      }

      if (_SystemType != null)
      {
        writer.WritePropertyName("_systemType");
        _SystemType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "systemType":
          SystemType = reader.GetString();
          break;

        case "_systemType":
          _SystemType = new fhirCsR4.Models.Element();
          _SystemType.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Device capabilities.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceDefinitionCapability>))]
  public class DeviceDefinitionCapability : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Description of capability.
    /// </summary>
    public List<CodeableConcept> Description { get; set; }
    /// <summary>
    /// Type of capability.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Description != null) && (Description.Count != 0))
      {
        writer.WritePropertyName("description");
        writer.WriteStartArray();

        foreach (CodeableConcept valDescription in Description)
        {
          valDescription.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Description = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objDescription = new fhirCsR4.Models.CodeableConcept();
            objDescription.DeserializeJson(ref reader, options);
            Description.Add(objDescription);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Description.Count == 0)
          {
            Description = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceDefinitionProperty>))]
  public class DeviceDefinitionProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Property value as a code, e.g., NTP4 (synced to NTP).
    /// </summary>
    public List<CodeableConcept> ValueCode { get; set; }
    /// <summary>
    /// Property value as a quantity.
    /// </summary>
    public List<Quantity> ValueQuantity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((ValueQuantity != null) && (ValueQuantity.Count != 0))
      {
        writer.WritePropertyName("valueQuantity");
        writer.WriteStartArray();

        foreach (Quantity valValueQuantity in ValueQuantity)
        {
          valValueQuantity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ValueCode != null) && (ValueCode.Count != 0))
      {
        writer.WritePropertyName("valueCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valValueCode in ValueCode)
        {
          valValueCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objValueCode = new fhirCsR4.Models.CodeableConcept();
            objValueCode.DeserializeJson(ref reader, options);
            ValueCode.Add(objValueCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueCode.Count == 0)
          {
            ValueCode = null;
          }

          break;

        case "valueQuantity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValueQuantity = new List<Quantity>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Quantity objValueQuantity = new fhirCsR4.Models.Quantity();
            objValueQuantity.DeserializeJson(ref reader, options);
            ValueQuantity.Add(objValueQuantity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValueQuantity.Count == 0)
          {
            ValueQuantity = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A substance used to create the material(s) of which the device is made.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceDefinitionMaterial>))]
  public class DeviceDefinitionMaterial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Whether the substance is a known or suspected allergen.
    /// </summary>
    public bool? AllergenicIndicator { get; set; }
    /// <summary>
    /// Indicates an alternative material of the device.
    /// </summary>
    public bool? Alternate { get; set; }
    /// <summary>
    /// The substance.
    /// </summary>
    public CodeableConcept Substance { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Substance != null)
      {
        writer.WritePropertyName("substance");
        Substance.SerializeJson(writer, options);
      }

      if (Alternate != null)
      {
        writer.WriteBoolean("alternate", (bool)Alternate!);
      }

      if (AllergenicIndicator != null)
      {
        writer.WriteBoolean("allergenicIndicator", (bool)AllergenicIndicator!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allergenicIndicator":
          AllergenicIndicator = reader.GetBoolean();
          break;

        case "alternate":
          Alternate = reader.GetBoolean();
          break;

        case "substance":
          Substance = new fhirCsR4.Models.CodeableConcept();
          Substance.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The characteristics, operational status and capabilities of a medical-related component of a medical device.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<DeviceDefinition>))]
  public class DeviceDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "DeviceDefinition";
    /// <summary>
    /// Device capabilities.
    /// </summary>
    public List<DeviceDefinitionCapability> Capability { get; set; }
    /// <summary>
    /// used for troubleshooting etc.
    /// </summary>
    public List<ContactPoint> Contact { get; set; }
    /// <summary>
    /// A name given to the device to identify it.
    /// </summary>
    public List<DeviceDefinitionDeviceName> DeviceName { get; set; }
    /// <summary>
    /// Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Language code for the human-readable text strings produced by the device (all supported).
    /// </summary>
    public List<CodeableConcept> LanguageCode { get; set; }
    /// <summary>
    /// A name of the manufacturer.
    /// </summary>
    public string ManufacturerString { get; set; }
    /// <summary>
    /// Extension container element for ManufacturerString
    /// </summary>
    public Element _ManufacturerString { get; set; }
    /// <summary>
    /// A name of the manufacturer.
    /// </summary>
    public Reference ManufacturerReference { get; set; }
    /// <summary>
    /// A substance used to create the material(s) of which the device is made.
    /// </summary>
    public List<DeviceDefinitionMaterial> Material { get; set; }
    /// <summary>
    /// The model number for the device.
    /// </summary>
    public string ModelNumber { get; set; }
    /// <summary>
    /// Extension container element for ModelNumber
    /// </summary>
    public Element _ModelNumber { get; set; }
    /// <summary>
    /// Descriptive information, usage information or implantation information that is not captured in an existing element.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Access to on-line information about the device.
    /// </summary>
    public string OnlineInformation { get; set; }
    /// <summary>
    /// Extension container element for OnlineInformation
    /// </summary>
    public Element _OnlineInformation { get; set; }
    /// <summary>
    /// An organization that is responsible for the provision and ongoing maintenance of the device.
    /// </summary>
    public Reference Owner { get; set; }
    /// <summary>
    /// The parent device it can be part of.
    /// </summary>
    public Reference ParentDevice { get; set; }
    /// <summary>
    /// Dimensions, color etc.
    /// </summary>
    public ProdCharacteristic PhysicalCharacteristics { get; set; }
    /// <summary>
    /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
    /// </summary>
    public List<DeviceDefinitionProperty> Property { get; set; }
    /// <summary>
    /// The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Safety characteristics of the device.
    /// </summary>
    public List<CodeableConcept> Safety { get; set; }
    /// <summary>
    /// Shelf Life and storage information.
    /// </summary>
    public List<ProductShelfLife> ShelfLifeStorage { get; set; }
    /// <summary>
    /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
    /// </summary>
    public List<DeviceDefinitionSpecialization> Specialization { get; set; }
    /// <summary>
    /// What kind of device or device system this is.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
    /// </summary>
    public List<DeviceDefinitionUdiDeviceIdentifier> UdiDeviceIdentifier { get; set; }
    /// <summary>
    /// If the device is running a FHIR server, the network address should  be the Base URL from which a conformance statement may be retrieved.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// The available versions of the device, e.g., software versions.
    /// </summary>
    public List<string> Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public List<Element> _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((UdiDeviceIdentifier != null) && (UdiDeviceIdentifier.Count != 0))
      {
        writer.WritePropertyName("udiDeviceIdentifier");
        writer.WriteStartArray();

        foreach (DeviceDefinitionUdiDeviceIdentifier valUdiDeviceIdentifier in UdiDeviceIdentifier)
        {
          valUdiDeviceIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ManufacturerString))
      {
        writer.WriteString("manufacturerString", (string)ManufacturerString!);
      }

      if (_ManufacturerString != null)
      {
        writer.WritePropertyName("_manufacturerString");
        _ManufacturerString.SerializeJson(writer, options);
      }

      if (ManufacturerReference != null)
      {
        writer.WritePropertyName("manufacturerReference");
        ManufacturerReference.SerializeJson(writer, options);
      }

      if ((DeviceName != null) && (DeviceName.Count != 0))
      {
        writer.WritePropertyName("deviceName");
        writer.WriteStartArray();

        foreach (DeviceDefinitionDeviceName valDeviceName in DeviceName)
        {
          valDeviceName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ModelNumber))
      {
        writer.WriteString("modelNumber", (string)ModelNumber!);
      }

      if (_ModelNumber != null)
      {
        writer.WritePropertyName("_modelNumber");
        _ModelNumber.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Specialization != null) && (Specialization.Count != 0))
      {
        writer.WritePropertyName("specialization");
        writer.WriteStartArray();

        foreach (DeviceDefinitionSpecialization valSpecialization in Specialization)
        {
          valSpecialization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Version != null) && (Version.Count != 0))
      {
        writer.WritePropertyName("version");
        writer.WriteStartArray();

        foreach (string valVersion in Version)
        {
          writer.WriteStringValue(valVersion);
        }

        writer.WriteEndArray();
      }

      if ((_Version != null) && (_Version.Count != 0))
      {
        writer.WritePropertyName("_version");
        writer.WriteStartArray();

        foreach (Element val_Version in _Version)
        {
          val_Version.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Safety != null) && (Safety.Count != 0))
      {
        writer.WritePropertyName("safety");
        writer.WriteStartArray();

        foreach (CodeableConcept valSafety in Safety)
        {
          valSafety.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ShelfLifeStorage != null) && (ShelfLifeStorage.Count != 0))
      {
        writer.WritePropertyName("shelfLifeStorage");
        writer.WriteStartArray();

        foreach (ProductShelfLife valShelfLifeStorage in ShelfLifeStorage)
        {
          valShelfLifeStorage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PhysicalCharacteristics != null)
      {
        writer.WritePropertyName("physicalCharacteristics");
        PhysicalCharacteristics.SerializeJson(writer, options);
      }

      if ((LanguageCode != null) && (LanguageCode.Count != 0))
      {
        writer.WritePropertyName("languageCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valLanguageCode in LanguageCode)
        {
          valLanguageCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Capability != null) && (Capability.Count != 0))
      {
        writer.WritePropertyName("capability");
        writer.WriteStartArray();

        foreach (DeviceDefinitionCapability valCapability in Capability)
        {
          valCapability.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (DeviceDefinitionProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Owner != null)
      {
        writer.WritePropertyName("owner");
        Owner.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactPoint valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OnlineInformation))
      {
        writer.WriteString("onlineInformation", (string)OnlineInformation!);
      }

      if (_OnlineInformation != null)
      {
        writer.WritePropertyName("_onlineInformation");
        _OnlineInformation.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (ParentDevice != null)
      {
        writer.WritePropertyName("parentDevice");
        ParentDevice.SerializeJson(writer, options);
      }

      if ((Material != null) && (Material.Count != 0))
      {
        writer.WritePropertyName("material");
        writer.WriteStartArray();

        foreach (DeviceDefinitionMaterial valMaterial in Material)
        {
          valMaterial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "capability":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Capability = new List<DeviceDefinitionCapability>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceDefinitionCapability objCapability = new fhirCsR4.Models.DeviceDefinitionCapability();
            objCapability.DeserializeJson(ref reader, options);
            Capability.Add(objCapability);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Capability.Count == 0)
          {
            Capability = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactPoint objContact = new fhirCsR4.Models.ContactPoint();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "deviceName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DeviceName = new List<DeviceDefinitionDeviceName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceDefinitionDeviceName objDeviceName = new fhirCsR4.Models.DeviceDefinitionDeviceName();
            objDeviceName.DeserializeJson(ref reader, options);
            DeviceName.Add(objDeviceName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DeviceName.Count == 0)
          {
            DeviceName = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "languageCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LanguageCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objLanguageCode = new fhirCsR4.Models.CodeableConcept();
            objLanguageCode.DeserializeJson(ref reader, options);
            LanguageCode.Add(objLanguageCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LanguageCode.Count == 0)
          {
            LanguageCode = null;
          }

          break;

        case "manufacturerString":
          ManufacturerString = reader.GetString();
          break;

        case "_manufacturerString":
          _ManufacturerString = new fhirCsR4.Models.Element();
          _ManufacturerString.DeserializeJson(ref reader, options);
          break;

        case "manufacturerReference":
          ManufacturerReference = new fhirCsR4.Models.Reference();
          ManufacturerReference.DeserializeJson(ref reader, options);
          break;

        case "material":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Material = new List<DeviceDefinitionMaterial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceDefinitionMaterial objMaterial = new fhirCsR4.Models.DeviceDefinitionMaterial();
            objMaterial.DeserializeJson(ref reader, options);
            Material.Add(objMaterial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Material.Count == 0)
          {
            Material = null;
          }

          break;

        case "modelNumber":
          ModelNumber = reader.GetString();
          break;

        case "_modelNumber":
          _ModelNumber = new fhirCsR4.Models.Element();
          _ModelNumber.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "onlineInformation":
          OnlineInformation = reader.GetString();
          break;

        case "_onlineInformation":
          _OnlineInformation = new fhirCsR4.Models.Element();
          _OnlineInformation.DeserializeJson(ref reader, options);
          break;

        case "owner":
          Owner = new fhirCsR4.Models.Reference();
          Owner.DeserializeJson(ref reader, options);
          break;

        case "parentDevice":
          ParentDevice = new fhirCsR4.Models.Reference();
          ParentDevice.DeserializeJson(ref reader, options);
          break;

        case "physicalCharacteristics":
          PhysicalCharacteristics = new fhirCsR4.Models.ProdCharacteristic();
          PhysicalCharacteristics.DeserializeJson(ref reader, options);
          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<DeviceDefinitionProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceDefinitionProperty objProperty = new fhirCsR4.Models.DeviceDefinitionProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "safety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Safety = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objSafety = new fhirCsR4.Models.CodeableConcept();
            objSafety.DeserializeJson(ref reader, options);
            Safety.Add(objSafety);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Safety.Count == 0)
          {
            Safety = null;
          }

          break;

        case "shelfLifeStorage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ShelfLifeStorage = new List<ProductShelfLife>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ProductShelfLife objShelfLifeStorage = new fhirCsR4.Models.ProductShelfLife();
            objShelfLifeStorage.DeserializeJson(ref reader, options);
            ShelfLifeStorage.Add(objShelfLifeStorage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ShelfLifeStorage.Count == 0)
          {
            ShelfLifeStorage = null;
          }

          break;

        case "specialization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Specialization = new List<DeviceDefinitionSpecialization>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceDefinitionSpecialization objSpecialization = new fhirCsR4.Models.DeviceDefinitionSpecialization();
            objSpecialization.DeserializeJson(ref reader, options);
            Specialization.Add(objSpecialization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Specialization.Count == 0)
          {
            Specialization = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "udiDeviceIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UdiDeviceIdentifier = new List<DeviceDefinitionUdiDeviceIdentifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.DeviceDefinitionUdiDeviceIdentifier objUdiDeviceIdentifier = new fhirCsR4.Models.DeviceDefinitionUdiDeviceIdentifier();
            objUdiDeviceIdentifier.DeserializeJson(ref reader, options);
            UdiDeviceIdentifier.Add(objUdiDeviceIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UdiDeviceIdentifier.Count == 0)
          {
            UdiDeviceIdentifier = null;
          }

          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Version = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Version.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Version.Count == 0)
          {
            Version = null;
          }

          break;

        case "_version":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Version = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Version = new fhirCsR4.Models.Element();
            obj_Version.DeserializeJson(ref reader, options);
            _Version.Add(obj_Version);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Version.Count == 0)
          {
            _Version = null;
          }

          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
