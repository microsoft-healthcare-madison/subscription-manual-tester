// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptOrigin>))]
  public class TestScriptOrigin : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A given origin index (e.g. 1) can appear only once in the list (e.g. Origin 1 cannot be specified twice ... once as FormFiller and again as FormProcessor within the same script as that could get confusing during test configuration). 
    /// Different origin indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Filler).
    /// The origin indices provided elsewhere in the test script must be one of these origin indices.
    /// </summary>
    public int Index { get; set; }
    /// <summary>
    /// Must be a "sender"/"client" profile.
    /// </summary>
    public Coding Profile { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("index", Index);

      if (Profile != null)
      {
        writer.WritePropertyName("profile");
        Profile.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "index":
          Index = reader.GetInt32();
          break;

        case "profile":
          Profile = new fhirCsR4.Models.Coding();
          Profile.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptDestination>))]
  public class TestScriptDestination : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A given destination index (e.g. 1) can appear only once in the list (e.g. Destination 1 cannot be specified twice ... once as Form-Manager and again as Form-Processor within the same script as that could get confusing during test configuration). 
    /// Different destination indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Manager).
    /// The destination indices provided elsewhere in the test script must be one of these destination indices.
    /// </summary>
    public int Index { get; set; }
    /// <summary>
    /// Must be a "receiver"/"server" profile.
    /// </summary>
    public Coding Profile { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("index", Index);

      if (Profile != null)
      {
        writer.WritePropertyName("profile");
        Profile.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "index":
          Index = reader.GetInt32();
          break;

        case "profile":
          Profile = new fhirCsR4.Models.Coding();
          Profile.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A link to the FHIR specification that this test is covering.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptMetadataLink>))]
  public class TestScriptMetadataLink : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Short description of the link.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// URL to a particular requirement or feature within the FHIR specification.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptMetadataCapability>))]
  public class TestScriptMetadataCapability : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.
    /// </summary>
    public string Capabilities { get; set; }
    /// <summary>
    /// Extension container element for Capabilities
    /// </summary>
    public Element _Capabilities { get; set; }
    /// <summary>
    /// Description of the capabilities that this test script is requiring the server to support.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Which server these requirements apply to.
    /// </summary>
    public int? Destination { get; set; }
    /// <summary>
    /// Links to the FHIR specification that describes this interaction and the resources involved in more detail.
    /// </summary>
    public List<string> Link { get; set; }
    /// <summary>
    /// Extension container element for Link
    /// </summary>
    public List<Element> _Link { get; set; }
    /// <summary>
    /// Which origin server these requirements apply to.
    /// </summary>
    public List<int> Origin { get; set; }
    /// <summary>
    /// Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
    /// </summary>
    public bool Required { get; set; }
    /// <summary>
    /// Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
    /// </summary>
    public bool Validated { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteBoolean("required", Required);

      writer.WriteBoolean("validated", Validated);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Origin != null) && (Origin.Count != 0))
      {
        writer.WritePropertyName("origin");
        writer.WriteStartArray();

        foreach (int valOrigin in Origin)
        {
          writer.WriteNumberValue(valOrigin);
        }

        writer.WriteEndArray();
      }

      if (Destination != null)
      {
        writer.WriteNumber("destination", (int)Destination!);
      }

      if ((Link != null) && (Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();

        foreach (string valLink in Link)
        {
          writer.WriteStringValue(valLink);
        }

        writer.WriteEndArray();
      }

      if ((_Link != null) && (_Link.Count != 0))
      {
        writer.WritePropertyName("_link");
        writer.WriteStartArray();

        foreach (Element val_Link in _Link)
        {
          val_Link.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Capabilities))
      {
        writer.WriteString("capabilities", (string)Capabilities!);
      }

      if (_Capabilities != null)
      {
        writer.WritePropertyName("_capabilities");
        _Capabilities.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "capabilities":
          Capabilities = reader.GetString();
          break;

        case "_capabilities":
          _Capabilities = new fhirCsR4.Models.Element();
          _Capabilities.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "destination":
          Destination = reader.GetInt32();
          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Link = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Link.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Link.Count == 0)
          {
            Link = null;
          }

          break;

        case "_link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Link = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Link = new fhirCsR4.Models.Element();
            obj_Link.DeserializeJson(ref reader, options);
            _Link.Add(obj_Link);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Link.Count == 0)
          {
            _Link = null;
          }

          break;

        case "origin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Origin = new List<int>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Origin.Add(reader.GetInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Origin.Count == 0)
          {
            Origin = null;
          }

          break;

        case "required":
          Required = reader.GetBoolean();
          break;

        case "validated":
          Validated = reader.GetBoolean();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The required capability must exist and are assumed to function correctly on the FHIR server being tested.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptMetadata>))]
  public class TestScriptMetadata : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server's conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The "metadata.capabilities.required" and "metadata.capabilities.validated" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose "metadata.capabilities.validated" flag is true are the primary focus of the test script.
    /// </summary>
    public List<TestScriptMetadataCapability> Capability { get; set; }
    /// <summary>
    /// A link to the FHIR specification that this test is covering.
    /// </summary>
    public List<TestScriptMetadataLink> Link { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Link != null) && (Link.Count != 0))
      {
        writer.WritePropertyName("link");
        writer.WriteStartArray();

        foreach (TestScriptMetadataLink valLink in Link)
        {
          valLink.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Capability != null) && (Capability.Count != 0))
      {
        writer.WritePropertyName("capability");
        writer.WriteStartArray();

        foreach (TestScriptMetadataCapability valCapability in Capability)
        {
          valCapability.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "capability":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Capability = new List<TestScriptMetadataCapability>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptMetadataCapability objCapability = new fhirCsR4.Models.TestScriptMetadataCapability();
            objCapability.DeserializeJson(ref reader, options);
            Capability.Add(objCapability);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Capability.Count == 0)
          {
            Capability = null;
          }

          break;

        case "link":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Link = new List<TestScriptMetadataLink>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptMetadataLink objLink = new fhirCsR4.Models.TestScriptMetadataLink();
            objLink.DeserializeJson(ref reader, options);
            Link.Add(objLink);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Link.Count == 0)
          {
            Link = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptFixture>))]
  public class TestScriptFixture : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
    /// </summary>
    public bool Autocreate { get; set; }
    /// <summary>
    /// Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
    /// </summary>
    public bool Autodelete { get; set; }
    /// <summary>
    /// See http://build.fhir.org/resourcelist.html for complete list of resource types.
    /// </summary>
    public Reference Resource { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteBoolean("autocreate", Autocreate);

      writer.WriteBoolean("autodelete", Autodelete);

      if (Resource != null)
      {
        writer.WritePropertyName("resource");
        Resource.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "autocreate":
          Autocreate = reader.GetBoolean();
          break;

        case "autodelete":
          Autodelete = reader.GetBoolean();
          break;

        case "resource":
          Resource = new fhirCsR4.Models.Reference();
          Resource.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptVariable>))]
  public class TestScriptVariable : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.
    /// </summary>
    public string DefaultValue { get; set; }
    /// <summary>
    /// Extension container element for DefaultValue
    /// </summary>
    public Element _DefaultValue { get; set; }
    /// <summary>
    /// A free text natural language description of the variable and its purpose.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
    /// </summary>
    public string Expression { get; set; }
    /// <summary>
    /// Extension container element for Expression
    /// </summary>
    public Element _Expression { get; set; }
    /// <summary>
    /// If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.
    /// </summary>
    public string HeaderField { get; set; }
    /// <summary>
    /// Extension container element for HeaderField
    /// </summary>
    public Element _HeaderField { get; set; }
    /// <summary>
    /// Displayable text string with hint help information to the user when entering a default value.
    /// </summary>
    public string Hint { get; set; }
    /// <summary>
    /// Extension container element for Hint
    /// </summary>
    public Element _Hint { get; set; }
    /// <summary>
    /// Placeholders would contain the variable name wrapped in ${} in "operation.params", "operation.requestHeader.value", and "operation.url" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.
    /// </summary>
    public string Path { get; set; }
    /// <summary>
    /// Extension container element for Path
    /// </summary>
    public Element _Path { get; set; }
    /// <summary>
    /// This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.
    /// </summary>
    public string SourceId { get; set; }
    /// <summary>
    /// Extension container element for SourceId
    /// </summary>
    public Element _SourceId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DefaultValue))
      {
        writer.WriteString("defaultValue", (string)DefaultValue!);
      }

      if (_DefaultValue != null)
      {
        writer.WritePropertyName("_defaultValue");
        _DefaultValue.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Expression))
      {
        writer.WriteString("expression", (string)Expression!);
      }

      if (_Expression != null)
      {
        writer.WritePropertyName("_expression");
        _Expression.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(HeaderField))
      {
        writer.WriteString("headerField", (string)HeaderField!);
      }

      if (_HeaderField != null)
      {
        writer.WritePropertyName("_headerField");
        _HeaderField.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Hint))
      {
        writer.WriteString("hint", (string)Hint!);
      }

      if (_Hint != null)
      {
        writer.WritePropertyName("_hint");
        _Hint.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Path))
      {
        writer.WriteString("path", (string)Path!);
      }

      if (_Path != null)
      {
        writer.WritePropertyName("_path");
        _Path.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceId))
      {
        writer.WriteString("sourceId", (string)SourceId!);
      }

      if (_SourceId != null)
      {
        writer.WritePropertyName("_sourceId");
        _SourceId.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "defaultValue":
          DefaultValue = reader.GetString();
          break;

        case "_defaultValue":
          _DefaultValue = new fhirCsR4.Models.Element();
          _DefaultValue.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "expression":
          Expression = reader.GetString();
          break;

        case "_expression":
          _Expression = new fhirCsR4.Models.Element();
          _Expression.DeserializeJson(ref reader, options);
          break;

        case "headerField":
          HeaderField = reader.GetString();
          break;

        case "_headerField":
          _HeaderField = new fhirCsR4.Models.Element();
          _HeaderField.DeserializeJson(ref reader, options);
          break;

        case "hint":
          Hint = reader.GetString();
          break;

        case "_hint":
          _Hint = new fhirCsR4.Models.Element();
          _Hint.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "path":
          Path = reader.GetString();
          break;

        case "_path":
          _Path = new fhirCsR4.Models.Element();
          _Path.DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          SourceId = reader.GetString();
          break;

        case "_sourceId":
          _SourceId = new fhirCsR4.Models.Element();
          _SourceId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptSetupActionOperationRequestHeader>))]
  public class TestScriptSetupActionOperationRequestHeader : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If header element is specified, then field is required.
    /// </summary>
    public string Field { get; set; }
    /// <summary>
    /// Extension container element for Field
    /// </summary>
    public Element _Field { get; set; }
    /// <summary>
    /// If header element is specified, then value is required.  No conversions will be done by the test engine e.g. "xml" to "application/fhir+xml".  The values will be set in HTTP headers "as-is".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Field))
      {
        writer.WriteString("field", (string)Field!);
      }

      if (_Field != null)
      {
        writer.WritePropertyName("_field");
        _Field.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "field":
          Field = reader.GetString();
          break;

        case "_field":
          _Field = new fhirCsR4.Models.Element();
          _Field.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The operation to perform.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptSetupActionOperation>))]
  public class TestScriptSetupActionOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If this is specified, then test engine shall set the 'Accept' header to the corresponding value.  If you'd like to explicitly set the 'Accept' to some other value then use the 'requestHeader' element.
    /// </summary>
    public string Accept { get; set; }
    /// <summary>
    /// Extension container element for Accept
    /// </summary>
    public Element _Accept { get; set; }
    /// <summary>
    /// If this is specified, then test engine shall set the 'Content-Type' header to the corresponding value.  If you'd like to explicitly set the 'Content-Type' to some other value then use the 'requestHeader' element.
    /// </summary>
    public string ContentType { get; set; }
    /// <summary>
    /// Extension container element for ContentType
    /// </summary>
    public Element _ContentType { get; set; }
    /// <summary>
    /// This has no impact on the verification itself.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// If multiple TestScript.destination elements are defined and operation.destination is undefined, test engine will report an error as it cannot determine what destination to use for the exchange.
    /// </summary>
    public int? Destination { get; set; }
    /// <summary>
    /// Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
    /// </summary>
    public bool EncodeRequestUrl { get; set; }
    /// <summary>
    /// This has no impact on the verification itself.
    /// </summary>
    public string Label { get; set; }
    /// <summary>
    /// Extension container element for Label
    /// </summary>
    public Element _Label { get; set; }
    /// <summary>
    /// The primary purpose of the explicit HTTP method is support of  HTTP POST method invocation of the FHIR search. Other uses will include support of negative testing.
    /// </summary>
    public string Method { get; set; }
    /// <summary>
    /// Extension container element for Method
    /// </summary>
    public Element _Method { get; set; }
    /// <summary>
    /// If absent, test engine will send the message.  When present, test engine will not send the request message but will wait for the request message to be sent from this origin server.
    /// </summary>
    public int? Origin { get; set; }
    /// <summary>
    /// If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.   Test engines would append whatever is specified for "params" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The "params" element does not correspond exactly to "search parameters".  Nor is it the "path".  It corresponds to the part of the URL that comes after the [type] (when "resource" element is specified); e.g. It corresponds to "/[id]/_history/[vid] {?_format=[mime-type]}" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
    /// </summary>
    public string Params { get; set; }
    /// <summary>
    /// Extension container element for Params
    /// </summary>
    public Element _Params { get; set; }
    /// <summary>
    /// This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - "If-Modified-Since" and "If-None-Match" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - "If-Match" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using "If-None-Exist".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid "Content-Type" header for negative testing. - etc.
    /// </summary>
    public List<TestScriptSetupActionOperationRequestHeader> RequestHeader { get; set; }
    /// <summary>
    /// If a requestId is supplied, then the resulting request (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "requestId".  If requestId is not specified, it is the test engine's responsibility to store the request and use it as the requestId in subsequent assertions when assertion path and/or headerField is specified, direction is equal to request, and the requestId in not specified.
    /// </summary>
    public string RequestId { get; set; }
    /// <summary>
    /// Extension container element for RequestId
    /// </summary>
    public Element _RequestId { get; set; }
    /// <summary>
    /// If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored. For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present. For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url. For "vread" and "history" operations, the versionId value will also be used.
    /// </summary>
    public string Resource { get; set; }
    /// <summary>
    /// Extension container element for Resource
    /// </summary>
    public Element _Resource { get; set; }
    /// <summary>
    /// If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by "responseId".  If responseId is not specified, it is the test engine's responsibility to store the response and use it as the responseId in subsequent assertions when assertion path and/or headerField is specified and the responseId is not specified.
    /// </summary>
    public string ResponseId { get; set; }
    /// <summary>
    /// Extension container element for ResponseId
    /// </summary>
    public Element _ResponseId { get; set; }
    /// <summary>
    /// The id of the fixture used as the body of a PUT or POST request.
    /// </summary>
    public string SourceId { get; set; }
    /// <summary>
    /// Extension container element for SourceId
    /// </summary>
    public Element _SourceId { get; set; }
    /// <summary>
    /// If "url" element is specified, then "targetId", "params", and "resource" elements will be ignored as "url" element will have everything needed for constructing the request url.  If "params" element is specified, then "targetId" element is ignored.  For FHIR operations that require a resource (e.g. "read" and "vread" operations), the "resource" element must be specified when "params" element is specified.  If "url" and "params" elements are absent, then the request url will be constructed from "targetId" fixture if present.  For "read" operation, the resource and id values will be extracted from "targetId" fixture and used to construct the url.  For "vread" and "history" operations, the versionId value will also be used.
    /// </summary>
    public string TargetId { get; set; }
    /// <summary>
    /// Extension container element for TargetId
    /// </summary>
    public Element _TargetId { get; set; }
    /// <summary>
    /// See http://build.fhir.org/http.html for list of server interactions.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Used to set the request URL explicitly.  If "url" element is defined, then "targetId", "resource", and "params" elements will be ignored.  Test engines would use whatever is specified in "url" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Resource))
      {
        writer.WriteString("resource", (string)Resource!);
      }

      if (_Resource != null)
      {
        writer.WritePropertyName("_resource");
        _Resource.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Label))
      {
        writer.WriteString("label", (string)Label!);
      }

      if (_Label != null)
      {
        writer.WritePropertyName("_label");
        _Label.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Accept))
      {
        writer.WriteString("accept", (string)Accept!);
      }

      if (_Accept != null)
      {
        writer.WritePropertyName("_accept");
        _Accept.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ContentType))
      {
        writer.WriteString("contentType", (string)ContentType!);
      }

      if (_ContentType != null)
      {
        writer.WritePropertyName("_contentType");
        _ContentType.SerializeJson(writer, options);
      }

      if (Destination != null)
      {
        writer.WriteNumber("destination", (int)Destination!);
      }

      writer.WriteBoolean("encodeRequestUrl", EncodeRequestUrl);

      if (!string.IsNullOrEmpty(Method))
      {
        writer.WriteString("method", (string)Method!);
      }

      if (_Method != null)
      {
        writer.WritePropertyName("_method");
        _Method.SerializeJson(writer, options);
      }

      if (Origin != null)
      {
        writer.WriteNumber("origin", (int)Origin!);
      }

      if (!string.IsNullOrEmpty(Params))
      {
        writer.WriteString("params", (string)Params!);
      }

      if (_Params != null)
      {
        writer.WritePropertyName("_params");
        _Params.SerializeJson(writer, options);
      }

      if ((RequestHeader != null) && (RequestHeader.Count != 0))
      {
        writer.WritePropertyName("requestHeader");
        writer.WriteStartArray();

        foreach (TestScriptSetupActionOperationRequestHeader valRequestHeader in RequestHeader)
        {
          valRequestHeader.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(RequestId))
      {
        writer.WriteString("requestId", (string)RequestId!);
      }

      if (_RequestId != null)
      {
        writer.WritePropertyName("_requestId");
        _RequestId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ResponseId))
      {
        writer.WriteString("responseId", (string)ResponseId!);
      }

      if (_ResponseId != null)
      {
        writer.WritePropertyName("_responseId");
        _ResponseId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceId))
      {
        writer.WriteString("sourceId", (string)SourceId!);
      }

      if (_SourceId != null)
      {
        writer.WritePropertyName("_sourceId");
        _SourceId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TargetId))
      {
        writer.WriteString("targetId", (string)TargetId!);
      }

      if (_TargetId != null)
      {
        writer.WritePropertyName("_targetId");
        _TargetId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "accept":
          Accept = reader.GetString();
          break;

        case "_accept":
          _Accept = new fhirCsR4.Models.Element();
          _Accept.DeserializeJson(ref reader, options);
          break;

        case "contentType":
          ContentType = reader.GetString();
          break;

        case "_contentType":
          _ContentType = new fhirCsR4.Models.Element();
          _ContentType.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "destination":
          Destination = reader.GetInt32();
          break;

        case "encodeRequestUrl":
          EncodeRequestUrl = reader.GetBoolean();
          break;

        case "label":
          Label = reader.GetString();
          break;

        case "_label":
          _Label = new fhirCsR4.Models.Element();
          _Label.DeserializeJson(ref reader, options);
          break;

        case "method":
          Method = reader.GetString();
          break;

        case "_method":
          _Method = new fhirCsR4.Models.Element();
          _Method.DeserializeJson(ref reader, options);
          break;

        case "origin":
          Origin = reader.GetInt32();
          break;

        case "params":
          Params = reader.GetString();
          break;

        case "_params":
          _Params = new fhirCsR4.Models.Element();
          _Params.DeserializeJson(ref reader, options);
          break;

        case "requestHeader":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RequestHeader = new List<TestScriptSetupActionOperationRequestHeader>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptSetupActionOperationRequestHeader objRequestHeader = new fhirCsR4.Models.TestScriptSetupActionOperationRequestHeader();
            objRequestHeader.DeserializeJson(ref reader, options);
            RequestHeader.Add(objRequestHeader);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RequestHeader.Count == 0)
          {
            RequestHeader = null;
          }

          break;

        case "requestId":
          RequestId = reader.GetString();
          break;

        case "_requestId":
          _RequestId = new fhirCsR4.Models.Element();
          _RequestId.DeserializeJson(ref reader, options);
          break;

        case "resource":
          Resource = reader.GetString();
          break;

        case "_resource":
          _Resource = new fhirCsR4.Models.Element();
          _Resource.DeserializeJson(ref reader, options);
          break;

        case "responseId":
          ResponseId = reader.GetString();
          break;

        case "_responseId":
          _ResponseId = new fhirCsR4.Models.Element();
          _ResponseId.DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          SourceId = reader.GetString();
          break;

        case "_sourceId":
          _SourceId = new fhirCsR4.Models.Element();
          _SourceId.DeserializeJson(ref reader, options);
          break;

        case "targetId":
          TargetId = reader.GetString();
          break;

        case "_targetId":
          _TargetId = new fhirCsR4.Models.Element();
          _TargetId.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.operation.method field
  /// </summary>
  public static class TestScriptSetupActionOperationMethodCodes {
    public const string DELETE = "delete";
    public const string GET = "get";
    public const string OPTIONS = "options";
    public const string PATCH = "patch";
    public const string POST = "post";
    public const string PUT = "put";
    public const string HEAD = "head";
  }
  /// <summary>
  /// In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptSetupActionAssert>))]
  public class TestScriptSetupActionAssert : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
    /// </summary>
    public string CompareToSourceExpression { get; set; }
    /// <summary>
    /// Extension container element for CompareToSourceExpression
    /// </summary>
    public Element _CompareToSourceExpression { get; set; }
    /// <summary>
    /// Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
    /// </summary>
    public string CompareToSourceId { get; set; }
    /// <summary>
    /// Extension container element for CompareToSourceId
    /// </summary>
    public Element _CompareToSourceId { get; set; }
    /// <summary>
    /// The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if "assert.value" is used. The evaluation will be done before the assertion is evaluated.
    /// </summary>
    public string CompareToSourcePath { get; set; }
    /// <summary>
    /// Extension container element for CompareToSourcePath
    /// </summary>
    public Element _CompareToSourcePath { get; set; }
    /// <summary>
    /// If this is specified, then test engine shall confirm that the content-type of the last operation's headers is set to this value.  If "assert.sourceId" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation's headers).  If you'd like to have more control over the string, then use 'assert.headerField' instead.
    /// </summary>
    public string ContentType { get; set; }
    /// <summary>
    /// Extension container element for ContentType
    /// </summary>
    public Element _ContentType { get; set; }
    /// <summary>
    /// This has no impact on the verification itself.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// If the direction is specified as "response" (the default), then the processing of this assert is against the received response message. If the direction is specified as "request", then the processing of this assert is against the sent request message.
    /// </summary>
    public string Direction { get; set; }
    /// <summary>
    /// Extension container element for Direction
    /// </summary>
    public Element _Direction { get; set; }
    /// <summary>
    /// If both "expression" and a "fixtureId" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId.  If "expression" is specified and a "fixtureId" is not, then the expression will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
    /// </summary>
    public string Expression { get; set; }
    /// <summary>
    /// Extension container element for Expression
    /// </summary>
    public Element _Expression { get; set; }
    /// <summary>
    /// If "headerField" is specified then "value" must be specified.  If "sourceId" is not specified, then "headerField" will be evaluated against the last operation's response headers.  Test engines are to keep track of the last operation's response body and response headers.
    /// </summary>
    public string HeaderField { get; set; }
    /// <summary>
    /// Extension container element for HeaderField
    /// </summary>
    public Element _HeaderField { get; set; }
    /// <summary>
    /// This has no impact on the verification itself.
    /// </summary>
    public string Label { get; set; }
    /// <summary>
    /// Extension container element for Label
    /// </summary>
    public Element _Label { get; set; }
    /// <summary>
    /// Asserts that the response contains all the element/content in another fixture pointed to by minimumId.  This can be a statically defined fixture or one that is dynamically set via responseId.
    /// </summary>
    public string MinimumId { get; set; }
    /// <summary>
    /// Extension container element for MinimumId
    /// </summary>
    public Element _MinimumId { get; set; }
    /// <summary>
    /// Asserts that the Bundle contains first, last, and next links.
    /// </summary>
    public bool? NavigationLinks { get; set; }
    /// <summary>
    /// Operators are useful especially for negative testing.  If operator is not specified, then the "equals" operator is assumed; e.g. ```&lt;code&gt;   &lt;assert&gt;  &lt;operator value="in" /&gt;  &lt;responseCode value="200,201,204" /&gt;    &lt;/assert&gt;    &lt;assert&gt;  &lt;operator value="notEquals" /&gt;  &lt;response value="okay"/&gt;   &lt;/assert&gt;    &lt;assert&gt;  &lt;operator value="greaterThan" /&gt;    &lt;responseHeader&gt;     &lt;field value="Content-Length" /&gt;     &lt;value value="0" /&gt;    &lt;/responseHeader/&gt;   &lt;/assert&gt; &lt;/code&gt; ```.
    /// </summary>
    public string Operator { get; set; }
    /// <summary>
    /// Extension container element for Operator
    /// </summary>
    public Element _Operator { get; set; }
    /// <summary>
    /// If both "path" and a "fixtureId" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If "path" is specified and a "fixtureId" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.
    /// </summary>
    public string Path { get; set; }
    /// <summary>
    /// Extension container element for Path
    /// </summary>
    public Element _Path { get; set; }
    /// <summary>
    /// If "requestMethod" is specified then it will be used in place of "value". The "requestMethod" will evaluate against the last operation's request HTTP operation.
    /// </summary>
    public string RequestMethod { get; set; }
    /// <summary>
    /// Extension container element for RequestMethod
    /// </summary>
    public Element _RequestMethod { get; set; }
    /// <summary>
    /// If "requestURL" is specified then it will be used in place of "value". The "requestURL" will evaluate against the last operation's full request URL path string.
    /// </summary>
    public string RequestURL { get; set; }
    /// <summary>
    /// Extension container element for RequestURL
    /// </summary>
    public Element _RequestURL { get; set; }
    /// <summary>
    /// This will be expected resource type in response body e.g. in read, vread, search, etc.  See http://build.fhir.org/resourcelist.html for complete list of resource types; e.g. &lt;assert &gt; &lt;resourceType value="Patient" &lt;/assert&gt;.
    /// </summary>
    public string Resource { get; set; }
    /// <summary>
    /// Extension container element for Resource
    /// </summary>
    public Element _Resource { get; set; }
    /// <summary>
    /// This is a shorter way of achieving similar verifications via "assert.responseCode".  If you need more control, then use "assert.responseCode"  e.g. &lt;assert&gt;  &lt;contentType value="json" /&gt;  &lt;response value="okay"/&gt; &lt;/assert&gt;.
    /// </summary>
    public string Response { get; set; }
    /// <summary>
    /// Extension container element for Response
    /// </summary>
    public Element _Response { get; set; }
    /// <summary>
    /// To be used with "operator" attribute value. Asserts that the response code equals this value if "operator" is not specified.   If the operator is "in" or "notIn" then the responseCode would be a comma-separated list of values e.g. "200,201". Otherwise, it's expected to be a numeric value.   If "fixture" is not specified, then the "responseBodyId" value of the last operation is assumed.
    /// </summary>
    public string ResponseCode { get; set; }
    /// <summary>
    /// Extension container element for ResponseCode
    /// </summary>
    public Element _ResponseCode { get; set; }
    /// <summary>
    /// This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.
    /// </summary>
    public string SourceId { get; set; }
    /// <summary>
    /// Extension container element for SourceId
    /// </summary>
    public Element _SourceId { get; set; }
    /// <summary>
    /// The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.
    /// </summary>
    public string ValidateProfileId { get; set; }
    /// <summary>
    /// Extension container element for ValidateProfileId
    /// </summary>
    public Element _ValidateProfileId { get; set; }
    /// <summary>
    /// The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.
    /// </summary>
    public bool WarningOnly { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Label))
      {
        writer.WriteString("label", (string)Label!);
      }

      if (_Label != null)
      {
        writer.WritePropertyName("_label");
        _Label.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Direction))
      {
        writer.WriteString("direction", (string)Direction!);
      }

      if (_Direction != null)
      {
        writer.WritePropertyName("_direction");
        _Direction.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CompareToSourceId))
      {
        writer.WriteString("compareToSourceId", (string)CompareToSourceId!);
      }

      if (_CompareToSourceId != null)
      {
        writer.WritePropertyName("_compareToSourceId");
        _CompareToSourceId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CompareToSourceExpression))
      {
        writer.WriteString("compareToSourceExpression", (string)CompareToSourceExpression!);
      }

      if (_CompareToSourceExpression != null)
      {
        writer.WritePropertyName("_compareToSourceExpression");
        _CompareToSourceExpression.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CompareToSourcePath))
      {
        writer.WriteString("compareToSourcePath", (string)CompareToSourcePath!);
      }

      if (_CompareToSourcePath != null)
      {
        writer.WritePropertyName("_compareToSourcePath");
        _CompareToSourcePath.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ContentType))
      {
        writer.WriteString("contentType", (string)ContentType!);
      }

      if (_ContentType != null)
      {
        writer.WritePropertyName("_contentType");
        _ContentType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Expression))
      {
        writer.WriteString("expression", (string)Expression!);
      }

      if (_Expression != null)
      {
        writer.WritePropertyName("_expression");
        _Expression.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(HeaderField))
      {
        writer.WriteString("headerField", (string)HeaderField!);
      }

      if (_HeaderField != null)
      {
        writer.WritePropertyName("_headerField");
        _HeaderField.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MinimumId))
      {
        writer.WriteString("minimumId", (string)MinimumId!);
      }

      if (_MinimumId != null)
      {
        writer.WritePropertyName("_minimumId");
        _MinimumId.SerializeJson(writer, options);
      }

      if (NavigationLinks != null)
      {
        writer.WriteBoolean("navigationLinks", (bool)NavigationLinks!);
      }

      if (!string.IsNullOrEmpty(Operator))
      {
        writer.WriteString("operator", (string)Operator!);
      }

      if (_Operator != null)
      {
        writer.WritePropertyName("_operator");
        _Operator.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Path))
      {
        writer.WriteString("path", (string)Path!);
      }

      if (_Path != null)
      {
        writer.WritePropertyName("_path");
        _Path.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RequestMethod))
      {
        writer.WriteString("requestMethod", (string)RequestMethod!);
      }

      if (_RequestMethod != null)
      {
        writer.WritePropertyName("_requestMethod");
        _RequestMethod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RequestURL))
      {
        writer.WriteString("requestURL", (string)RequestURL!);
      }

      if (_RequestURL != null)
      {
        writer.WritePropertyName("_requestURL");
        _RequestURL.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Resource))
      {
        writer.WriteString("resource", (string)Resource!);
      }

      if (_Resource != null)
      {
        writer.WritePropertyName("_resource");
        _Resource.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Response))
      {
        writer.WriteString("response", (string)Response!);
      }

      if (_Response != null)
      {
        writer.WritePropertyName("_response");
        _Response.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ResponseCode))
      {
        writer.WriteString("responseCode", (string)ResponseCode!);
      }

      if (_ResponseCode != null)
      {
        writer.WritePropertyName("_responseCode");
        _ResponseCode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceId))
      {
        writer.WriteString("sourceId", (string)SourceId!);
      }

      if (_SourceId != null)
      {
        writer.WritePropertyName("_sourceId");
        _SourceId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValidateProfileId))
      {
        writer.WriteString("validateProfileId", (string)ValidateProfileId!);
      }

      if (_ValidateProfileId != null)
      {
        writer.WritePropertyName("_validateProfileId");
        _ValidateProfileId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      writer.WriteBoolean("warningOnly", WarningOnly);

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "compareToSourceExpression":
          CompareToSourceExpression = reader.GetString();
          break;

        case "_compareToSourceExpression":
          _CompareToSourceExpression = new fhirCsR4.Models.Element();
          _CompareToSourceExpression.DeserializeJson(ref reader, options);
          break;

        case "compareToSourceId":
          CompareToSourceId = reader.GetString();
          break;

        case "_compareToSourceId":
          _CompareToSourceId = new fhirCsR4.Models.Element();
          _CompareToSourceId.DeserializeJson(ref reader, options);
          break;

        case "compareToSourcePath":
          CompareToSourcePath = reader.GetString();
          break;

        case "_compareToSourcePath":
          _CompareToSourcePath = new fhirCsR4.Models.Element();
          _CompareToSourcePath.DeserializeJson(ref reader, options);
          break;

        case "contentType":
          ContentType = reader.GetString();
          break;

        case "_contentType":
          _ContentType = new fhirCsR4.Models.Element();
          _ContentType.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "direction":
          Direction = reader.GetString();
          break;

        case "_direction":
          _Direction = new fhirCsR4.Models.Element();
          _Direction.DeserializeJson(ref reader, options);
          break;

        case "expression":
          Expression = reader.GetString();
          break;

        case "_expression":
          _Expression = new fhirCsR4.Models.Element();
          _Expression.DeserializeJson(ref reader, options);
          break;

        case "headerField":
          HeaderField = reader.GetString();
          break;

        case "_headerField":
          _HeaderField = new fhirCsR4.Models.Element();
          _HeaderField.DeserializeJson(ref reader, options);
          break;

        case "label":
          Label = reader.GetString();
          break;

        case "_label":
          _Label = new fhirCsR4.Models.Element();
          _Label.DeserializeJson(ref reader, options);
          break;

        case "minimumId":
          MinimumId = reader.GetString();
          break;

        case "_minimumId":
          _MinimumId = new fhirCsR4.Models.Element();
          _MinimumId.DeserializeJson(ref reader, options);
          break;

        case "navigationLinks":
          NavigationLinks = reader.GetBoolean();
          break;

        case "operator":
          Operator = reader.GetString();
          break;

        case "_operator":
          _Operator = new fhirCsR4.Models.Element();
          _Operator.DeserializeJson(ref reader, options);
          break;

        case "path":
          Path = reader.GetString();
          break;

        case "_path":
          _Path = new fhirCsR4.Models.Element();
          _Path.DeserializeJson(ref reader, options);
          break;

        case "requestMethod":
          RequestMethod = reader.GetString();
          break;

        case "_requestMethod":
          _RequestMethod = new fhirCsR4.Models.Element();
          _RequestMethod.DeserializeJson(ref reader, options);
          break;

        case "requestURL":
          RequestURL = reader.GetString();
          break;

        case "_requestURL":
          _RequestURL = new fhirCsR4.Models.Element();
          _RequestURL.DeserializeJson(ref reader, options);
          break;

        case "resource":
          Resource = reader.GetString();
          break;

        case "_resource":
          _Resource = new fhirCsR4.Models.Element();
          _Resource.DeserializeJson(ref reader, options);
          break;

        case "response":
          Response = reader.GetString();
          break;

        case "_response":
          _Response = new fhirCsR4.Models.Element();
          _Response.DeserializeJson(ref reader, options);
          break;

        case "responseCode":
          ResponseCode = reader.GetString();
          break;

        case "_responseCode":
          _ResponseCode = new fhirCsR4.Models.Element();
          _ResponseCode.DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          SourceId = reader.GetString();
          break;

        case "_sourceId":
          _SourceId = new fhirCsR4.Models.Element();
          _SourceId.DeserializeJson(ref reader, options);
          break;

        case "validateProfileId":
          ValidateProfileId = reader.GetString();
          break;

        case "_validateProfileId":
          _ValidateProfileId = new fhirCsR4.Models.Element();
          _ValidateProfileId.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        case "warningOnly":
          WarningOnly = reader.GetBoolean();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.direction field
  /// </summary>
  public static class TestScriptSetupActionAssertDirectionCodes {
    public const string RESPONSE = "response";
    public const string REQUEST = "request";
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.operator field
  /// </summary>
  public static class TestScriptSetupActionAssertOperatorCodes {
    public const string EQUALS = "equals";
    public const string NOTEQUALS = "notEquals";
    public const string VAL_IN = "in";
    public const string NOTIN = "notIn";
    public const string GREATERTHAN = "greaterThan";
    public const string LESSTHAN = "lessThan";
    public const string EMPTY = "empty";
    public const string NOTEMPTY = "notEmpty";
    public const string CONTAINS = "contains";
    public const string NOTCONTAINS = "notContains";
    public const string EVAL = "eval";
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.requestMethod field
  /// </summary>
  public static class TestScriptSetupActionAssertRequestMethodCodes {
    public const string DELETE = "delete";
    public const string GET = "get";
    public const string OPTIONS = "options";
    public const string PATCH = "patch";
    public const string POST = "post";
    public const string PUT = "put";
    public const string HEAD = "head";
  }
  /// <summary>
  /// Code Values for the TestScript.setup.action.assert.response field
  /// </summary>
  public static class TestScriptSetupActionAssertResponseCodes {
    public const string OKAY = "okay";
    public const string CREATED = "created";
    public const string NOCONTENT = "noContent";
    public const string NOTMODIFIED = "notModified";
    public const string BAD = "bad";
    public const string FORBIDDEN = "forbidden";
    public const string NOTFOUND = "notFound";
    public const string METHODNOTALLOWED = "methodNotAllowed";
    public const string CONFLICT = "conflict";
    public const string GONE = "gone";
    public const string PRECONDITIONFAILED = "preconditionFailed";
    public const string UNPROCESSABLE = "unprocessable";
  }
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptSetupAction>))]
  public class TestScriptSetupAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
    /// </summary>
    public TestScriptSetupActionAssert Assert { get; set; }
    /// <summary>
    /// The operation to perform.
    /// </summary>
    public TestScriptSetupActionOperation Operation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if (Assert != null)
      {
        writer.WritePropertyName("assert");
        Assert.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "assert":
          Assert = new fhirCsR4.Models.TestScriptSetupActionAssert();
          Assert.DeserializeJson(ref reader, options);
          break;

        case "operation":
          Operation = new fhirCsR4.Models.TestScriptSetupActionOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A series of required setup operations before tests are executed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptSetup>))]
  public class TestScriptSetup : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
    /// </summary>
    public List<TestScriptSetupAction> Action { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (TestScriptSetupAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<TestScriptSetupAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptSetupAction objAction = new fhirCsR4.Models.TestScriptSetupAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptTestAction>))]
  public class TestScriptTestAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.
    /// </summary>
    public TestScriptSetupActionAssert Assert { get; set; }
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    public TestScriptSetupActionOperation Operation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if (Assert != null)
      {
        writer.WritePropertyName("assert");
        Assert.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "assert":
          Assert = new fhirCsR4.Models.TestScriptSetupActionAssert();
          Assert.DeserializeJson(ref reader, options);
          break;

        case "operation":
          Operation = new fhirCsR4.Models.TestScriptSetupActionOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A test in this script.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptTest>))]
  public class TestScriptTest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
    /// </summary>
    public List<TestScriptTestAction> Action { get; set; }
    /// <summary>
    /// A short description of the test used by test engines for tracking and reporting purposes.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The name of this test used for tracking/logging purposes by test engines.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (TestScriptTestAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<TestScriptTestAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptTestAction objAction = new fhirCsR4.Models.TestScriptTestAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptTeardownAction>))]
  public class TestScriptTeardownAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    public TestScriptSetupActionOperation Operation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          Operation = new fhirCsR4.Models.TestScriptSetupActionOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A series of operations required to clean up after all the tests are executed (successfully or otherwise).
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScriptTeardown>))]
  public class TestScriptTeardown : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
    /// </summary>
    public List<TestScriptTeardownAction> Action { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (TestScriptTeardownAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<TestScriptTeardownAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptTeardownAction objAction = new fhirCsR4.Models.TestScriptTeardownAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestScript>))]
  public class TestScript : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "TestScript";
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the test script. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the test script was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the test script as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the test script is presumed to be the predominant language in the place the test script was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.
    /// </summary>
    public List<TestScriptDestination> Destination { get; set; }
    /// <summary>
    /// Allows filtering of test scripts that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
    /// </summary>
    public List<TestScriptFixture> Fixture { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this test script outside of FHIR, where it is not possible to use the logical URI.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// It may be possible for the test script to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// The required capability must exist and are assumed to function correctly on the FHIR server being tested.
    /// </summary>
    public TestScriptMetadata Metadata { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.
    /// </summary>
    public List<TestScriptOrigin> Origin { get; set; }
    /// <summary>
    /// See http://build.fhir.org/resourcelist.html for complete list of resource types.
    /// </summary>
    public List<Reference> Profile { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the test script is the organization or individual primarily responsible for the maintenance and upkeep of the test script. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the test script. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the test script. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this test script.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// A series of required setup operations before tests are executed.
    /// </summary>
    public TestScriptSetup Setup { get; set; }
    /// <summary>
    /// Allows filtering of test scripts that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// A series of operations required to clean up after all the tests are executed (successfully or otherwise).
    /// </summary>
    public TestScriptTeardown Teardown { get; set; }
    /// <summary>
    /// A test in this script.
    /// </summary>
    public List<TestScriptTest> Test { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations. This limits the places that test engines would need to look for placeholders "${}".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in "operation.params", "operation.requestHeader.value", and "operation.url" element values during operation calls and in "assert.value" during assertion evaluations.  See example testscript-search.xml.
    /// </summary>
    public List<TestScriptVariable> Variable { get; set; }
    /// <summary>
    /// There may be different test script instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the test script with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if ((Origin != null) && (Origin.Count != 0))
      {
        writer.WritePropertyName("origin");
        writer.WriteStartArray();

        foreach (TestScriptOrigin valOrigin in Origin)
        {
          valOrigin.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Destination != null) && (Destination.Count != 0))
      {
        writer.WritePropertyName("destination");
        writer.WriteStartArray();

        foreach (TestScriptDestination valDestination in Destination)
        {
          valDestination.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Metadata != null)
      {
        writer.WritePropertyName("metadata");
        Metadata.SerializeJson(writer, options);
      }

      if ((Fixture != null) && (Fixture.Count != 0))
      {
        writer.WritePropertyName("fixture");
        writer.WriteStartArray();

        foreach (TestScriptFixture valFixture in Fixture)
        {
          valFixture.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Profile != null) && (Profile.Count != 0))
      {
        writer.WritePropertyName("profile");
        writer.WriteStartArray();

        foreach (Reference valProfile in Profile)
        {
          valProfile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Variable != null) && (Variable.Count != 0))
      {
        writer.WritePropertyName("variable");
        writer.WriteStartArray();

        foreach (TestScriptVariable valVariable in Variable)
        {
          valVariable.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Setup != null)
      {
        writer.WritePropertyName("setup");
        Setup.SerializeJson(writer, options);
      }

      if ((Test != null) && (Test.Count != 0))
      {
        writer.WritePropertyName("test");
        writer.WriteStartArray();

        foreach (TestScriptTest valTest in Test)
        {
          valTest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Teardown != null)
      {
        writer.WritePropertyName("teardown");
        Teardown.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactDetail objContact = new fhirCsR4.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "destination":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Destination = new List<TestScriptDestination>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptDestination objDestination = new fhirCsR4.Models.TestScriptDestination();
            objDestination.DeserializeJson(ref reader, options);
            Destination.Add(objDestination);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Destination.Count == 0)
          {
            Destination = null;
          }

          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "fixture":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Fixture = new List<TestScriptFixture>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptFixture objFixture = new fhirCsR4.Models.TestScriptFixture();
            objFixture.DeserializeJson(ref reader, options);
            Fixture.Add(objFixture);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Fixture.Count == 0)
          {
            Fixture = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objJurisdiction = new fhirCsR4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "metadata":
          Metadata = new fhirCsR4.Models.TestScriptMetadata();
          Metadata.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "origin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Origin = new List<TestScriptOrigin>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptOrigin objOrigin = new fhirCsR4.Models.TestScriptOrigin();
            objOrigin.DeserializeJson(ref reader, options);
            Origin.Add(objOrigin);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Origin.Count == 0)
          {
            Origin = null;
          }

          break;

        case "profile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Profile = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objProfile = new fhirCsR4.Models.Reference();
            objProfile.DeserializeJson(ref reader, options);
            Profile.Add(objProfile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Profile.Count == 0)
          {
            Profile = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR4.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR4.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "setup":
          Setup = new fhirCsR4.Models.TestScriptSetup();
          Setup.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "teardown":
          Teardown = new fhirCsR4.Models.TestScriptTeardown();
          Teardown.DeserializeJson(ref reader, options);
          break;

        case "test":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Test = new List<TestScriptTest>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptTest objTest = new fhirCsR4.Models.TestScriptTest();
            objTest.DeserializeJson(ref reader, options);
            Test.Add(objTest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Test.Count == 0)
          {
            Test = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.UsageContext objUseContext = new fhirCsR4.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "variable":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Variable = new List<TestScriptVariable>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestScriptVariable objVariable = new fhirCsR4.Models.TestScriptVariable();
            objVariable.DeserializeJson(ref reader, options);
            Variable.Add(objVariable);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Variable.Count == 0)
          {
            Variable = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestScript.status field
  /// </summary>
  public static class TestScriptStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
