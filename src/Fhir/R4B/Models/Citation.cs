// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// A human-readable display of the citation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationSummary>))]
  public class CitationSummary : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Format for display of the citation.
    /// </summary>
    public CodeableConcept Style { get; set; }
    /// <summary>
    /// The human-readable display of the citation.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Style != null)
      {
        writer.WritePropertyName("style");
        Style.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "style":
          Style = new fhirCsR4.Models.CodeableConcept();
          Style.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An alternative variant of the citation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationVariantCitation>))]
  public class CitationVariantCitation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Base citation layer.
    /// </summary>
    public Reference BaseCitation { get; set; }
    /// <summary>
    /// Used to describe the reason for the variant citation, such as version or subpart specification.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Used to describe the specific variation, such as version number or subpart specification.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (BaseCitation != null)
      {
        writer.WritePropertyName("baseCitation");
        BaseCitation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "baseCitation":
          BaseCitation = new fhirCsR4.Models.Reference();
          BaseCitation.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The name of the article.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationArticleTitle>))]
  public class CitationArticleTitle : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Used to express the specific language.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// Full title of the article.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Used to express the reason and specific aspect for any variant title, such as language and specific language.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Language != null)
      {
        writer.WritePropertyName("language");
        Language.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "language":
          Language = new fhirCsR4.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Used for any URL for the article cited.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationWebLocation>))]
  public class CitationWebLocation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Code the reason for different URLs, e.g. abstract and full-text.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Persistent URLs, like doi, are preferred.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Publisher-provided summary of the article.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationAbstract>))]
  public class CitationAbstract : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Copyright information for the abstract text.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Used to express the specific language.
    /// </summary>
    public CodeableConcept Language { get; set; }
    /// <summary>
    /// Abstract content.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Used to express the reason for an additional or variant abstract, such as language.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Language != null)
      {
        writer.WritePropertyName("language");
        Language.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "language":
          Language = new fhirCsR4.Models.CodeableConcept();
          Language.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Organization affiliated with the entity.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationContributorshipEntryAffiliationInfo>))]
  public class CitationContributorshipEntryAffiliationInfo : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Display for the organization.
    /// </summary>
    public string Affiliation { get; set; }
    /// <summary>
    /// Extension container element for Affiliation
    /// </summary>
    public Element _Affiliation { get; set; }
    /// <summary>
    /// Identifier for the organization.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Role within the organization, such as professional title.
    /// </summary>
    public string Role { get; set; }
    /// <summary>
    /// Extension container element for Role
    /// </summary>
    public Element _Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Affiliation))
      {
        writer.WriteString("affiliation", (string)Affiliation!);
      }

      if (_Affiliation != null)
      {
        writer.WritePropertyName("_affiliation");
        _Affiliation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Role))
      {
        writer.WriteString("role", (string)Role!);
      }

      if (_Role != null)
      {
        writer.WritePropertyName("_role");
        _Role.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "affiliation":
          Affiliation = reader.GetString();
          break;

        case "_affiliation":
          _Affiliation = new fhirCsR4.Models.Element();
          _Affiliation.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "role":
          Role = reader.GetString();
          break;

        case "_role":
          _Role = new fhirCsR4.Models.Element();
          _Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Used to report contributorship in individualized ways.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationContributorshipEntry>))]
  public class CitationContributorshipEntry : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Physical mailing address for the author or contributor.
    /// </summary>
    public List<Address> Address { get; set; }
    /// <summary>
    /// Organization affiliated with the entity.
    /// </summary>
    public List<CitationContributorshipEntryAffiliationInfo> AffiliationInfo { get; set; }
    /// <summary>
    /// This element is used in Medline based citations, but not supported fully by FHIR HumanName datatype.
    /// </summary>
    public string CollectiveName { get; set; }
    /// <summary>
    /// Extension container element for CollectiveName
    /// </summary>
    public Element _CollectiveName { get; set; }
    /// <summary>
    /// The CreDiT taxonomy provides a way to encode contribution information inside article XML files. The purpose of CRediT is to provide transparency in contributions to scholarly published work, to enable improved systems of attribution, credit, and accountability.
    /// </summary>
    public List<CodeableConcept> Contribution { get; set; }
    /// <summary>
    /// Indication of which author is the corresponding author for the article cited.
    /// </summary>
    public bool? CorrespondingAuthor { get; set; }
    /// <summary>
    /// Avoids needing to disambiguate common last names or changes of name. ORCID is commonly used as author identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// This element is used in Medline based citations, but not supported fully by FHIR HumanName datatype.
    /// </summary>
    public string Initials { get; set; }
    /// <summary>
    /// Extension container element for Initials
    /// </summary>
    public Element _Initials { get; set; }
    /// <summary>
    /// Used to code order of authors.
    /// </summary>
    public uint? ListOrder { get; set; }
    /// <summary>
    /// humanName.family can match MEDLINE-based lastName (used for surname or single name), humanName.given can match MEDLINE-based forename (used for remainder of name except for suffix), humanName.suffix can match MEDLINE-based suffix (eg 2nd, 3rd, Jr, Sr).
    /// </summary>
    public HumanName Name { get; set; }
    /// <summary>
    /// Set as "true" to identify non-author contributors.
    /// </summary>
    public bool? NotAnAuthor { get; set; }
    /// <summary>
    /// Email or telephone contact methods for the author or contributor.
    /// </summary>
    public List<ContactPoint> Telecom { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Name != null)
      {
        writer.WritePropertyName("name");
        Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Initials))
      {
        writer.WriteString("initials", (string)Initials!);
      }

      if (_Initials != null)
      {
        writer.WritePropertyName("_initials");
        _Initials.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CollectiveName))
      {
        writer.WriteString("collectiveName", (string)CollectiveName!);
      }

      if (_CollectiveName != null)
      {
        writer.WritePropertyName("_collectiveName");
        _CollectiveName.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((AffiliationInfo != null) && (AffiliationInfo.Count != 0))
      {
        writer.WritePropertyName("affiliationInfo");
        writer.WriteStartArray();

        foreach (CitationContributorshipEntryAffiliationInfo valAffiliationInfo in AffiliationInfo)
        {
          valAffiliationInfo.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Address != null) && (Address.Count != 0))
      {
        writer.WritePropertyName("address");
        writer.WriteStartArray();

        foreach (Address valAddress in Address)
        {
          valAddress.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Telecom != null) && (Telecom.Count != 0))
      {
        writer.WritePropertyName("telecom");
        writer.WriteStartArray();

        foreach (ContactPoint valTelecom in Telecom)
        {
          valTelecom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Contribution != null) && (Contribution.Count != 0))
      {
        writer.WritePropertyName("contribution");
        writer.WriteStartArray();

        foreach (CodeableConcept valContribution in Contribution)
        {
          valContribution.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (NotAnAuthor != null)
      {
        writer.WriteBoolean("notAnAuthor", (bool)NotAnAuthor!);
      }

      if (CorrespondingAuthor != null)
      {
        writer.WriteBoolean("correspondingAuthor", (bool)CorrespondingAuthor!);
      }

      if (ListOrder != null)
      {
        writer.WriteNumber("listOrder", (uint)ListOrder!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Address = new List<Address>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Address objAddress = new fhirCsR4.Models.Address();
            objAddress.DeserializeJson(ref reader, options);
            Address.Add(objAddress);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Address.Count == 0)
          {
            Address = null;
          }

          break;

        case "affiliationInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AffiliationInfo = new List<CitationContributorshipEntryAffiliationInfo>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationContributorshipEntryAffiliationInfo objAffiliationInfo = new fhirCsR4.Models.CitationContributorshipEntryAffiliationInfo();
            objAffiliationInfo.DeserializeJson(ref reader, options);
            AffiliationInfo.Add(objAffiliationInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AffiliationInfo.Count == 0)
          {
            AffiliationInfo = null;
          }

          break;

        case "collectiveName":
          CollectiveName = reader.GetString();
          break;

        case "_collectiveName":
          _CollectiveName = new fhirCsR4.Models.Element();
          _CollectiveName.DeserializeJson(ref reader, options);
          break;

        case "contribution":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contribution = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objContribution = new fhirCsR4.Models.CodeableConcept();
            objContribution.DeserializeJson(ref reader, options);
            Contribution.Add(objContribution);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contribution.Count == 0)
          {
            Contribution = null;
          }

          break;

        case "correspondingAuthor":
          CorrespondingAuthor = reader.GetBoolean();
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "initials":
          Initials = reader.GetString();
          break;

        case "_initials":
          _Initials = new fhirCsR4.Models.Element();
          _Initials.DeserializeJson(ref reader, options);
          break;

        case "listOrder":
          ListOrder = reader.GetUInt32();
          break;

        case "name":
          Name = new fhirCsR4.Models.HumanName();
          Name.DeserializeJson(ref reader, options);
          break;

        case "notAnAuthor":
          NotAnAuthor = reader.GetBoolean();
          break;

        case "telecom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Telecom = new List<ContactPoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactPoint objTelecom = new fhirCsR4.Models.ContactPoint();
            objTelecom.DeserializeJson(ref reader, options);
            Telecom.Add(objTelecom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Telecom.Count == 0)
          {
            Telecom = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Used to record a display of the author/contributor list without separate coding for each list member.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationContributorshipSummary>))]
  public class CitationContributorshipSummary : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Used to code the producer or rule for creating the display string.
    /// </summary>
    public CodeableConcept Source { get; set; }
    /// <summary>
    /// The format for the display string.
    /// </summary>
    public CodeableConcept Style { get; set; }
    /// <summary>
    /// Used most commonly to express an author list or a contributorship statement.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The display string for the author list, contributor list, or contributorship statement.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Style != null)
      {
        writer.WritePropertyName("style");
        Style.SerializeJson(writer, options);
      }

      if (Source != null)
      {
        writer.WritePropertyName("source");
        Source.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "source":
          Source = new fhirCsR4.Models.CodeableConcept();
          Source.DeserializeJson(ref reader, options);
          break;

        case "style":
          Style = new fhirCsR4.Models.CodeableConcept();
          Style.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationContributorship>))]
  public class CitationContributorship : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If list is incomplete "et al" can be appended to Contributorship.summary.value for display purposes.
    /// </summary>
    public bool? Complete { get; set; }
    /// <summary>
    /// Used to report contributorship in individualized ways.
    /// </summary>
    public List<CitationContributorshipEntry> Entry { get; set; }
    /// <summary>
    /// Used to record a display of the author/contributor list without separate coding for each list member.
    /// </summary>
    public List<CitationContributorshipSummary> Summary { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Complete != null)
      {
        writer.WriteBoolean("complete", (bool)Complete!);
      }

      if ((Entry != null) && (Entry.Count != 0))
      {
        writer.WritePropertyName("entry");
        writer.WriteStartArray();

        foreach (CitationContributorshipEntry valEntry in Entry)
        {
          valEntry.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Summary != null) && (Summary.Count != 0))
      {
        writer.WritePropertyName("summary");
        writer.WriteStartArray();

        foreach (CitationContributorshipSummary valSummary in Summary)
        {
          valSummary.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "complete":
          Complete = reader.GetBoolean();
          break;

        case "entry":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Entry = new List<CitationContributorshipEntry>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationContributorshipEntry objEntry = new fhirCsR4.Models.CitationContributorshipEntry();
            objEntry.DeserializeJson(ref reader, options);
            Entry.Add(objEntry);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Entry.Count == 0)
          {
            Entry = null;
          }

          break;

        case "summary":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Summary = new List<CitationContributorshipSummary>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationContributorshipSummary objSummary = new fhirCsR4.Models.CitationContributorshipSummary();
            objSummary.DeserializeJson(ref reader, options);
            Summary.Add(objSummary);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Summary.Count == 0)
          {
            Summary = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The collection the cited article is published in.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationPublicationFormPublishedIn>))]
  public class CitationPublicationFormPublishedIn : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Name of the publisher.
    /// </summary>
    public Reference Publisher { get; set; }
    /// <summary>
    /// Geographic location of the publisher.
    /// </summary>
    public string PublisherLocation { get; set; }
    /// <summary>
    /// Extension container element for PublisherLocation
    /// </summary>
    public Element _PublisherLocation { get; set; }
    /// <summary>
    /// Date can be specific to database version or book edition if specified in the name.
    /// </summary>
    public string StartDate { get; set; }
    /// <summary>
    /// Extension container element for StartDate
    /// </summary>
    public Element _StartDate { get; set; }
    /// <summary>
    /// ClinicalTrials.gov is a name of a database.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Journals and newspapers are coded as Periodical.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (Publisher != null)
      {
        writer.WritePropertyName("publisher");
        Publisher.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PublisherLocation))
      {
        writer.WriteString("publisherLocation", (string)PublisherLocation!);
      }

      if (_PublisherLocation != null)
      {
        writer.WritePropertyName("_publisherLocation");
        _PublisherLocation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StartDate))
      {
        writer.WriteString("startDate", (string)StartDate!);
      }

      if (_StartDate != null)
      {
        writer.WritePropertyName("_startDate");
        _StartDate.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "publisher":
          Publisher = new fhirCsR4.Models.Reference();
          Publisher.DeserializeJson(ref reader, options);
          break;

        case "publisherLocation":
          PublisherLocation = reader.GetString();
          break;

        case "_publisherLocation":
          _PublisherLocation = new fhirCsR4.Models.Element();
          _PublisherLocation.DeserializeJson(ref reader, options);
          break;

        case "startDate":
          StartDate = reader.GetString();
          break;

        case "_startDate":
          _StartDate = new fhirCsR4.Models.Element();
          _StartDate.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Defining the date on which the issue of the journal was published.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationPublicationFormPeriodicReleaseDateOfPublication>))]
  public class CitationPublicationFormPeriodicReleaseDateOfPublication : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Date on which the issue of the journal was published.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Day on which the issue of the journal was published.
    /// </summary>
    public string Day { get; set; }
    /// <summary>
    /// Extension container element for Day
    /// </summary>
    public Element _Day { get; set; }
    /// <summary>
    /// Month on which the issue of the journal was published.
    /// </summary>
    public string Month { get; set; }
    /// <summary>
    /// Extension container element for Month
    /// </summary>
    public Element _Month { get; set; }
    /// <summary>
    /// Spring, Summer, Fall/Autumn, Winter.
    /// </summary>
    public string Season { get; set; }
    /// <summary>
    /// Extension container element for Season
    /// </summary>
    public Element _Season { get; set; }
    /// <summary>
    /// Text representation of the date of which the issue of the journal was published.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Year on which the issue of the journal was published.
    /// </summary>
    public string Year { get; set; }
    /// <summary>
    /// Extension container element for Year
    /// </summary>
    public Element _Year { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Year))
      {
        writer.WriteString("year", (string)Year!);
      }

      if (_Year != null)
      {
        writer.WritePropertyName("_year");
        _Year.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Month))
      {
        writer.WriteString("month", (string)Month!);
      }

      if (_Month != null)
      {
        writer.WritePropertyName("_month");
        _Month.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Day))
      {
        writer.WriteString("day", (string)Day!);
      }

      if (_Day != null)
      {
        writer.WritePropertyName("_day");
        _Day.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Season))
      {
        writer.WriteString("season", (string)Season!);
      }

      if (_Season != null)
      {
        writer.WritePropertyName("_season");
        _Season.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "day":
          Day = reader.GetString();
          break;

        case "_day":
          _Day = new fhirCsR4.Models.Element();
          _Day.DeserializeJson(ref reader, options);
          break;

        case "month":
          Month = reader.GetString();
          break;

        case "_month":
          _Month = new fhirCsR4.Models.Element();
          _Month.DeserializeJson(ref reader, options);
          break;

        case "season":
          Season = reader.GetString();
          break;

        case "_season":
          _Season = new fhirCsR4.Models.Element();
          _Season.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "year":
          Year = reader.GetString();
          break;

        case "_year":
          _Year = new fhirCsR4.Models.Element();
          _Year.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The specific issue in which the cited article resides.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationPublicationFormPeriodicRelease>))]
  public class CitationPublicationFormPeriodicRelease : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// National Library of Medicine uses the codes "Internet" or "Print".
    /// </summary>
    public CodeableConcept CitedMedium { get; set; }
    /// <summary>
    /// Defining the date on which the issue of the journal was published.
    /// </summary>
    public CitationPublicationFormPeriodicReleaseDateOfPublication DateOfPublication { get; set; }
    /// <summary>
    /// Issue, part or supplement of journal in which the article is published.
    /// </summary>
    public string Issue { get; set; }
    /// <summary>
    /// Extension container element for Issue
    /// </summary>
    public Element _Issue { get; set; }
    /// <summary>
    /// Volume number of journal in which the article is published.
    /// </summary>
    public string Volume { get; set; }
    /// <summary>
    /// Extension container element for Volume
    /// </summary>
    public Element _Volume { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (CitedMedium != null)
      {
        writer.WritePropertyName("citedMedium");
        CitedMedium.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Volume))
      {
        writer.WriteString("volume", (string)Volume!);
      }

      if (_Volume != null)
      {
        writer.WritePropertyName("_volume");
        _Volume.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issue))
      {
        writer.WriteString("issue", (string)Issue!);
      }

      if (_Issue != null)
      {
        writer.WritePropertyName("_issue");
        _Issue.SerializeJson(writer, options);
      }

      if (DateOfPublication != null)
      {
        writer.WritePropertyName("dateOfPublication");
        DateOfPublication.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "citedMedium":
          CitedMedium = new fhirCsR4.Models.CodeableConcept();
          CitedMedium.DeserializeJson(ref reader, options);
          break;

        case "dateOfPublication":
          DateOfPublication = new fhirCsR4.Models.CitationPublicationFormPeriodicReleaseDateOfPublication();
          DateOfPublication.DeserializeJson(ref reader, options);
          break;

        case "issue":
          Issue = reader.GetString();
          break;

        case "_issue":
          _Issue = new fhirCsR4.Models.Element();
          _Issue.DeserializeJson(ref reader, options);
          break;

        case "volume":
          Volume = reader.GetString();
          break;

        case "_volume":
          _Volume = new fhirCsR4.Models.Element();
          _Volume.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationPublicationForm>))]
  public class CitationPublicationForm : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The date the article was added to the database, or the date the article was released (which may differ from the journal issue publication date).
    /// </summary>
    public string ArticleDate { get; set; }
    /// <summary>
    /// Extension container element for ArticleDate
    /// </summary>
    public Element _ArticleDate { get; set; }
    /// <summary>
    /// Used for isolated representation of first page.
    /// </summary>
    public string FirstPage { get; set; }
    /// <summary>
    /// Extension container element for FirstPage
    /// </summary>
    public Element _FirstPage { get; set; }
    /// <summary>
    /// Language is provided to support indexing and accessibility (typically, services such as text to speech use the language tag). The html language tag in the narrative applies  to the narrative. The language tag on the resource may be used to specify the language of other presentations generated from the data in the resource. Not all the content has to be in the base language. The Resource.language should not be assumed to apply to the narrative automatically. If a language is specified, it should it also be specified on the div element in the html (see rules in HTML5 for information about the relationship between xml:lang and the html lang attribute).
    /// </summary>
    public List<CodeableConcept> Language { get; set; }
    /// <summary>
    /// Used for isolated representation of last page.
    /// </summary>
    public string LastPage { get; set; }
    /// <summary>
    /// Extension container element for LastPage
    /// </summary>
    public Element _LastPage { get; set; }
    /// <summary>
    /// Actual or approximate number of pages or screens.
    /// </summary>
    public string PageCount { get; set; }
    /// <summary>
    /// Extension container element for PageCount
    /// </summary>
    public Element _PageCount { get; set; }
    /// <summary>
    /// Used for full display of pagination.
    /// </summary>
    public string PageString { get; set; }
    /// <summary>
    /// Extension container element for PageString
    /// </summary>
    public Element _PageString { get; set; }
    /// <summary>
    /// The specific issue in which the cited article resides.
    /// </summary>
    public List<CitationPublicationFormPeriodicRelease> PeriodicRelease { get; set; }
    /// <summary>
    /// The collection the cited article is published in.
    /// </summary>
    public CitationPublicationFormPublishedIn PublishedIn { get; set; }
    /// <summary>
    /// Identify the medium/media in which the cited article is published, eg print, electronic or print-electronic.
    /// </summary>
    public CodeableConcept PublishingModel { get; set; }
    /// <summary>
    /// The date the article was last revised or updated in the database.
    /// </summary>
    public string RevisionDate { get; set; }
    /// <summary>
    /// Extension container element for RevisionDate
    /// </summary>
    public Element _RevisionDate { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (PublishingModel != null)
      {
        writer.WritePropertyName("publishingModel");
        PublishingModel.SerializeJson(writer, options);
      }

      if (PublishedIn != null)
      {
        writer.WritePropertyName("publishedIn");
        PublishedIn.SerializeJson(writer, options);
      }

      if ((PeriodicRelease != null) && (PeriodicRelease.Count != 0))
      {
        writer.WritePropertyName("periodicRelease");
        writer.WriteStartArray();

        foreach (CitationPublicationFormPeriodicRelease valPeriodicRelease in PeriodicRelease)
        {
          valPeriodicRelease.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ArticleDate))
      {
        writer.WriteString("articleDate", (string)ArticleDate!);
      }

      if (_ArticleDate != null)
      {
        writer.WritePropertyName("_articleDate");
        _ArticleDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RevisionDate))
      {
        writer.WriteString("revisionDate", (string)RevisionDate!);
      }

      if (_RevisionDate != null)
      {
        writer.WritePropertyName("_revisionDate");
        _RevisionDate.SerializeJson(writer, options);
      }

      if ((Language != null) && (Language.Count != 0))
      {
        writer.WritePropertyName("language");
        writer.WriteStartArray();

        foreach (CodeableConcept valLanguage in Language)
        {
          valLanguage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(PageString))
      {
        writer.WriteString("pageString", (string)PageString!);
      }

      if (_PageString != null)
      {
        writer.WritePropertyName("_pageString");
        _PageString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(FirstPage))
      {
        writer.WriteString("firstPage", (string)FirstPage!);
      }

      if (_FirstPage != null)
      {
        writer.WritePropertyName("_firstPage");
        _FirstPage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastPage))
      {
        writer.WriteString("lastPage", (string)LastPage!);
      }

      if (_LastPage != null)
      {
        writer.WritePropertyName("_lastPage");
        _LastPage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PageCount))
      {
        writer.WriteString("pageCount", (string)PageCount!);
      }

      if (_PageCount != null)
      {
        writer.WritePropertyName("_pageCount");
        _PageCount.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "articleDate":
          ArticleDate = reader.GetString();
          break;

        case "_articleDate":
          _ArticleDate = new fhirCsR4.Models.Element();
          _ArticleDate.DeserializeJson(ref reader, options);
          break;

        case "firstPage":
          FirstPage = reader.GetString();
          break;

        case "_firstPage":
          _FirstPage = new fhirCsR4.Models.Element();
          _FirstPage.DeserializeJson(ref reader, options);
          break;

        case "language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Language = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objLanguage = new fhirCsR4.Models.CodeableConcept();
            objLanguage.DeserializeJson(ref reader, options);
            Language.Add(objLanguage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Language.Count == 0)
          {
            Language = null;
          }

          break;

        case "lastPage":
          LastPage = reader.GetString();
          break;

        case "_lastPage":
          _LastPage = new fhirCsR4.Models.Element();
          _LastPage.DeserializeJson(ref reader, options);
          break;

        case "pageCount":
          PageCount = reader.GetString();
          break;

        case "_pageCount":
          _PageCount = new fhirCsR4.Models.Element();
          _PageCount.DeserializeJson(ref reader, options);
          break;

        case "pageString":
          PageString = reader.GetString();
          break;

        case "_pageString":
          _PageString = new fhirCsR4.Models.Element();
          _PageString.DeserializeJson(ref reader, options);
          break;

        case "periodicRelease":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PeriodicRelease = new List<CitationPublicationFormPeriodicRelease>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationPublicationFormPeriodicRelease objPeriodicRelease = new fhirCsR4.Models.CitationPublicationFormPeriodicRelease();
            objPeriodicRelease.DeserializeJson(ref reader, options);
            PeriodicRelease.Add(objPeriodicRelease);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PeriodicRelease.Count == 0)
          {
            PeriodicRelease = null;
          }

          break;

        case "publishedIn":
          PublishedIn = new fhirCsR4.Models.CitationPublicationFormPublishedIn();
          PublishedIn.DeserializeJson(ref reader, options);
          break;

        case "publishingModel":
          PublishingModel = new fhirCsR4.Models.CodeableConcept();
          PublishingModel.DeserializeJson(ref reader, options);
          break;

        case "revisionDate":
          RevisionDate = reader.GetString();
          break;

        case "_revisionDate":
          _RevisionDate = new fhirCsR4.Models.Element();
          _RevisionDate.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// For each keyword in the keyword list.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationKeywordListKeyword>))]
  public class CitationKeywordListKeyword : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Whether or not it is a major topic.
    /// </summary>
    public bool? MajorTopic { get; set; }
    /// <summary>
    /// The actual keyword.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (MajorTopic != null)
      {
        writer.WriteBoolean("majorTopic", (bool)MajorTopic!);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "majorTopic":
          MajorTopic = reader.GetBoolean();
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A list of words classified as keywords for specific use in search functions.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationKeywordList>))]
  public class CitationKeywordList : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// For each keyword in the keyword list.
    /// </summary>
    public List<CitationKeywordListKeyword> Keyword { get; set; }
    /// <summary>
    /// The entity responsible for the creation or maintenance of this keyword list.
    /// </summary>
    public string Owner { get; set; }
    /// <summary>
    /// Extension container element for Owner
    /// </summary>
    public Element _Owner { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Owner))
      {
        writer.WriteString("owner", (string)Owner!);
      }

      if (_Owner != null)
      {
        writer.WritePropertyName("_owner");
        _Owner.SerializeJson(writer, options);
      }

      if ((Keyword != null) && (Keyword.Count != 0))
      {
        writer.WritePropertyName("keyword");
        writer.WriteStartArray();

        foreach (CitationKeywordListKeyword valKeyword in Keyword)
        {
          valKeyword.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "keyword":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Keyword = new List<CitationKeywordListKeyword>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationKeywordListKeyword objKeyword = new fhirCsR4.Models.CitationKeywordListKeyword();
            objKeyword.DeserializeJson(ref reader, options);
            Keyword.Add(objKeyword);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Keyword.Count == 0)
          {
            Keyword = null;
          }

          break;

        case "owner":
          Owner = reader.GetString();
          break;

        case "_owner":
          _Owner = new fhirCsR4.Models.Element();
          _Owner.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Date of PubMed publication.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationMedlineDateOnPubMed>))]
  public class CitationMedlineDateOnPubMed : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// PubMed Publication Date.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// PubMed Publication Status.
    /// </summary>
    public string PublicationState { get; set; }
    /// <summary>
    /// Extension container element for PublicationState
    /// </summary>
    public Element _PublicationState { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(PublicationState))
      {
        writer.WriteString("publicationState", (string)PublicationState!);
      }

      if (_PublicationState != null)
      {
        writer.WritePropertyName("_publicationState");
        _PublicationState.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "publicationState":
          PublicationState = reader.GetString();
          break;

        case "_publicationState":
          _PublicationState = new fhirCsR4.Models.Element();
          _PublicationState.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Citation.medline.dateOnPubMed.publicationState field
  /// </summary>
  public static class CitationMedlineDateOnPubMedPublicationStateCodes {
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string EPUBLISH = "epublish";
    public const string PPUBLISH = "ppublish";
    public const string REVISED = "revised";
    public const string AHEADOFPRINT = "aheadofprint";
    public const string RETRACTED = "retracted";
    public const string ECOLLECTION = "ecollection";
    public const string PMC = "pmc";
    public const string PMCR = "pmcr";
    public const string PUBMED = "pubmed";
    public const string PUBMEDR = "pubmedr";
    public const string PREMEDLINE = "premedline";
    public const string MEDLINE = "medline";
    public const string MEDLINER = "medliner";
    public const string ENTREZ = "entrez";
    public const string PMC_RELEASE = "pmc-release";
  }
  /// <summary>
  /// PubMed has an algorithm for suggesting articles "related to" an index article.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationMedlineRelatedArticle>))]
  public class CitationMedlineRelatedArticle : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Citation string for related article.
    /// </summary>
    public string CitationMarkdown { get; set; }
    /// <summary>
    /// Extension container element for CitationMarkdown
    /// </summary>
    public Element _CitationMarkdown { get; set; }
    /// <summary>
    /// Citation Resource for related article.
    /// </summary>
    public Reference CitationReference { get; set; }
    /// <summary>
    /// Citation identifier for the related article.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (CitationReference != null)
      {
        writer.WritePropertyName("citationReference");
        CitationReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(CitationMarkdown))
      {
        writer.WriteString("citationMarkdown", (string)CitationMarkdown!);
      }

      if (_CitationMarkdown != null)
      {
        writer.WritePropertyName("_citationMarkdown");
        _CitationMarkdown.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "citationMarkdown":
          CitationMarkdown = reader.GetString();
          break;

        case "_citationMarkdown":
          _CitationMarkdown = new fhirCsR4.Models.Element();
          _CitationMarkdown.DeserializeJson(ref reader, options);
          break;

        case "citationReference":
          CitationReference = new fhirCsR4.Models.Reference();
          CitationReference.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// These elements are items with values assigned by MEDLINE or PubMed management.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CitationMedline>))]
  public class CitationMedline : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Completion date.
    /// </summary>
    public string DateCompleted { get; set; }
    /// <summary>
    /// Extension container element for DateCompleted
    /// </summary>
    public Element _DateCompleted { get; set; }
    /// <summary>
    /// Creation date.
    /// </summary>
    public string DateCreated { get; set; }
    /// <summary>
    /// Extension container element for DateCreated
    /// </summary>
    public Element _DateCreated { get; set; }
    /// <summary>
    /// Date of PubMed publication.
    /// </summary>
    public List<CitationMedlineDateOnPubMed> DateOnPubMed { get; set; }
    /// <summary>
    /// Revision date.
    /// </summary>
    public string DateRevised { get; set; }
    /// <summary>
    /// Extension container element for DateRevised
    /// </summary>
    public Element _DateRevised { get; set; }
    /// <summary>
    /// Used for owner.
    /// </summary>
    public string Owner { get; set; }
    /// <summary>
    /// Extension container element for Owner
    /// </summary>
    public Element _Owner { get; set; }
    /// <summary>
    /// Publication Status.
    /// </summary>
    public string PublicationState { get; set; }
    /// <summary>
    /// Extension container element for PublicationState
    /// </summary>
    public Element _PublicationState { get; set; }
    /// <summary>
    /// PubMed has an algorithm for suggesting articles "related to" an index article.
    /// </summary>
    public List<CitationMedlineRelatedArticle> RelatedArticle { get; set; }
    /// <summary>
    /// Used for status.
    /// </summary>
    public string State { get; set; }
    /// <summary>
    /// Extension container element for State
    /// </summary>
    public Element _State { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(State))
      {
        writer.WriteString("state", (string)State!);
      }

      if (_State != null)
      {
        writer.WritePropertyName("_state");
        _State.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Owner))
      {
        writer.WriteString("owner", (string)Owner!);
      }

      if (_Owner != null)
      {
        writer.WritePropertyName("_owner");
        _Owner.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DateCreated))
      {
        writer.WriteString("dateCreated", (string)DateCreated!);
      }

      if (_DateCreated != null)
      {
        writer.WritePropertyName("_dateCreated");
        _DateCreated.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DateCompleted))
      {
        writer.WriteString("dateCompleted", (string)DateCompleted!);
      }

      if (_DateCompleted != null)
      {
        writer.WritePropertyName("_dateCompleted");
        _DateCompleted.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DateRevised))
      {
        writer.WriteString("dateRevised", (string)DateRevised!);
      }

      if (_DateRevised != null)
      {
        writer.WritePropertyName("_dateRevised");
        _DateRevised.SerializeJson(writer, options);
      }

      if ((DateOnPubMed != null) && (DateOnPubMed.Count != 0))
      {
        writer.WritePropertyName("dateOnPubMed");
        writer.WriteStartArray();

        foreach (CitationMedlineDateOnPubMed valDateOnPubMed in DateOnPubMed)
        {
          valDateOnPubMed.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(PublicationState))
      {
        writer.WriteString("publicationState", (string)PublicationState!);
      }

      if (_PublicationState != null)
      {
        writer.WritePropertyName("_publicationState");
        _PublicationState.SerializeJson(writer, options);
      }

      if ((RelatedArticle != null) && (RelatedArticle.Count != 0))
      {
        writer.WritePropertyName("relatedArticle");
        writer.WriteStartArray();

        foreach (CitationMedlineRelatedArticle valRelatedArticle in RelatedArticle)
        {
          valRelatedArticle.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dateCompleted":
          DateCompleted = reader.GetString();
          break;

        case "_dateCompleted":
          _DateCompleted = new fhirCsR4.Models.Element();
          _DateCompleted.DeserializeJson(ref reader, options);
          break;

        case "dateCreated":
          DateCreated = reader.GetString();
          break;

        case "_dateCreated":
          _DateCreated = new fhirCsR4.Models.Element();
          _DateCreated.DeserializeJson(ref reader, options);
          break;

        case "dateOnPubMed":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DateOnPubMed = new List<CitationMedlineDateOnPubMed>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationMedlineDateOnPubMed objDateOnPubMed = new fhirCsR4.Models.CitationMedlineDateOnPubMed();
            objDateOnPubMed.DeserializeJson(ref reader, options);
            DateOnPubMed.Add(objDateOnPubMed);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DateOnPubMed.Count == 0)
          {
            DateOnPubMed = null;
          }

          break;

        case "dateRevised":
          DateRevised = reader.GetString();
          break;

        case "_dateRevised":
          _DateRevised = new fhirCsR4.Models.Element();
          _DateRevised.DeserializeJson(ref reader, options);
          break;

        case "owner":
          Owner = reader.GetString();
          break;

        case "_owner":
          _Owner = new fhirCsR4.Models.Element();
          _Owner.DeserializeJson(ref reader, options);
          break;

        case "publicationState":
          PublicationState = reader.GetString();
          break;

        case "_publicationState":
          _PublicationState = new fhirCsR4.Models.Element();
          _PublicationState.DeserializeJson(ref reader, options);
          break;

        case "relatedArticle":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedArticle = new List<CitationMedlineRelatedArticle>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationMedlineRelatedArticle objRelatedArticle = new fhirCsR4.Models.CitationMedlineRelatedArticle();
            objRelatedArticle.DeserializeJson(ref reader, options);
            RelatedArticle.Add(objRelatedArticle);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedArticle.Count == 0)
          {
            RelatedArticle = null;
          }

          break;

        case "state":
          State = reader.GetString();
          break;

        case "_state":
          _State = new fhirCsR4.Models.Element();
          _State.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Citation.medline.owner field
  /// </summary>
  public static class CitationMedlineOwnerCodes {
    public const string NLM = "NLM";
    public const string NASA = "NASA";
    public const string PIP = "PIP";
    public const string KIE = "KIE";
    public const string HSR = "HSR";
    public const string HMD = "HMD";
    public const string SIS = "SIS";
    public const string NOTNLM = "NOTNLM";
  }
  /// <summary>
  /// Code Values for the Citation.medline.publicationState field
  /// </summary>
  public static class CitationMedlinePublicationStateCodes {
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string EPUBLISH = "epublish";
    public const string PPUBLISH = "ppublish";
    public const string REVISED = "revised";
    public const string AHEADOFPRINT = "aheadofprint";
    public const string RETRACTED = "retracted";
    public const string ECOLLECTION = "ecollection";
    public const string PMC = "pmc";
    public const string PMCR = "pmcr";
    public const string PUBMED = "pubmed";
    public const string PUBMEDR = "pubmedr";
    public const string PREMEDLINE = "premedline";
    public const string MEDLINE = "medline";
    public const string MEDLINER = "medliner";
    public const string ENTREZ = "entrez";
    public const string PMC_RELEASE = "pmc-release";
  }
  /// <summary>
  /// Code Values for the Citation.medline.state field
  /// </summary>
  public static class CitationMedlineStateCodes {
    public const string COMPLETED = "Completed";
    public const string IN_PROCESS = "In-Process";
    public const string PUBMED_NOT_MEDLINE = "PubMed-not-MEDLINE";
    public const string IN_DATA_REVIEW = "In-Data-Review";
    public const string PUBLISHER = "Publisher";
    public const string MEDLINE = "MEDLINE";
    public const string OLDMEDLINE = "OLDMEDLINE";
  }
  /// <summary>
  /// The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Citation>))]
  public class Citation : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Citation";
    /// <summary>
    /// Publisher-provided summary of the article.
    /// </summary>
    public List<CitationAbstract> Abstract { get; set; }
    /// <summary>
    /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
    /// </summary>
    public string ApprovalDate { get; set; }
    /// <summary>
    /// Extension container element for ApprovalDate
    /// </summary>
    public Element _ApprovalDate { get; set; }
    /// <summary>
    /// The name of the article.
    /// </summary>
    public List<CitationArticleTitle> ArticleTitle { get; set; }
    /// <summary>
    /// Used for many classifiers including PublicationType, CitationSubset, MeshHeading, Chemical.
    /// </summary>
    public List<CodeableConcept> Classifier { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
    /// </summary>
    public CitationContributorship Contributorship { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the citation. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// When the citation was cited.
    /// </summary>
    public string DateCited { get; set; }
    /// <summary>
    /// Extension container element for DateCited
    /// </summary>
    public Element _DateCited { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the citation was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the citation as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the citation is presumed to be the predominant language in the place the citation was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The effective period for a citation  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// Allows filtering of citations that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// May include DOI, PMID, PMCID, etc. This element will contain unique identifiers that support de-duplication of citations. This identifier can be valid for only one citation resource.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// It may be possible for the citation to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// A list of words classified as keywords for specific use in search functions.
    /// </summary>
    public List<CitationKeywordList> KeywordList { get; set; }
    /// <summary>
    /// If specified, this date follows the original approval date.
    /// </summary>
    public string LastReviewDate { get; set; }
    /// <summary>
    /// Extension container element for LastReviewDate
    /// </summary>
    public Element _LastReviewDate { get; set; }
    /// <summary>
    /// These elements are items with values assigned by MEDLINE or PubMed management.
    /// </summary>
    public CitationMedline Medline { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Used for general notes and annotations not coded elsewhere.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// A common use is a journal article with a publication date and pagination for a print version and a different publication date for the online version of the same article.
    /// </summary>
    public List<CitationPublicationForm> PublicationForm { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the citation is the organization or individual primarily responsible for the maintenance and upkeep of the citation. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the citation. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the citation. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this citation.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Link or citation to artifact associated with the referenced material.
    /// </summary>
    public List<RelatedArtifact> RelatedArtifact { get; set; }
    /// <summary>
    /// May include trial registry identifiers, e.g. NCT04372602 from clinicaltrials.gov. This identifier can be valid for multiple citation resources.
    /// </summary>
    public List<Identifier> RelatedIdentifier { get; set; }
    /// <summary>
    /// Allows filtering of summarys s that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// A human-readable display of the citation.
    /// </summary>
    public List<CitationSummary> Summary { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred. Multiple instances may share the same URL if they have a distinct version.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// An alternative variant of the citation.
    /// </summary>
    public CitationVariantCitation VariantCitation { get; set; }
    /// <summary>
    /// There may be different citation instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the citation with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Used for any URL for the article cited.
    /// </summary>
    public List<CitationWebLocation> WebLocation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedIdentifier != null) && (RelatedIdentifier.Count != 0))
      {
        writer.WritePropertyName("relatedIdentifier");
        writer.WriteStartArray();

        foreach (Identifier valRelatedIdentifier in RelatedIdentifier)
        {
          valRelatedIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ApprovalDate))
      {
        writer.WriteString("approvalDate", (string)ApprovalDate!);
      }

      if (_ApprovalDate != null)
      {
        writer.WritePropertyName("_approvalDate");
        _ApprovalDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastReviewDate))
      {
        writer.WriteString("lastReviewDate", (string)LastReviewDate!);
      }

      if (_LastReviewDate != null)
      {
        writer.WritePropertyName("_lastReviewDate");
        _LastReviewDate.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if ((Summary != null) && (Summary.Count != 0))
      {
        writer.WritePropertyName("summary");
        writer.WriteStartArray();

        foreach (CitationSummary valSummary in Summary)
        {
          valSummary.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(DateCited))
      {
        writer.WriteString("dateCited", (string)DateCited!);
      }

      if (_DateCited != null)
      {
        writer.WritePropertyName("_dateCited");
        _DateCited.SerializeJson(writer, options);
      }

      if (VariantCitation != null)
      {
        writer.WritePropertyName("variantCitation");
        VariantCitation.SerializeJson(writer, options);
      }

      if ((ArticleTitle != null) && (ArticleTitle.Count != 0))
      {
        writer.WritePropertyName("articleTitle");
        writer.WriteStartArray();

        foreach (CitationArticleTitle valArticleTitle in ArticleTitle)
        {
          valArticleTitle.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((WebLocation != null) && (WebLocation.Count != 0))
      {
        writer.WritePropertyName("webLocation");
        writer.WriteStartArray();

        foreach (CitationWebLocation valWebLocation in WebLocation)
        {
          valWebLocation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Abstract != null) && (Abstract.Count != 0))
      {
        writer.WritePropertyName("abstract");
        writer.WriteStartArray();

        foreach (CitationAbstract valAbstract in Abstract)
        {
          valAbstract.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Contributorship != null)
      {
        writer.WritePropertyName("contributorship");
        Contributorship.SerializeJson(writer, options);
      }

      if ((PublicationForm != null) && (PublicationForm.Count != 0))
      {
        writer.WritePropertyName("publicationForm");
        writer.WriteStartArray();

        foreach (CitationPublicationForm valPublicationForm in PublicationForm)
        {
          valPublicationForm.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Classifier != null) && (Classifier.Count != 0))
      {
        writer.WritePropertyName("classifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valClassifier in Classifier)
        {
          valClassifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((KeywordList != null) && (KeywordList.Count != 0))
      {
        writer.WritePropertyName("keywordList");
        writer.WriteStartArray();

        foreach (CitationKeywordList valKeywordList in KeywordList)
        {
          valKeywordList.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelatedArtifact != null) && (RelatedArtifact.Count != 0))
      {
        writer.WritePropertyName("relatedArtifact");
        writer.WriteStartArray();

        foreach (RelatedArtifact valRelatedArtifact in RelatedArtifact)
        {
          valRelatedArtifact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Medline != null)
      {
        writer.WritePropertyName("medline");
        Medline.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "abstract":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Abstract = new List<CitationAbstract>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationAbstract objAbstract = new fhirCsR4.Models.CitationAbstract();
            objAbstract.DeserializeJson(ref reader, options);
            Abstract.Add(objAbstract);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Abstract.Count == 0)
          {
            Abstract = null;
          }

          break;

        case "approvalDate":
          ApprovalDate = reader.GetString();
          break;

        case "_approvalDate":
          _ApprovalDate = new fhirCsR4.Models.Element();
          _ApprovalDate.DeserializeJson(ref reader, options);
          break;

        case "articleTitle":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ArticleTitle = new List<CitationArticleTitle>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationArticleTitle objArticleTitle = new fhirCsR4.Models.CitationArticleTitle();
            objArticleTitle.DeserializeJson(ref reader, options);
            ArticleTitle.Add(objArticleTitle);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ArticleTitle.Count == 0)
          {
            ArticleTitle = null;
          }

          break;

        case "classifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objClassifier = new fhirCsR4.Models.CodeableConcept();
            objClassifier.DeserializeJson(ref reader, options);
            Classifier.Add(objClassifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classifier.Count == 0)
          {
            Classifier = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactDetail objContact = new fhirCsR4.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "contributorship":
          Contributorship = new fhirCsR4.Models.CitationContributorship();
          Contributorship.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "dateCited":
          DateCited = reader.GetString();
          break;

        case "_dateCited":
          _DateCited = new fhirCsR4.Models.Element();
          _DateCited.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR4.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objJurisdiction = new fhirCsR4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "keywordList":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          KeywordList = new List<CitationKeywordList>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationKeywordList objKeywordList = new fhirCsR4.Models.CitationKeywordList();
            objKeywordList.DeserializeJson(ref reader, options);
            KeywordList.Add(objKeywordList);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (KeywordList.Count == 0)
          {
            KeywordList = null;
          }

          break;

        case "lastReviewDate":
          LastReviewDate = reader.GetString();
          break;

        case "_lastReviewDate":
          _LastReviewDate = new fhirCsR4.Models.Element();
          _LastReviewDate.DeserializeJson(ref reader, options);
          break;

        case "medline":
          Medline = new fhirCsR4.Models.CitationMedline();
          Medline.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "publicationForm":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PublicationForm = new List<CitationPublicationForm>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationPublicationForm objPublicationForm = new fhirCsR4.Models.CitationPublicationForm();
            objPublicationForm.DeserializeJson(ref reader, options);
            PublicationForm.Add(objPublicationForm);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PublicationForm.Count == 0)
          {
            PublicationForm = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR4.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR4.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "relatedArtifact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedArtifact = new List<RelatedArtifact>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.RelatedArtifact objRelatedArtifact = new fhirCsR4.Models.RelatedArtifact();
            objRelatedArtifact.DeserializeJson(ref reader, options);
            RelatedArtifact.Add(objRelatedArtifact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedArtifact.Count == 0)
          {
            RelatedArtifact = null;
          }

          break;

        case "relatedIdentifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelatedIdentifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objRelatedIdentifier = new fhirCsR4.Models.Identifier();
            objRelatedIdentifier.DeserializeJson(ref reader, options);
            RelatedIdentifier.Add(objRelatedIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelatedIdentifier.Count == 0)
          {
            RelatedIdentifier = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "summary":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Summary = new List<CitationSummary>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationSummary objSummary = new fhirCsR4.Models.CitationSummary();
            objSummary.DeserializeJson(ref reader, options);
            Summary.Add(objSummary);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Summary.Count == 0)
          {
            Summary = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.UsageContext objUseContext = new fhirCsR4.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "variantCitation":
          VariantCitation = new fhirCsR4.Models.CitationVariantCitation();
          VariantCitation.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        case "webLocation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          WebLocation = new List<CitationWebLocation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CitationWebLocation objWebLocation = new fhirCsR4.Models.CitationWebLocation();
            objWebLocation.DeserializeJson(ref reader, options);
            WebLocation.Add(objWebLocation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (WebLocation.Count == 0)
          {
            WebLocation = null;
          }

          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Citation.status field
  /// </summary>
  public static class CitationStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
