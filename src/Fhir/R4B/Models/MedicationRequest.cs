// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// If populating this element, either the quantity or the duration must be included.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MedicationRequestDispenseRequestInitialFill>))]
  public class MedicationRequestDispenseRequestInitialFill : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The length of time that the first dispense is expected to last.
    /// </summary>
    public Duration Duration { get; set; }
    /// <summary>
    /// The amount or quantity to provide as part of the first dispense.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (Duration != null)
      {
        writer.WritePropertyName("duration");
        Duration.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "duration":
          Duration = new fhirCsR4.Models.Duration();
          Duration.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MedicationRequestDispenseRequest>))]
  public class MedicationRequestDispenseRequest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The minimum period of time that must occur between dispenses of the medication.
    /// </summary>
    public Duration DispenseInterval { get; set; }
    /// <summary>
    /// In some situations, this attribute may be used instead of quantity to identify the amount supplied by how long it is expected to last, rather than the physical quantity issued, e.g. 90 days supply of medication (based on an ordered dosage). When possible, it is always better to specify quantity, as this tends to be more precise. expectedSupplyDuration will always be an estimate that can be influenced by external factors.
    /// </summary>
    public Duration ExpectedSupplyDuration { get; set; }
    /// <summary>
    /// If populating this element, either the quantity or the duration must be included.
    /// </summary>
    public MedicationRequestDispenseRequestInitialFill InitialFill { get; set; }
    /// <summary>
    /// If displaying "number of authorized fills", add 1 to this number.
    /// </summary>
    public uint? NumberOfRepeatsAllowed { get; set; }
    /// <summary>
    /// Indicates the intended dispensing Organization specified by the prescriber.
    /// </summary>
    public Reference Performer { get; set; }
    /// <summary>
    /// The amount that is to be dispensed for one fill.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// It reflects the prescribers' perspective for the validity of the prescription. Dispenses must not be made against the prescription outside of this period. The lower-bound of the Dispensing Window signifies the earliest date that the prescription can be filled for the first time. If an upper-bound is not specified then the Prescription is open-ended or will default to a stale-date based on regulations.
    /// </summary>
    public Period ValidityPeriod { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (InitialFill != null)
      {
        writer.WritePropertyName("initialFill");
        InitialFill.SerializeJson(writer, options);
      }

      if (DispenseInterval != null)
      {
        writer.WritePropertyName("dispenseInterval");
        DispenseInterval.SerializeJson(writer, options);
      }

      if (ValidityPeriod != null)
      {
        writer.WritePropertyName("validityPeriod");
        ValidityPeriod.SerializeJson(writer, options);
      }

      if (NumberOfRepeatsAllowed != null)
      {
        writer.WriteNumber("numberOfRepeatsAllowed", (uint)NumberOfRepeatsAllowed!);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (ExpectedSupplyDuration != null)
      {
        writer.WritePropertyName("expectedSupplyDuration");
        ExpectedSupplyDuration.SerializeJson(writer, options);
      }

      if (Performer != null)
      {
        writer.WritePropertyName("performer");
        Performer.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "dispenseInterval":
          DispenseInterval = new fhirCsR4.Models.Duration();
          DispenseInterval.DeserializeJson(ref reader, options);
          break;

        case "expectedSupplyDuration":
          ExpectedSupplyDuration = new fhirCsR4.Models.Duration();
          ExpectedSupplyDuration.DeserializeJson(ref reader, options);
          break;

        case "initialFill":
          InitialFill = new fhirCsR4.Models.MedicationRequestDispenseRequestInitialFill();
          InitialFill.DeserializeJson(ref reader, options);
          break;

        case "numberOfRepeatsAllowed":
          NumberOfRepeatsAllowed = reader.GetUInt32();
          break;

        case "performer":
          Performer = new fhirCsR4.Models.Reference();
          Performer.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "validityPeriod":
          ValidityPeriod = new fhirCsR4.Models.Period();
          ValidityPeriod.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MedicationRequestSubstitution>))]
  public class MedicationRequestSubstitution : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
    /// </summary>
    public bool? AllowedBoolean { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because whether substitution is allow or not, it cannot be ignored.
    /// </summary>
    public CodeableConcept AllowedCodeableConcept { get; set; }
    /// <summary>
    /// Indicates the reason for the substitution, or why substitution must or must not be performed.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (AllowedBoolean != null)
      {
        writer.WriteBoolean("allowedBoolean", (bool)AllowedBoolean!);
      }

      if (AllowedCodeableConcept != null)
      {
        writer.WritePropertyName("allowedCodeableConcept");
        AllowedCodeableConcept.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "allowedBoolean":
          AllowedBoolean = reader.GetBoolean();
          break;

        case "allowedCodeableConcept":
          AllowedCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          AllowedCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR4.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MedicationRequest>))]
  public class MedicationRequest : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MedicationRequest";
    /// <summary>
    /// The date (and perhaps time) when the prescription was initially written or authored on.
    /// </summary>
    public string AuthoredOn { get; set; }
    /// <summary>
    /// Extension container element for AuthoredOn
    /// </summary>
    public Element _AuthoredOn { get; set; }
    /// <summary>
    /// A plan or request that is fulfilled in whole or in part by this medication request.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// The category can be used to include where the medication is expected to be consumed or other types of requests.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// This attribute should not be confused with the protocol of the medication.
    /// </summary>
    public CodeableConcept CourseOfTherapyType { get; set; }
    /// <summary>
    /// This element can include a detected issue that has been identified either by a decision support system or by a clinician and may include information on the steps that were taken to address the issue.
    /// </summary>
    public List<Reference> DetectedIssue { get; set; }
    /// <summary>
    /// Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
    /// </summary>
    public MedicationRequestDispenseRequest DispenseRequest { get; set; }
    /// <summary>
    /// If do not perform is not specified, the request is a positive request e.g. "do perform".
    /// </summary>
    public bool? DoNotPerform { get; set; }
    /// <summary>
    /// There are examples where a medication request may include the option of an oral dose or an Intravenous or Intramuscular dose.  For example, "Ondansetron 8mg orally or IV twice a day as needed for nausea" or "Compazine® (prochlorperazine) 5-10mg PO or 25mg PR bid prn nausea or vomiting".  In these cases, two medication requests would be created that could be grouped together.  The decision on which dose and route of administration to use is based on the patient's condition at the time the dose is needed.
    /// </summary>
    public List<Dosage> DosageInstruction { get; set; }
    /// <summary>
    /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter."    If there is a need to link to episodes of care they will be handled with an extension.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// This might not include provenances for all versions of the request – only those deemed “relevant” or important. This SHALL NOT include the provenance associated with this current version of the resource. (If that provenance is deemed to be a “relevant” change, it will need to be added as part of a later update. Until then, it can be queried directly as the provenance that points to this version using _revinclude All Provenances should have some historical version of this Request as their subject.).
    /// </summary>
    public List<Reference> EventHistory { get; set; }
    /// <summary>
    /// A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
    /// </summary>
    public Identifier GroupIdentifier { get; set; }
    /// <summary>
    /// This is a business identifier, not a resource identifier.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
    /// </summary>
    public List<string> InstantiatesCanonical { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesCanonical
    /// </summary>
    public List<Element> _InstantiatesCanonical { get; set; }
    /// <summary>
    /// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
    /// </summary>
    public List<string> InstantiatesUri { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesUri
    /// </summary>
    public List<Element> _InstantiatesUri { get; set; }
    /// <summary>
    /// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
    /// </summary>
    public List<Reference> Insurance { get; set; }
    /// <summary>
    /// It is expected that the type of requester will be restricted for different stages of a MedicationRequest.  For example, Proposals can be created by a patient, relatedPerson, Practitioner or Device.  Plans can be created by Practitioners, Patients, RelatedPersons and Devices.  Original orders can be created by a Practitioner only.
    /// An instance-order is an instantiation of a request or order and may be used to populate Medication Administration Record.
    /// This element is labeled as a modifier because the intent alters when and how the resource is actually applicable.
    /// </summary>
    public string Intent { get; set; }
    /// <summary>
    /// Extension container element for Intent
    /// </summary>
    public Element _Intent { get; set; }
    /// <summary>
    /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the Medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource.
    /// </summary>
    public CodeableConcept MedicationCodeableConcept { get; set; }
    /// <summary>
    /// If only a code is specified, then it needs to be a code for a specific product. If more information is required, then the use of the Medication resource is recommended.  For example, if you require form or lot number or if the medication is compounded or extemporaneously prepared, then you must reference the Medication resource.
    /// </summary>
    public Reference MedicationReference { get; set; }
    /// <summary>
    /// Extra information about the prescription that could not be conveyed by the other attributes.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
    /// </summary>
    public Reference Performer { get; set; }
    /// <summary>
    /// If specified without indicating a performer, this indicates that the performer must be of the specified type. If specified with a performer then it indicates the requirements of the performer if the designated performer is not available.
    /// </summary>
    public CodeableConcept PerformerType { get; set; }
    /// <summary>
    /// Indicates how quickly the Medication Request should be addressed with respect to other requests.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// A link to a resource representing an earlier order related order or prescription.
    /// </summary>
    public Reference PriorPrescription { get; set; }
    /// <summary>
    /// This could be a diagnosis code. If a full condition record exists or additional detail is needed, use reasonReference.
    /// </summary>
    public List<CodeableConcept> ReasonCode { get; set; }
    /// <summary>
    /// This is a reference to a condition or observation that is the reason for the medication order.  If only a code exists, use reasonCode.
    /// </summary>
    public List<Reference> ReasonReference { get; set; }
    /// <summary>
    /// The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
    /// </summary>
    public Reference Recorder { get; set; }
    /// <summary>
    /// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
    /// </summary>
    public bool? ReportedBoolean { get; set; }
    /// <summary>
    /// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
    /// </summary>
    public Reference ReportedReference { get; set; }
    /// <summary>
    /// The individual, organization, or device that initiated the request and has responsibility for its activation.
    /// </summary>
    public Reference Requester { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This is generally only used for "exception" statuses such as "suspended" or "cancelled". The reason why the MedicationRequest was created at all is captured in reasonCode, not here.
    /// </summary>
    public CodeableConcept StatusReason { get; set; }
    /// <summary>
    /// The subject on a medication request is mandatory.  For the secondary use case where the actual subject is not provided, there still must be an anonymized subject specified.
    /// </summary>
    public Reference Subject { get; set; }
    /// <summary>
    /// Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
    /// </summary>
    public MedicationRequestSubstitution Substitution { get; set; }
    /// <summary>
    /// Include additional information (for example, patient height and weight) that supports the ordering of the medication.
    /// </summary>
    public List<Reference> SupportingInformation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (StatusReason != null)
      {
        writer.WritePropertyName("statusReason");
        StatusReason.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Intent))
      {
        writer.WriteString("intent", (string)Intent!);
      }

      if (_Intent != null)
      {
        writer.WritePropertyName("_intent");
        _Intent.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if (DoNotPerform != null)
      {
        writer.WriteBoolean("doNotPerform", (bool)DoNotPerform!);
      }

      if (ReportedBoolean != null)
      {
        writer.WriteBoolean("reportedBoolean", (bool)ReportedBoolean!);
      }

      if (ReportedReference != null)
      {
        writer.WritePropertyName("reportedReference");
        ReportedReference.SerializeJson(writer, options);
      }

      if (MedicationCodeableConcept != null)
      {
        writer.WritePropertyName("medicationCodeableConcept");
        MedicationCodeableConcept.SerializeJson(writer, options);
      }

      if (MedicationReference != null)
      {
        writer.WritePropertyName("medicationReference");
        MedicationReference.SerializeJson(writer, options);
      }

      if (Subject != null)
      {
        writer.WritePropertyName("subject");
        Subject.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if ((SupportingInformation != null) && (SupportingInformation.Count != 0))
      {
        writer.WritePropertyName("supportingInformation");
        writer.WriteStartArray();

        foreach (Reference valSupportingInformation in SupportingInformation)
        {
          valSupportingInformation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(AuthoredOn))
      {
        writer.WriteString("authoredOn", (string)AuthoredOn!);
      }

      if (_AuthoredOn != null)
      {
        writer.WritePropertyName("_authoredOn");
        _AuthoredOn.SerializeJson(writer, options);
      }

      if (Requester != null)
      {
        writer.WritePropertyName("requester");
        Requester.SerializeJson(writer, options);
      }

      if (Performer != null)
      {
        writer.WritePropertyName("performer");
        Performer.SerializeJson(writer, options);
      }

      if (PerformerType != null)
      {
        writer.WritePropertyName("performerType");
        PerformerType.SerializeJson(writer, options);
      }

      if (Recorder != null)
      {
        writer.WritePropertyName("recorder");
        Recorder.SerializeJson(writer, options);
      }

      if ((ReasonCode != null) && (ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valReasonCode in ReasonCode)
        {
          valReasonCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReasonReference != null) && (ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();

        foreach (Reference valReasonReference in ReasonReference)
        {
          valReasonReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((InstantiatesCanonical != null) && (InstantiatesCanonical.Count != 0))
      {
        writer.WritePropertyName("instantiatesCanonical");
        writer.WriteStartArray();

        foreach (string valInstantiatesCanonical in InstantiatesCanonical)
        {
          writer.WriteStringValue(valInstantiatesCanonical);
        }

        writer.WriteEndArray();
      }

      if ((_InstantiatesCanonical != null) && (_InstantiatesCanonical.Count != 0))
      {
        writer.WritePropertyName("_instantiatesCanonical");
        writer.WriteStartArray();

        foreach (Element val_InstantiatesCanonical in _InstantiatesCanonical)
        {
          val_InstantiatesCanonical.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((InstantiatesUri != null) && (InstantiatesUri.Count != 0))
      {
        writer.WritePropertyName("instantiatesUri");
        writer.WriteStartArray();

        foreach (string valInstantiatesUri in InstantiatesUri)
        {
          writer.WriteStringValue(valInstantiatesUri);
        }

        writer.WriteEndArray();
      }

      if ((_InstantiatesUri != null) && (_InstantiatesUri.Count != 0))
      {
        writer.WritePropertyName("_instantiatesUri");
        writer.WriteStartArray();

        foreach (Element val_InstantiatesUri in _InstantiatesUri)
        {
          val_InstantiatesUri.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (GroupIdentifier != null)
      {
        writer.WritePropertyName("groupIdentifier");
        GroupIdentifier.SerializeJson(writer, options);
      }

      if (CourseOfTherapyType != null)
      {
        writer.WritePropertyName("courseOfTherapyType");
        CourseOfTherapyType.SerializeJson(writer, options);
      }

      if ((Insurance != null) && (Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();

        foreach (Reference valInsurance in Insurance)
        {
          valInsurance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((DosageInstruction != null) && (DosageInstruction.Count != 0))
      {
        writer.WritePropertyName("dosageInstruction");
        writer.WriteStartArray();

        foreach (Dosage valDosageInstruction in DosageInstruction)
        {
          valDosageInstruction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DispenseRequest != null)
      {
        writer.WritePropertyName("dispenseRequest");
        DispenseRequest.SerializeJson(writer, options);
      }

      if (Substitution != null)
      {
        writer.WritePropertyName("substitution");
        Substitution.SerializeJson(writer, options);
      }

      if (PriorPrescription != null)
      {
        writer.WritePropertyName("priorPrescription");
        PriorPrescription.SerializeJson(writer, options);
      }

      if ((DetectedIssue != null) && (DetectedIssue.Count != 0))
      {
        writer.WritePropertyName("detectedIssue");
        writer.WriteStartArray();

        foreach (Reference valDetectedIssue in DetectedIssue)
        {
          valDetectedIssue.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((EventHistory != null) && (EventHistory.Count != 0))
      {
        writer.WritePropertyName("eventHistory");
        writer.WriteStartArray();

        foreach (Reference valEventHistory in EventHistory)
        {
          valEventHistory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authoredOn":
          AuthoredOn = reader.GetString();
          break;

        case "_authoredOn":
          _AuthoredOn = new fhirCsR4.Models.Element();
          _AuthoredOn.DeserializeJson(ref reader, options);
          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objBasedOn = new fhirCsR4.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objCategory = new fhirCsR4.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "courseOfTherapyType":
          CourseOfTherapyType = new fhirCsR4.Models.CodeableConcept();
          CourseOfTherapyType.DeserializeJson(ref reader, options);
          break;

        case "detectedIssue":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DetectedIssue = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objDetectedIssue = new fhirCsR4.Models.Reference();
            objDetectedIssue.DeserializeJson(ref reader, options);
            DetectedIssue.Add(objDetectedIssue);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DetectedIssue.Count == 0)
          {
            DetectedIssue = null;
          }

          break;

        case "dispenseRequest":
          DispenseRequest = new fhirCsR4.Models.MedicationRequestDispenseRequest();
          DispenseRequest.DeserializeJson(ref reader, options);
          break;

        case "doNotPerform":
          DoNotPerform = reader.GetBoolean();
          break;

        case "dosageInstruction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DosageInstruction = new List<Dosage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Dosage objDosageInstruction = new fhirCsR4.Models.Dosage();
            objDosageInstruction.DeserializeJson(ref reader, options);
            DosageInstruction.Add(objDosageInstruction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DosageInstruction.Count == 0)
          {
            DosageInstruction = null;
          }

          break;

        case "encounter":
          Encounter = new fhirCsR4.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "eventHistory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          EventHistory = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objEventHistory = new fhirCsR4.Models.Reference();
            objEventHistory.DeserializeJson(ref reader, options);
            EventHistory.Add(objEventHistory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (EventHistory.Count == 0)
          {
            EventHistory = null;
          }

          break;

        case "groupIdentifier":
          GroupIdentifier = new fhirCsR4.Models.Identifier();
          GroupIdentifier.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesCanonical = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesCanonical.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesCanonical.Count == 0)
          {
            InstantiatesCanonical = null;
          }

          break;

        case "_instantiatesCanonical":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesCanonical = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_InstantiatesCanonical = new fhirCsR4.Models.Element();
            obj_InstantiatesCanonical.DeserializeJson(ref reader, options);
            _InstantiatesCanonical.Add(obj_InstantiatesCanonical);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesCanonical.Count == 0)
          {
            _InstantiatesCanonical = null;
          }

          break;

        case "instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InstantiatesUri = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InstantiatesUri.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InstantiatesUri.Count == 0)
          {
            InstantiatesUri = null;
          }

          break;

        case "_instantiatesUri":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _InstantiatesUri = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_InstantiatesUri = new fhirCsR4.Models.Element();
            obj_InstantiatesUri.DeserializeJson(ref reader, options);
            _InstantiatesUri.Add(obj_InstantiatesUri);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_InstantiatesUri.Count == 0)
          {
            _InstantiatesUri = null;
          }

          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Insurance = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objInsurance = new fhirCsR4.Models.Reference();
            objInsurance.DeserializeJson(ref reader, options);
            Insurance.Add(objInsurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Insurance.Count == 0)
          {
            Insurance = null;
          }

          break;

        case "intent":
          Intent = reader.GetString();
          break;

        case "_intent":
          _Intent = new fhirCsR4.Models.Element();
          _Intent.DeserializeJson(ref reader, options);
          break;

        case "medicationCodeableConcept":
          MedicationCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          MedicationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "medicationReference":
          MedicationReference = new fhirCsR4.Models.Reference();
          MedicationReference.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "performer":
          Performer = new fhirCsR4.Models.Reference();
          Performer.DeserializeJson(ref reader, options);
          break;

        case "performerType":
          PerformerType = new fhirCsR4.Models.CodeableConcept();
          PerformerType.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR4.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "priorPrescription":
          PriorPrescription = new fhirCsR4.Models.Reference();
          PriorPrescription.DeserializeJson(ref reader, options);
          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objReasonCode = new fhirCsR4.Models.CodeableConcept();
            objReasonCode.DeserializeJson(ref reader, options);
            ReasonCode.Add(objReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonCode.Count == 0)
          {
            ReasonCode = null;
          }

          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objReasonReference = new fhirCsR4.Models.Reference();
            objReasonReference.DeserializeJson(ref reader, options);
            ReasonReference.Add(objReasonReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonReference.Count == 0)
          {
            ReasonReference = null;
          }

          break;

        case "recorder":
          Recorder = new fhirCsR4.Models.Reference();
          Recorder.DeserializeJson(ref reader, options);
          break;

        case "reportedBoolean":
          ReportedBoolean = reader.GetBoolean();
          break;

        case "reportedReference":
          ReportedReference = new fhirCsR4.Models.Reference();
          ReportedReference.DeserializeJson(ref reader, options);
          break;

        case "requester":
          Requester = new fhirCsR4.Models.Reference();
          Requester.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          StatusReason = new fhirCsR4.Models.CodeableConcept();
          StatusReason.DeserializeJson(ref reader, options);
          break;

        case "subject":
          Subject = new fhirCsR4.Models.Reference();
          Subject.DeserializeJson(ref reader, options);
          break;

        case "substitution":
          Substitution = new fhirCsR4.Models.MedicationRequestSubstitution();
          Substitution.DeserializeJson(ref reader, options);
          break;

        case "supportingInformation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInformation = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSupportingInformation = new fhirCsR4.Models.Reference();
            objSupportingInformation.DeserializeJson(ref reader, options);
            SupportingInformation.Add(objSupportingInformation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInformation.Count == 0)
          {
            SupportingInformation = null;
          }

          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MedicationRequest.intent field
  /// </summary>
  public static class MedicationRequestIntentCodes {
    public const string PROPOSAL = "proposal";
    public const string PLAN = "plan";
    public const string ORDER = "order";
    public const string ORIGINAL_ORDER = "original-order";
    public const string REFLEX_ORDER = "reflex-order";
    public const string FILLER_ORDER = "filler-order";
    public const string INSTANCE_ORDER = "instance-order";
    public const string OPTION = "option";
  }
  /// <summary>
  /// Code Values for the MedicationRequest.priority field
  /// </summary>
  public static class MedicationRequestPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string ASAP = "asap";
    public const string STAT = "stat";
  }
  /// <summary>
  /// Code Values for the MedicationRequest.status field
  /// </summary>
  public static class MedicationRequestStatusCodes {
    public const string ACTIVE = "active";
    public const string ON_HOLD = "on-hold";
    public const string CANCELLED = "cancelled";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string STOPPED = "stopped";
    public const string DRAFT = "draft";
    public const string UNKNOWN = "unknown";
  }
}
