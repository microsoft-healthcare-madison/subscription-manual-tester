// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractContentDefinition>))]
  public class ContractContentDefinition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// The date (and optionally time) when the contract was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.
    /// </summary>
    public string PublicationDate { get; set; }
    /// <summary>
    /// Extension container element for PublicationDate
    /// </summary>
    public Element _PublicationDate { get; set; }
    /// <summary>
    /// amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated.
    /// </summary>
    public string PublicationStatus { get; set; }
    /// <summary>
    /// Extension container element for PublicationStatus
    /// </summary>
    public Element _PublicationStatus { get; set; }
    /// <summary>
    /// The  individual or organization that published the Contract precursor content.
    /// </summary>
    public Reference Publisher { get; set; }
    /// <summary>
    /// Detailed Precusory content type.
    /// </summary>
    public CodeableConcept SubType { get; set; }
    /// <summary>
    /// Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (SubType != null)
      {
        writer.WritePropertyName("subType");
        SubType.SerializeJson(writer, options);
      }

      if (Publisher != null)
      {
        writer.WritePropertyName("publisher");
        Publisher.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PublicationDate))
      {
        writer.WriteString("publicationDate", (string)PublicationDate!);
      }

      if (_PublicationDate != null)
      {
        writer.WritePropertyName("_publicationDate");
        _PublicationDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PublicationStatus))
      {
        writer.WriteString("publicationStatus", (string)PublicationStatus!);
      }

      if (_PublicationStatus != null)
      {
        writer.WritePropertyName("_publicationStatus");
        _PublicationStatus.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "publicationDate":
          PublicationDate = reader.GetString();
          break;

        case "_publicationDate":
          _PublicationDate = new fhirCsR4.Models.Element();
          _PublicationDate.DeserializeJson(ref reader, options);
          break;

        case "publicationStatus":
          PublicationStatus = reader.GetString();
          break;

        case "_publicationStatus":
          _PublicationStatus = new fhirCsR4.Models.Element();
          _PublicationStatus.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = new fhirCsR4.Models.Reference();
          Publisher.DeserializeJson(ref reader, options);
          break;

        case "subType":
          SubType = new fhirCsR4.Models.CodeableConcept();
          SubType.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Contract.contentDefinition.publicationStatus field
  /// </summary>
  public static class ContractContentDefinitionPublicationStatusCodes {
    public const string AMENDED = "amended";
    public const string APPENDED = "appended";
    public const string CANCELLED = "cancelled";
    public const string DISPUTED = "disputed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string EXECUTABLE = "executable";
    public const string EXECUTED = "executed";
    public const string NEGOTIABLE = "negotiable";
    public const string OFFERED = "offered";
    public const string POLICY = "policy";
    public const string REJECTED = "rejected";
    public const string RENEWED = "renewed";
    public const string REVOKED = "revoked";
    public const string RESOLVED = "resolved";
    public const string TERMINATED = "terminated";
  }
  /// <summary>
  /// Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTermSecurityLabel>))]
  public class ContractTermSecurityLabel : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Security label privacy tag that species the applicable privacy and security policies governing this term and/or term elements.
    /// </summary>
    public List<Coding> Category { get; set; }
    /// <summary>
    /// Security label privacy tag that species the level of confidentiality protection required for this term and/or term elements.
    /// </summary>
    public Coding Classification { get; set; }
    /// <summary>
    /// Security label privacy tag that species the manner in which term and/or term elements are to be protected.
    /// </summary>
    public List<Coding> Control { get; set; }
    /// <summary>
    /// Number used to link this term or term element to the applicable Security Label.
    /// </summary>
    public List<uint> Number { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Number != null) && (Number.Count != 0))
      {
        writer.WritePropertyName("number");
        writer.WriteStartArray();

        foreach (uint valNumber in Number)
        {
          writer.WriteNumberValue(valNumber);
        }

        writer.WriteEndArray();
      }

      if (Classification != null)
      {
        writer.WritePropertyName("classification");
        Classification.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (Coding valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Control != null) && (Control.Count != 0))
      {
        writer.WritePropertyName("control");
        writer.WriteStartArray();

        foreach (Coding valControl in Control)
        {
          valControl.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Coding objCategory = new fhirCsR4.Models.Coding();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "classification":
          Classification = new fhirCsR4.Models.Coding();
          Classification.DeserializeJson(ref reader, options);
          break;

        case "control":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Control = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Coding objControl = new fhirCsR4.Models.Coding();
            objControl.DeserializeJson(ref reader, options);
            Control.Add(objControl);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Control.Count == 0)
          {
            Control = null;
          }

          break;

        case "number":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Number = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Number.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Number.Count == 0)
          {
            Number = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Offer Recipient.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTermOfferParty>))]
  public class ContractTermOfferParty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Participant in the offer.
    /// </summary>
    public List<Reference> Reference { get; set; }
    /// <summary>
    /// How the party participates in the offer.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Reference != null) && (Reference.Count != 0))
      {
        writer.WritePropertyName("reference");
        writer.WriteStartArray();

        foreach (Reference valReference in Reference)
        {
          valReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objReference = new fhirCsR4.Models.Reference();
            objReference.DeserializeJson(ref reader, options);
            Reference.Add(objReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reference.Count == 0)
          {
            Reference = null;
          }

          break;

        case "role":
          Role = new fhirCsR4.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Response to offer text.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTermOfferAnswer>))]
  public class ContractTermOfferAnswer : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public decimal? ValueDecimal { get; set; }
    /// <summary>
    /// Extension container element for ValueDecimal
    /// </summary>
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public string ValueDate { get; set; }
    /// <summary>
    /// Extension container element for ValueDate
    /// </summary>
    public Element _ValueDate { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public string ValueDateTime { get; set; }
    /// <summary>
    /// Extension container element for ValueDateTime
    /// </summary>
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public string ValueTime { get; set; }
    /// <summary>
    /// Extension container element for ValueTime
    /// </summary>
    public Element _ValueTime { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public string ValueUri { get; set; }
    /// <summary>
    /// Extension container element for ValueUri
    /// </summary>
    public Element _ValueUri { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public Coding ValueCoding { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// Response to an offer clause or question text,  which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (ValueDecimal != null)
      {
        writer.WriteNumber("valueDecimal", (decimal)ValueDecimal!);
      }

      if (_ValueDecimal != null)
      {
        writer.WritePropertyName("_valueDecimal");
        _ValueDecimal.SerializeJson(writer, options);
      }

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (!string.IsNullOrEmpty(ValueDate))
      {
        writer.WriteString("valueDate", (string)ValueDate!);
      }

      if (_ValueDate != null)
      {
        writer.WritePropertyName("_valueDate");
        _ValueDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDateTime))
      {
        writer.WriteString("valueDateTime", (string)ValueDateTime!);
      }

      if (_ValueDateTime != null)
      {
        writer.WritePropertyName("_valueDateTime");
        _ValueDateTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueTime))
      {
        writer.WriteString("valueTime", (string)ValueTime!);
      }

      if (_ValueTime != null)
      {
        writer.WritePropertyName("_valueTime");
        _ValueTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueUri))
      {
        writer.WriteString("valueUri", (string)ValueUri!);
      }

      if (_ValueUri != null)
      {
        writer.WritePropertyName("_valueUri");
        _ValueUri.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (ValueCoding != null)
      {
        writer.WritePropertyName("valueCoding");
        ValueCoding.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueReference != null)
      {
        writer.WritePropertyName("valueReference");
        ValueReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "valueDecimal":
          ValueDecimal = reader.GetDecimal();
          break;

        case "_valueDecimal":
          _ValueDecimal = new fhirCsR4.Models.Element();
          _ValueDecimal.DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "valueDate":
          ValueDate = reader.GetString();
          break;

        case "_valueDate":
          _ValueDate = new fhirCsR4.Models.Element();
          _ValueDate.DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          ValueDateTime = reader.GetString();
          break;

        case "_valueDateTime":
          _ValueDateTime = new fhirCsR4.Models.Element();
          _ValueDateTime.DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          ValueTime = reader.GetString();
          break;

        case "_valueTime":
          _ValueTime = new fhirCsR4.Models.Element();
          _ValueTime.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR4.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueUri":
          ValueUri = reader.GetString();
          break;

        case "_valueUri":
          _ValueUri = new fhirCsR4.Models.Element();
          _ValueUri.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR4.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          ValueCoding = new fhirCsR4.Models.Coding();
          ValueCoding.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR4.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new fhirCsR4.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The matter of concern in the context of this provision of the agrement.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTermOffer>))]
  public class ContractTermOffer : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Response to offer text.
    /// </summary>
    public List<ContractTermOfferAnswer> Answer { get; set; }
    /// <summary>
    /// Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.
    /// </summary>
    public CodeableConcept Decision { get; set; }
    /// <summary>
    /// How the decision about a Contract was conveyed.
    /// </summary>
    public List<CodeableConcept> DecisionMode { get; set; }
    /// <summary>
    /// Unique identifier for this particular Contract Provision.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The id of the clause or question text of the offer in the referenced questionnaire/response.
    /// </summary>
    public List<string> LinkId { get; set; }
    /// <summary>
    /// Extension container element for LinkId
    /// </summary>
    public List<Element> _LinkId { get; set; }
    /// <summary>
    /// Offer Recipient.
    /// </summary>
    public List<ContractTermOfferParty> Party { get; set; }
    /// <summary>
    /// Security labels that protects the offer.
    /// </summary>
    public List<uint> SecurityLabelNumber { get; set; }
    /// <summary>
    /// Human readable form of this Contract Offer.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The Contract.topic may be an application for or offer of a policy or service (e.g., uri to a consent directive form or a health insurance policy), which becomes the Contract once accepted by both the grantor and grantee. 
    /// The Contract Resource may function simply as the computable representation of the executed contract, which may be the attached to the Contract Resource as the “binding” or as the “friendly” electronic form.  For example, a Contract Resource may be automatically populated with the values expressed in a related QuestionnaireResponse. 
    /// However, the Contract Resource may be considered the legally binding contract if it is the only “executed” form of this contract, and includes the signatures as *The Contract Resource may function as the computable representation of an application or offer in a pre-executed Contract if the grantor has not entered any values.  In this case, it is populated with values in a “legal” form of the application or offer or by the values in an associated Questionnaire.  If the grantor has filled in the legal form or the associated Questionnaire Response, then these values are used to populate a pre-executed Contract Resource.
    /// If the Contract.topic is considered an application or offer, then the policy is often required to be attached as the “legal” basis for the application to ensure “informed consent” to the contract, and that any discrepancy between the application and the policy are interpreted against the policy.  Implementers should check organizational and jurisdictional policies to determine the relationship among multiple representations of a contract pre- and post-execution.
    /// </summary>
    public Reference Topic { get; set; }
    /// <summary>
    /// Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Party != null) && (Party.Count != 0))
      {
        writer.WritePropertyName("party");
        writer.WriteStartArray();

        foreach (ContractTermOfferParty valParty in Party)
        {
          valParty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Topic != null)
      {
        writer.WritePropertyName("topic");
        Topic.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Decision != null)
      {
        writer.WritePropertyName("decision");
        Decision.SerializeJson(writer, options);
      }

      if ((DecisionMode != null) && (DecisionMode.Count != 0))
      {
        writer.WritePropertyName("decisionMode");
        writer.WriteStartArray();

        foreach (CodeableConcept valDecisionMode in DecisionMode)
        {
          valDecisionMode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Answer != null) && (Answer.Count != 0))
      {
        writer.WritePropertyName("answer");
        writer.WriteStartArray();

        foreach (ContractTermOfferAnswer valAnswer in Answer)
        {
          valAnswer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if ((LinkId != null) && (LinkId.Count != 0))
      {
        writer.WritePropertyName("linkId");
        writer.WriteStartArray();

        foreach (string valLinkId in LinkId)
        {
          writer.WriteStringValue(valLinkId);
        }

        writer.WriteEndArray();
      }

      if ((_LinkId != null) && (_LinkId.Count != 0))
      {
        writer.WritePropertyName("_linkId");
        writer.WriteStartArray();

        foreach (Element val_LinkId in _LinkId)
        {
          val_LinkId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SecurityLabelNumber != null) && (SecurityLabelNumber.Count != 0))
      {
        writer.WritePropertyName("securityLabelNumber");
        writer.WriteStartArray();

        foreach (uint valSecurityLabelNumber in SecurityLabelNumber)
        {
          writer.WriteNumberValue(valSecurityLabelNumber);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "answer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Answer = new List<ContractTermOfferAnswer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTermOfferAnswer objAnswer = new fhirCsR4.Models.ContractTermOfferAnswer();
            objAnswer.DeserializeJson(ref reader, options);
            Answer.Add(objAnswer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Answer.Count == 0)
          {
            Answer = null;
          }

          break;

        case "decision":
          Decision = new fhirCsR4.Models.CodeableConcept();
          Decision.DeserializeJson(ref reader, options);
          break;

        case "decisionMode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DecisionMode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objDecisionMode = new fhirCsR4.Models.CodeableConcept();
            objDecisionMode.DeserializeJson(ref reader, options);
            DecisionMode.Add(objDecisionMode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DecisionMode.Count == 0)
          {
            DecisionMode = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LinkId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            LinkId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LinkId.Count == 0)
          {
            LinkId = null;
          }

          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _LinkId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_LinkId = new fhirCsR4.Models.Element();
            obj_LinkId.DeserializeJson(ref reader, options);
            _LinkId.Add(obj_LinkId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_LinkId.Count == 0)
          {
            _LinkId = null;
          }

          break;

        case "party":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Party = new List<ContractTermOfferParty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTermOfferParty objParty = new fhirCsR4.Models.ContractTermOfferParty();
            objParty.DeserializeJson(ref reader, options);
            Party.Add(objParty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Party.Count == 0)
          {
            Party = null;
          }

          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabelNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SecurityLabelNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabelNumber.Count == 0)
          {
            SecurityLabelNumber = null;
          }

          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "topic":
          Topic = new fhirCsR4.Models.Reference();
          Topic.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Circumstance of the asset.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTermAssetContext>))]
  public class ContractTermAssetContext : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
    /// </summary>
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Context description.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (CodeableConcept valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objCode = new fhirCsR4.Models.CodeableConcept();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "reference":
          Reference = new fhirCsR4.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Contract Valued Item List.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTermAssetValuedItem>))]
  public class ContractTermAssetValuedItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates the time during which this Contract ValuedItem information is effective.
    /// </summary>
    public string EffectiveTime { get; set; }
    /// <summary>
    /// Extension container element for EffectiveTime
    /// </summary>
    public Element _EffectiveTime { get; set; }
    /// <summary>
    /// Specific type of Contract Valued Item that may be priced.
    /// </summary>
    public CodeableConcept EntityCodeableConcept { get; set; }
    /// <summary>
    /// Specific type of Contract Valued Item that may be priced.
    /// </summary>
    public Reference EntityReference { get; set; }
    /// <summary>
    /// A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Identifies a Contract Valued Item instance.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
    /// </summary>
    public List<string> LinkId { get; set; }
    /// <summary>
    /// Extension container element for LinkId
    /// </summary>
    public List<Element> _LinkId { get; set; }
    /// <summary>
    /// Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// Terms of valuation.
    /// </summary>
    public string Payment { get; set; }
    /// <summary>
    /// Extension container element for Payment
    /// </summary>
    public Element _Payment { get; set; }
    /// <summary>
    /// When payment is due.
    /// </summary>
    public string PaymentDate { get; set; }
    /// <summary>
    /// Extension container element for PaymentDate
    /// </summary>
    public Element _PaymentDate { get; set; }
    /// <summary>
    /// An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
    /// </summary>
    public decimal? Points { get; set; }
    /// <summary>
    /// Extension container element for Points
    /// </summary>
    public Element _Points { get; set; }
    /// <summary>
    /// Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Who will receive payment.
    /// </summary>
    public Reference Recipient { get; set; }
    /// <summary>
    /// Who will make payment.
    /// </summary>
    public Reference Responsible { get; set; }
    /// <summary>
    /// A set of security labels that define which terms are controlled by this condition.
    /// </summary>
    public List<uint> SecurityLabelNumber { get; set; }
    /// <summary>
    /// A Contract Valued Item unit valuation measure.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (EntityCodeableConcept != null)
      {
        writer.WritePropertyName("entityCodeableConcept");
        EntityCodeableConcept.SerializeJson(writer, options);
      }

      if (EntityReference != null)
      {
        writer.WritePropertyName("entityReference");
        EntityReference.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(EffectiveTime))
      {
        writer.WriteString("effectiveTime", (string)EffectiveTime!);
      }

      if (_EffectiveTime != null)
      {
        writer.WritePropertyName("_effectiveTime");
        _EffectiveTime.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Points != null)
      {
        writer.WriteNumber("points", (decimal)Points!);
      }

      if (_Points != null)
      {
        writer.WritePropertyName("_points");
        _Points.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Payment))
      {
        writer.WriteString("payment", (string)Payment!);
      }

      if (_Payment != null)
      {
        writer.WritePropertyName("_payment");
        _Payment.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PaymentDate))
      {
        writer.WriteString("paymentDate", (string)PaymentDate!);
      }

      if (_PaymentDate != null)
      {
        writer.WritePropertyName("_paymentDate");
        _PaymentDate.SerializeJson(writer, options);
      }

      if (Responsible != null)
      {
        writer.WritePropertyName("responsible");
        Responsible.SerializeJson(writer, options);
      }

      if (Recipient != null)
      {
        writer.WritePropertyName("recipient");
        Recipient.SerializeJson(writer, options);
      }

      if ((LinkId != null) && (LinkId.Count != 0))
      {
        writer.WritePropertyName("linkId");
        writer.WriteStartArray();

        foreach (string valLinkId in LinkId)
        {
          writer.WriteStringValue(valLinkId);
        }

        writer.WriteEndArray();
      }

      if ((_LinkId != null) && (_LinkId.Count != 0))
      {
        writer.WritePropertyName("_linkId");
        writer.WriteStartArray();

        foreach (Element val_LinkId in _LinkId)
        {
          val_LinkId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SecurityLabelNumber != null) && (SecurityLabelNumber.Count != 0))
      {
        writer.WritePropertyName("securityLabelNumber");
        writer.WriteStartArray();

        foreach (uint valSecurityLabelNumber in SecurityLabelNumber)
        {
          writer.WriteNumberValue(valSecurityLabelNumber);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "effectiveTime":
          EffectiveTime = reader.GetString();
          break;

        case "_effectiveTime":
          _EffectiveTime = new fhirCsR4.Models.Element();
          _EffectiveTime.DeserializeJson(ref reader, options);
          break;

        case "entityCodeableConcept":
          EntityCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          EntityCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "entityReference":
          EntityReference = new fhirCsR4.Models.Reference();
          EntityReference.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LinkId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            LinkId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LinkId.Count == 0)
          {
            LinkId = null;
          }

          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _LinkId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_LinkId = new fhirCsR4.Models.Element();
            obj_LinkId.DeserializeJson(ref reader, options);
            _LinkId.Add(obj_LinkId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_LinkId.Count == 0)
          {
            _LinkId = null;
          }

          break;

        case "net":
          Net = new fhirCsR4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "payment":
          Payment = reader.GetString();
          break;

        case "_payment":
          _Payment = new fhirCsR4.Models.Element();
          _Payment.DeserializeJson(ref reader, options);
          break;

        case "paymentDate":
          PaymentDate = reader.GetString();
          break;

        case "_paymentDate":
          _PaymentDate = new fhirCsR4.Models.Element();
          _PaymentDate.DeserializeJson(ref reader, options);
          break;

        case "points":
          Points = reader.GetDecimal();
          break;

        case "_points":
          _Points = new fhirCsR4.Models.Element();
          _Points.DeserializeJson(ref reader, options);
          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "recipient":
          Recipient = new fhirCsR4.Models.Reference();
          Recipient.DeserializeJson(ref reader, options);
          break;

        case "responsible":
          Responsible = new fhirCsR4.Models.Reference();
          Responsible.DeserializeJson(ref reader, options);
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabelNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SecurityLabelNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabelNumber.Count == 0)
          {
            SecurityLabelNumber = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new fhirCsR4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Contract Term Asset List.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTermAsset>))]
  public class ContractTermAsset : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Response to assets.
    /// </summary>
    public List<ContractTermOfferAnswer> Answer { get; set; }
    /// <summary>
    /// Description of the quality and completeness of the asset that imay be a factor in its valuation.
    /// </summary>
    public string Condition { get; set; }
    /// <summary>
    /// Extension container element for Condition
    /// </summary>
    public Element _Condition { get; set; }
    /// <summary>
    /// Circumstance of the asset.
    /// </summary>
    public List<ContractTermAssetContext> Context { get; set; }
    /// <summary>
    /// Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
    /// </summary>
    public List<string> LinkId { get; set; }
    /// <summary>
    /// Extension container element for LinkId
    /// </summary>
    public List<Element> _LinkId { get; set; }
    /// <summary>
    /// Asset relevant contractual time period.
    /// </summary>
    public List<Period> Period { get; set; }
    /// <summary>
    /// Type of Asset availability for use or ownership.
    /// </summary>
    public List<CodeableConcept> PeriodType { get; set; }
    /// <summary>
    /// Specifies the applicability of the term to an asset resource instance, and instances it refers to orinstances that refer to it, and/or are owned by the offeree.
    /// </summary>
    public Coding Relationship { get; set; }
    /// <summary>
    /// Differentiates the kind of the asset .
    /// </summary>
    public CodeableConcept Scope { get; set; }
    /// <summary>
    /// Security labels that protects the asset.
    /// </summary>
    public List<uint> SecurityLabelNumber { get; set; }
    /// <summary>
    /// May be a subtype or part of an offered asset.
    /// </summary>
    public List<CodeableConcept> Subtype { get; set; }
    /// <summary>
    /// Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Target entity type about which the term may be concerned.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Associated entities.
    /// </summary>
    public List<Reference> TypeReference { get; set; }
    /// <summary>
    /// Time period of asset use.
    /// </summary>
    public List<Period> UsePeriod { get; set; }
    /// <summary>
    /// Contract Valued Item List.
    /// </summary>
    public List<ContractTermAssetValuedItem> ValuedItem { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Scope != null)
      {
        writer.WritePropertyName("scope");
        Scope.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((TypeReference != null) && (TypeReference.Count != 0))
      {
        writer.WritePropertyName("typeReference");
        writer.WriteStartArray();

        foreach (Reference valTypeReference in TypeReference)
        {
          valTypeReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Subtype != null) && (Subtype.Count != 0))
      {
        writer.WritePropertyName("subtype");
        writer.WriteStartArray();

        foreach (CodeableConcept valSubtype in Subtype)
        {
          valSubtype.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Relationship != null)
      {
        writer.WritePropertyName("relationship");
        Relationship.SerializeJson(writer, options);
      }

      if ((Context != null) && (Context.Count != 0))
      {
        writer.WritePropertyName("context");
        writer.WriteStartArray();

        foreach (ContractTermAssetContext valContext in Context)
        {
          valContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Condition))
      {
        writer.WriteString("condition", (string)Condition!);
      }

      if (_Condition != null)
      {
        writer.WritePropertyName("_condition");
        _Condition.SerializeJson(writer, options);
      }

      if ((PeriodType != null) && (PeriodType.Count != 0))
      {
        writer.WritePropertyName("periodType");
        writer.WriteStartArray();

        foreach (CodeableConcept valPeriodType in PeriodType)
        {
          valPeriodType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Period != null) && (Period.Count != 0))
      {
        writer.WritePropertyName("period");
        writer.WriteStartArray();

        foreach (Period valPeriod in Period)
        {
          valPeriod.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((UsePeriod != null) && (UsePeriod.Count != 0))
      {
        writer.WritePropertyName("usePeriod");
        writer.WriteStartArray();

        foreach (Period valUsePeriod in UsePeriod)
        {
          valUsePeriod.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if ((LinkId != null) && (LinkId.Count != 0))
      {
        writer.WritePropertyName("linkId");
        writer.WriteStartArray();

        foreach (string valLinkId in LinkId)
        {
          writer.WriteStringValue(valLinkId);
        }

        writer.WriteEndArray();
      }

      if ((_LinkId != null) && (_LinkId.Count != 0))
      {
        writer.WritePropertyName("_linkId");
        writer.WriteStartArray();

        foreach (Element val_LinkId in _LinkId)
        {
          val_LinkId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Answer != null) && (Answer.Count != 0))
      {
        writer.WritePropertyName("answer");
        writer.WriteStartArray();

        foreach (ContractTermOfferAnswer valAnswer in Answer)
        {
          valAnswer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SecurityLabelNumber != null) && (SecurityLabelNumber.Count != 0))
      {
        writer.WritePropertyName("securityLabelNumber");
        writer.WriteStartArray();

        foreach (uint valSecurityLabelNumber in SecurityLabelNumber)
        {
          writer.WriteNumberValue(valSecurityLabelNumber);
        }

        writer.WriteEndArray();
      }

      if ((ValuedItem != null) && (ValuedItem.Count != 0))
      {
        writer.WritePropertyName("valuedItem");
        writer.WriteStartArray();

        foreach (ContractTermAssetValuedItem valValuedItem in ValuedItem)
        {
          valValuedItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "answer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Answer = new List<ContractTermOfferAnswer>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTermOfferAnswer objAnswer = new fhirCsR4.Models.ContractTermOfferAnswer();
            objAnswer.DeserializeJson(ref reader, options);
            Answer.Add(objAnswer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Answer.Count == 0)
          {
            Answer = null;
          }

          break;

        case "condition":
          Condition = reader.GetString();
          break;

        case "_condition":
          _Condition = new fhirCsR4.Models.Element();
          _Condition.DeserializeJson(ref reader, options);
          break;

        case "context":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Context = new List<ContractTermAssetContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTermAssetContext objContext = new fhirCsR4.Models.ContractTermAssetContext();
            objContext.DeserializeJson(ref reader, options);
            Context.Add(objContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Context.Count == 0)
          {
            Context = null;
          }

          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LinkId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            LinkId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LinkId.Count == 0)
          {
            LinkId = null;
          }

          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _LinkId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_LinkId = new fhirCsR4.Models.Element();
            obj_LinkId.DeserializeJson(ref reader, options);
            _LinkId.Add(obj_LinkId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_LinkId.Count == 0)
          {
            _LinkId = null;
          }

          break;

        case "period":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Period = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Period objPeriod = new fhirCsR4.Models.Period();
            objPeriod.DeserializeJson(ref reader, options);
            Period.Add(objPeriod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Period.Count == 0)
          {
            Period = null;
          }

          break;

        case "periodType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PeriodType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objPeriodType = new fhirCsR4.Models.CodeableConcept();
            objPeriodType.DeserializeJson(ref reader, options);
            PeriodType.Add(objPeriodType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PeriodType.Count == 0)
          {
            PeriodType = null;
          }

          break;

        case "relationship":
          Relationship = new fhirCsR4.Models.Coding();
          Relationship.DeserializeJson(ref reader, options);
          break;

        case "scope":
          Scope = new fhirCsR4.Models.CodeableConcept();
          Scope.DeserializeJson(ref reader, options);
          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabelNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SecurityLabelNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabelNumber.Count == 0)
          {
            SecurityLabelNumber = null;
          }

          break;

        case "subtype":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subtype = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objSubtype = new fhirCsR4.Models.CodeableConcept();
            objSubtype.DeserializeJson(ref reader, options);
            Subtype.Add(objSubtype);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subtype.Count == 0)
          {
            Subtype = null;
          }

          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objType = new fhirCsR4.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        case "typeReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          TypeReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objTypeReference = new fhirCsR4.Models.Reference();
            objTypeReference.DeserializeJson(ref reader, options);
            TypeReference.Add(objTypeReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (TypeReference.Count == 0)
          {
            TypeReference = null;
          }

          break;

        case "usePeriod":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UsePeriod = new List<Period>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Period objUsePeriod = new fhirCsR4.Models.Period();
            objUsePeriod.DeserializeJson(ref reader, options);
            UsePeriod.Add(objUsePeriod);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UsePeriod.Count == 0)
          {
            UsePeriod = null;
          }

          break;

        case "valuedItem":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ValuedItem = new List<ContractTermAssetValuedItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTermAssetValuedItem objValuedItem = new fhirCsR4.Models.ContractTermAssetValuedItem();
            objValuedItem.DeserializeJson(ref reader, options);
            ValuedItem.Add(objValuedItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ValuedItem.Count == 0)
          {
            ValuedItem = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Entity of the action.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTermActionSubject>))]
  public class ContractTermActionSubject : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The entity the action is performed or not performed on or for.
    /// </summary>
    public List<Reference> Reference { get; set; }
    /// <summary>
    /// Role type of agent assigned roles in this Contract.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Reference != null) && (Reference.Count != 0))
      {
        writer.WritePropertyName("reference");
        writer.WriteStartArray();

        foreach (Reference valReference in Reference)
        {
          valReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objReference = new fhirCsR4.Models.Reference();
            objReference.DeserializeJson(ref reader, options);
            Reference.Add(objReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reference.Count == 0)
          {
            Reference = null;
          }

          break;

        case "role":
          Role = new fhirCsR4.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
  /// For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTermAction>))]
  public class ContractTermAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Encounter or Episode with primary association to specified term activity.
    /// </summary>
    public Reference Context { get; set; }
    /// <summary>
    /// Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
    /// </summary>
    public List<string> ContextLinkId { get; set; }
    /// <summary>
    /// Extension container element for ContextLinkId
    /// </summary>
    public List<Element> _ContextLinkId { get; set; }
    /// <summary>
    /// True if the term prohibits the  action.
    /// </summary>
    public bool? DoNotPerform { get; set; }
    /// <summary>
    /// Reason or purpose for the action stipulated by this Contract Provision.
    /// </summary>
    public CodeableConcept Intent { get; set; }
    /// <summary>
    /// Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
    /// </summary>
    public List<string> LinkId { get; set; }
    /// <summary>
    /// Extension container element for LinkId
    /// </summary>
    public List<Element> _LinkId { get; set; }
    /// <summary>
    /// Comments made about the term action made by the requester, performer, subject or other participants.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// When action happens.
    /// </summary>
    public string OccurrenceDateTime { get; set; }
    /// <summary>
    /// Extension container element for OccurrenceDateTime
    /// </summary>
    public Element _OccurrenceDateTime { get; set; }
    /// <summary>
    /// When action happens.
    /// </summary>
    public Period OccurrencePeriod { get; set; }
    /// <summary>
    /// When action happens.
    /// </summary>
    public Timing OccurrenceTiming { get; set; }
    /// <summary>
    /// Indicates who or what is being asked to perform (or not perform) the ction.
    /// </summary>
    public Reference Performer { get; set; }
    /// <summary>
    /// Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
    /// </summary>
    public List<string> PerformerLinkId { get; set; }
    /// <summary>
    /// Extension container element for PerformerLinkId
    /// </summary>
    public List<Element> _PerformerLinkId { get; set; }
    /// <summary>
    /// The type of role or competency of an individual desired or required to perform or not perform the action.
    /// </summary>
    public CodeableConcept PerformerRole { get; set; }
    /// <summary>
    /// The type of individual that is desired or required to perform or not perform the action.
    /// </summary>
    public List<CodeableConcept> PerformerType { get; set; }
    /// <summary>
    /// Describes why the action is to be performed or not performed in textual form.
    /// </summary>
    public List<string> Reason { get; set; }
    /// <summary>
    /// Extension container element for Reason
    /// </summary>
    public List<Element> _Reason { get; set; }
    /// <summary>
    /// Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited.
    /// </summary>
    public List<CodeableConcept> ReasonCode { get; set; }
    /// <summary>
    /// Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
    /// </summary>
    public List<string> ReasonLinkId { get; set; }
    /// <summary>
    /// Extension container element for ReasonLinkId
    /// </summary>
    public List<Element> _ReasonLinkId { get; set; }
    /// <summary>
    /// Indicates another resource whose existence justifies permitting or not permitting this action.
    /// </summary>
    public List<Reference> ReasonReference { get; set; }
    /// <summary>
    /// Who or what initiated the action and has responsibility for its activation.
    /// </summary>
    public List<Reference> Requester { get; set; }
    /// <summary>
    /// Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
    /// </summary>
    public List<string> RequesterLinkId { get; set; }
    /// <summary>
    /// Extension container element for RequesterLinkId
    /// </summary>
    public List<Element> _RequesterLinkId { get; set; }
    /// <summary>
    /// Security labels that protects the action.
    /// </summary>
    public List<uint> SecurityLabelNumber { get; set; }
    /// <summary>
    /// Current state of the term action.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// Entity of the action.
    /// </summary>
    public List<ContractTermActionSubject> Subject { get; set; }
    /// <summary>
    /// Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (DoNotPerform != null)
      {
        writer.WriteBoolean("doNotPerform", (bool)DoNotPerform!);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((Subject != null) && (Subject.Count != 0))
      {
        writer.WritePropertyName("subject");
        writer.WriteStartArray();

        foreach (ContractTermActionSubject valSubject in Subject)
        {
          valSubject.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Intent != null)
      {
        writer.WritePropertyName("intent");
        Intent.SerializeJson(writer, options);
      }

      if ((LinkId != null) && (LinkId.Count != 0))
      {
        writer.WritePropertyName("linkId");
        writer.WriteStartArray();

        foreach (string valLinkId in LinkId)
        {
          writer.WriteStringValue(valLinkId);
        }

        writer.WriteEndArray();
      }

      if ((_LinkId != null) && (_LinkId.Count != 0))
      {
        writer.WritePropertyName("_linkId");
        writer.WriteStartArray();

        foreach (Element val_LinkId in _LinkId)
        {
          val_LinkId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (Context != null)
      {
        writer.WritePropertyName("context");
        Context.SerializeJson(writer, options);
      }

      if ((ContextLinkId != null) && (ContextLinkId.Count != 0))
      {
        writer.WritePropertyName("contextLinkId");
        writer.WriteStartArray();

        foreach (string valContextLinkId in ContextLinkId)
        {
          writer.WriteStringValue(valContextLinkId);
        }

        writer.WriteEndArray();
      }

      if ((_ContextLinkId != null) && (_ContextLinkId.Count != 0))
      {
        writer.WritePropertyName("_contextLinkId");
        writer.WriteStartArray();

        foreach (Element val_ContextLinkId in _ContextLinkId)
        {
          val_ContextLinkId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(OccurrenceDateTime))
      {
        writer.WriteString("occurrenceDateTime", (string)OccurrenceDateTime!);
      }

      if (_OccurrenceDateTime != null)
      {
        writer.WritePropertyName("_occurrenceDateTime");
        _OccurrenceDateTime.SerializeJson(writer, options);
      }

      if (OccurrencePeriod != null)
      {
        writer.WritePropertyName("occurrencePeriod");
        OccurrencePeriod.SerializeJson(writer, options);
      }

      if (OccurrenceTiming != null)
      {
        writer.WritePropertyName("occurrenceTiming");
        OccurrenceTiming.SerializeJson(writer, options);
      }

      if ((Requester != null) && (Requester.Count != 0))
      {
        writer.WritePropertyName("requester");
        writer.WriteStartArray();

        foreach (Reference valRequester in Requester)
        {
          valRequester.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RequesterLinkId != null) && (RequesterLinkId.Count != 0))
      {
        writer.WritePropertyName("requesterLinkId");
        writer.WriteStartArray();

        foreach (string valRequesterLinkId in RequesterLinkId)
        {
          writer.WriteStringValue(valRequesterLinkId);
        }

        writer.WriteEndArray();
      }

      if ((_RequesterLinkId != null) && (_RequesterLinkId.Count != 0))
      {
        writer.WritePropertyName("_requesterLinkId");
        writer.WriteStartArray();

        foreach (Element val_RequesterLinkId in _RequesterLinkId)
        {
          val_RequesterLinkId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PerformerType != null) && (PerformerType.Count != 0))
      {
        writer.WritePropertyName("performerType");
        writer.WriteStartArray();

        foreach (CodeableConcept valPerformerType in PerformerType)
        {
          valPerformerType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PerformerRole != null)
      {
        writer.WritePropertyName("performerRole");
        PerformerRole.SerializeJson(writer, options);
      }

      if (Performer != null)
      {
        writer.WritePropertyName("performer");
        Performer.SerializeJson(writer, options);
      }

      if ((PerformerLinkId != null) && (PerformerLinkId.Count != 0))
      {
        writer.WritePropertyName("performerLinkId");
        writer.WriteStartArray();

        foreach (string valPerformerLinkId in PerformerLinkId)
        {
          writer.WriteStringValue(valPerformerLinkId);
        }

        writer.WriteEndArray();
      }

      if ((_PerformerLinkId != null) && (_PerformerLinkId.Count != 0))
      {
        writer.WritePropertyName("_performerLinkId");
        writer.WriteStartArray();

        foreach (Element val_PerformerLinkId in _PerformerLinkId)
        {
          val_PerformerLinkId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReasonCode != null) && (ReasonCode.Count != 0))
      {
        writer.WritePropertyName("reasonCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valReasonCode in ReasonCode)
        {
          valReasonCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReasonReference != null) && (ReasonReference.Count != 0))
      {
        writer.WritePropertyName("reasonReference");
        writer.WriteStartArray();

        foreach (Reference valReasonReference in ReasonReference)
        {
          valReasonReference.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Reason != null) && (Reason.Count != 0))
      {
        writer.WritePropertyName("reason");
        writer.WriteStartArray();

        foreach (string valReason in Reason)
        {
          writer.WriteStringValue(valReason);
        }

        writer.WriteEndArray();
      }

      if ((_Reason != null) && (_Reason.Count != 0))
      {
        writer.WritePropertyName("_reason");
        writer.WriteStartArray();

        foreach (Element val_Reason in _Reason)
        {
          val_Reason.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ReasonLinkId != null) && (ReasonLinkId.Count != 0))
      {
        writer.WritePropertyName("reasonLinkId");
        writer.WriteStartArray();

        foreach (string valReasonLinkId in ReasonLinkId)
        {
          writer.WriteStringValue(valReasonLinkId);
        }

        writer.WriteEndArray();
      }

      if ((_ReasonLinkId != null) && (_ReasonLinkId.Count != 0))
      {
        writer.WritePropertyName("_reasonLinkId");
        writer.WriteStartArray();

        foreach (Element val_ReasonLinkId in _ReasonLinkId)
        {
          val_ReasonLinkId.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SecurityLabelNumber != null) && (SecurityLabelNumber.Count != 0))
      {
        writer.WritePropertyName("securityLabelNumber");
        writer.WriteStartArray();

        foreach (uint valSecurityLabelNumber in SecurityLabelNumber)
        {
          writer.WriteNumberValue(valSecurityLabelNumber);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "context":
          Context = new fhirCsR4.Models.Reference();
          Context.DeserializeJson(ref reader, options);
          break;

        case "contextLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ContextLinkId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ContextLinkId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ContextLinkId.Count == 0)
          {
            ContextLinkId = null;
          }

          break;

        case "_contextLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ContextLinkId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_ContextLinkId = new fhirCsR4.Models.Element();
            obj_ContextLinkId.DeserializeJson(ref reader, options);
            _ContextLinkId.Add(obj_ContextLinkId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ContextLinkId.Count == 0)
          {
            _ContextLinkId = null;
          }

          break;

        case "doNotPerform":
          DoNotPerform = reader.GetBoolean();
          break;

        case "intent":
          Intent = new fhirCsR4.Models.CodeableConcept();
          Intent.DeserializeJson(ref reader, options);
          break;

        case "linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          LinkId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            LinkId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (LinkId.Count == 0)
          {
            LinkId = null;
          }

          break;

        case "_linkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _LinkId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_LinkId = new fhirCsR4.Models.Element();
            obj_LinkId.DeserializeJson(ref reader, options);
            _LinkId.Add(obj_LinkId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_LinkId.Count == 0)
          {
            _LinkId = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "occurrenceDateTime":
          OccurrenceDateTime = reader.GetString();
          break;

        case "_occurrenceDateTime":
          _OccurrenceDateTime = new fhirCsR4.Models.Element();
          _OccurrenceDateTime.DeserializeJson(ref reader, options);
          break;

        case "occurrencePeriod":
          OccurrencePeriod = new fhirCsR4.Models.Period();
          OccurrencePeriod.DeserializeJson(ref reader, options);
          break;

        case "occurrenceTiming":
          OccurrenceTiming = new fhirCsR4.Models.Timing();
          OccurrenceTiming.DeserializeJson(ref reader, options);
          break;

        case "performer":
          Performer = new fhirCsR4.Models.Reference();
          Performer.DeserializeJson(ref reader, options);
          break;

        case "performerLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PerformerLinkId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PerformerLinkId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PerformerLinkId.Count == 0)
          {
            PerformerLinkId = null;
          }

          break;

        case "_performerLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PerformerLinkId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_PerformerLinkId = new fhirCsR4.Models.Element();
            obj_PerformerLinkId.DeserializeJson(ref reader, options);
            _PerformerLinkId.Add(obj_PerformerLinkId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PerformerLinkId.Count == 0)
          {
            _PerformerLinkId = null;
          }

          break;

        case "performerRole":
          PerformerRole = new fhirCsR4.Models.CodeableConcept();
          PerformerRole.DeserializeJson(ref reader, options);
          break;

        case "performerType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PerformerType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objPerformerType = new fhirCsR4.Models.CodeableConcept();
            objPerformerType.DeserializeJson(ref reader, options);
            PerformerType.Add(objPerformerType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PerformerType.Count == 0)
          {
            PerformerType = null;
          }

          break;

        case "reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Reason = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Reason.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Reason.Count == 0)
          {
            Reason = null;
          }

          break;

        case "_reason":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Reason = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Reason = new fhirCsR4.Models.Element();
            obj_Reason.DeserializeJson(ref reader, options);
            _Reason.Add(obj_Reason);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Reason.Count == 0)
          {
            _Reason = null;
          }

          break;

        case "reasonCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objReasonCode = new fhirCsR4.Models.CodeableConcept();
            objReasonCode.DeserializeJson(ref reader, options);
            ReasonCode.Add(objReasonCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonCode.Count == 0)
          {
            ReasonCode = null;
          }

          break;

        case "reasonLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonLinkId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ReasonLinkId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonLinkId.Count == 0)
          {
            ReasonLinkId = null;
          }

          break;

        case "_reasonLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ReasonLinkId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_ReasonLinkId = new fhirCsR4.Models.Element();
            obj_ReasonLinkId.DeserializeJson(ref reader, options);
            _ReasonLinkId.Add(obj_ReasonLinkId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ReasonLinkId.Count == 0)
          {
            _ReasonLinkId = null;
          }

          break;

        case "reasonReference":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReasonReference = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objReasonReference = new fhirCsR4.Models.Reference();
            objReasonReference.DeserializeJson(ref reader, options);
            ReasonReference.Add(objReasonReference);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReasonReference.Count == 0)
          {
            ReasonReference = null;
          }

          break;

        case "requester":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Requester = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objRequester = new fhirCsR4.Models.Reference();
            objRequester.DeserializeJson(ref reader, options);
            Requester.Add(objRequester);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Requester.Count == 0)
          {
            Requester = null;
          }

          break;

        case "requesterLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RequesterLinkId = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            RequesterLinkId.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RequesterLinkId.Count == 0)
          {
            RequesterLinkId = null;
          }

          break;

        case "_requesterLinkId":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _RequesterLinkId = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_RequesterLinkId = new fhirCsR4.Models.Element();
            obj_RequesterLinkId.DeserializeJson(ref reader, options);
            _RequesterLinkId.Add(obj_RequesterLinkId);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_RequesterLinkId.Count == 0)
          {
            _RequesterLinkId = null;
          }

          break;

        case "securityLabelNumber":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabelNumber = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SecurityLabelNumber.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabelNumber.Count == 0)
          {
            SecurityLabelNumber = null;
          }

          break;

        case "status":
          Status = new fhirCsR4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subject = new List<ContractTermActionSubject>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTermActionSubject objSubject = new fhirCsR4.Models.ContractTermActionSubject();
            objSubject.DeserializeJson(ref reader, options);
            Subject.Add(objSubject);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subject.Count == 0)
          {
            Subject = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractTerm>))]
  public class ContractTerm : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Several agents may be associated (i.e. has some responsibility for an activity) with an activity and vice-versa.
    /// For example, in cases of actions initiated by one user for other users, or in events that involve more than one user, hardware device, software, or system process. However, only one user may be the initiator/requestor for the event.
    /// </summary>
    public List<ContractTermAction> Action { get; set; }
    /// <summary>
    /// Relevant time or time-period when this Contract Provision is applicable.
    /// </summary>
    public Period Applies { get; set; }
    /// <summary>
    /// Contract Term Asset List.
    /// </summary>
    public List<ContractTermAsset> Asset { get; set; }
    /// <summary>
    /// Nested group of Contract Provisions.
    /// </summary>
    public List<ContractTerm> Group { get; set; }
    /// <summary>
    /// Unique identifier for this particular Contract Provision.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// When this Contract Provision was issued.
    /// </summary>
    public string Issued { get; set; }
    /// <summary>
    /// Extension container element for Issued
    /// </summary>
    public Element _Issued { get; set; }
    /// <summary>
    /// The matter of concern in the context of this provision of the agrement.
    /// </summary>
    public ContractTermOffer Offer { get; set; }
    /// <summary>
    /// Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
    /// </summary>
    public List<ContractTermSecurityLabel> SecurityLabel { get; set; }
    /// <summary>
    /// A specialized legal clause or condition based on overarching contract type.
    /// </summary>
    public CodeableConcept SubType { get; set; }
    /// <summary>
    /// Statement of a provision in a policy or a contract.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// The entity that the term applies to.
    /// </summary>
    public CodeableConcept TopicCodeableConcept { get; set; }
    /// <summary>
    /// The entity that the term applies to.
    /// </summary>
    public Reference TopicReference { get; set; }
    /// <summary>
    /// A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issued))
      {
        writer.WriteString("issued", (string)Issued!);
      }

      if (_Issued != null)
      {
        writer.WritePropertyName("_issued");
        _Issued.SerializeJson(writer, options);
      }

      if (Applies != null)
      {
        writer.WritePropertyName("applies");
        Applies.SerializeJson(writer, options);
      }

      if (TopicCodeableConcept != null)
      {
        writer.WritePropertyName("topicCodeableConcept");
        TopicCodeableConcept.SerializeJson(writer, options);
      }

      if (TopicReference != null)
      {
        writer.WritePropertyName("topicReference");
        TopicReference.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (SubType != null)
      {
        writer.WritePropertyName("subType");
        SubType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if ((SecurityLabel != null) && (SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();

        foreach (ContractTermSecurityLabel valSecurityLabel in SecurityLabel)
        {
          valSecurityLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Offer != null)
      {
        writer.WritePropertyName("offer");
        Offer.SerializeJson(writer, options);
      }

      if ((Asset != null) && (Asset.Count != 0))
      {
        writer.WritePropertyName("asset");
        writer.WriteStartArray();

        foreach (ContractTermAsset valAsset in Asset)
        {
          valAsset.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (ContractTermAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Group != null) && (Group.Count != 0))
      {
        writer.WritePropertyName("group");
        writer.WriteStartArray();

        foreach (ContractTerm valGroup in Group)
        {
          valGroup.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<ContractTermAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTermAction objAction = new fhirCsR4.Models.ContractTermAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "applies":
          Applies = new fhirCsR4.Models.Period();
          Applies.DeserializeJson(ref reader, options);
          break;

        case "asset":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Asset = new List<ContractTermAsset>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTermAsset objAsset = new fhirCsR4.Models.ContractTermAsset();
            objAsset.DeserializeJson(ref reader, options);
            Asset.Add(objAsset);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Asset.Count == 0)
          {
            Asset = null;
          }

          break;

        case "group":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Group = new List<ContractTerm>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTerm objGroup = new fhirCsR4.Models.ContractTerm();
            objGroup.DeserializeJson(ref reader, options);
            Group.Add(objGroup);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Group.Count == 0)
          {
            Group = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "issued":
          Issued = reader.GetString();
          break;

        case "_issued":
          _Issued = new fhirCsR4.Models.Element();
          _Issued.DeserializeJson(ref reader, options);
          break;

        case "offer":
          Offer = new fhirCsR4.Models.ContractTermOffer();
          Offer.DeserializeJson(ref reader, options);
          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabel = new List<ContractTermSecurityLabel>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTermSecurityLabel objSecurityLabel = new fhirCsR4.Models.ContractTermSecurityLabel();
            objSecurityLabel.DeserializeJson(ref reader, options);
            SecurityLabel.Add(objSecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabel.Count == 0)
          {
            SecurityLabel = null;
          }

          break;

        case "subType":
          SubType = new fhirCsR4.Models.CodeableConcept();
          SubType.DeserializeJson(ref reader, options);
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "topicCodeableConcept":
          TopicCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          TopicCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "topicReference":
          TopicReference = new fhirCsR4.Models.Reference();
          TopicReference.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
  /// For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractSigner>))]
  public class ContractSigner : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Party which is a signator to this Contract.
    /// </summary>
    public Reference Party { get; set; }
    /// <summary>
    /// Legally binding Contract DSIG signature contents in Base64.
    /// </summary>
    public List<Signature> Signature { get; set; }
    /// <summary>
    /// Role of this Contract signer, e.g. notary, grantee.
    /// </summary>
    public Coding Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Party != null)
      {
        writer.WritePropertyName("party");
        Party.SerializeJson(writer, options);
      }

      if ((Signature != null) && (Signature.Count != 0))
      {
        writer.WritePropertyName("signature");
        writer.WriteStartArray();

        foreach (Signature valSignature in Signature)
        {
          valSignature.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "party":
          Party = new fhirCsR4.Models.Reference();
          Party.DeserializeJson(ref reader, options);
          break;

        case "signature":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Signature = new List<Signature>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Signature objSignature = new fhirCsR4.Models.Signature();
            objSignature.DeserializeJson(ref reader, options);
            Signature.Add(objSignature);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Signature.Count == 0)
          {
            Signature = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.Coding();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractFriendly>))]
  public class ContractFriendly : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
    /// </summary>
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
    /// </summary>
    public Reference ContentReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ContentAttachment != null)
      {
        writer.WritePropertyName("contentAttachment");
        ContentAttachment.SerializeJson(writer, options);
      }

      if (ContentReference != null)
      {
        writer.WritePropertyName("contentReference");
        ContentReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          ContentAttachment = new fhirCsR4.Models.Attachment();
          ContentAttachment.DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          ContentReference = new fhirCsR4.Models.Reference();
          ContentReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of Legal expressions or representations of this Contract.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractLegal>))]
  public class ContractLegal : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Contract legal text in human renderable form.
    /// </summary>
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Contract legal text in human renderable form.
    /// </summary>
    public Reference ContentReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ContentAttachment != null)
      {
        writer.WritePropertyName("contentAttachment");
        ContentAttachment.SerializeJson(writer, options);
      }

      if (ContentReference != null)
      {
        writer.WritePropertyName("contentReference");
        ContentReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          ContentAttachment = new fhirCsR4.Models.Attachment();
          ContentAttachment.DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          ContentReference = new fhirCsR4.Models.Reference();
          ContentReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// List of Computable Policy Rule Language Representations of this Contract.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ContractRule>))]
  public class ContractRule : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
    /// </summary>
    public Attachment ContentAttachment { get; set; }
    /// <summary>
    /// Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).
    /// </summary>
    public Reference ContentReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ContentAttachment != null)
      {
        writer.WritePropertyName("contentAttachment");
        ContentAttachment.SerializeJson(writer, options);
      }

      if (ContentReference != null)
      {
        writer.WritePropertyName("contentReference");
        ContentReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contentAttachment":
          ContentAttachment = new fhirCsR4.Models.Attachment();
          ContentAttachment.DeserializeJson(ref reader, options);
          break;

        case "contentReference":
          ContentReference = new fhirCsR4.Models.Reference();
          ContentReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Contract>))]
  public class Contract : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Contract";
    /// <summary>
    /// Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
    /// </summary>
    public List<string> Alias { get; set; }
    /// <summary>
    /// Extension container element for Alias
    /// </summary>
    public List<Element> _Alias { get; set; }
    /// <summary>
    /// Relevant time or time-period when this Contract is applicable.
    /// </summary>
    public Period Applies { get; set; }
    /// <summary>
    /// The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
    /// </summary>
    public Reference Author { get; set; }
    /// <summary>
    /// A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
    /// </summary>
    public List<Reference> Authority { get; set; }
    /// <summary>
    /// Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
    /// </summary>
    public ContractContentDefinition ContentDefinition { get; set; }
    /// <summary>
    /// The minimal content derived from the basal information source at a specific stage in its lifecycle.
    /// </summary>
    public CodeableConcept ContentDerivative { get; set; }
    /// <summary>
    /// Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
    /// </summary>
    public List<Reference> Domain { get; set; }
    /// <summary>
    /// Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
    /// </summary>
    public CodeableConcept ExpirationType { get; set; }
    /// <summary>
    /// The "patient friendly language" versionof the Contract in whole or in parts. "Patient friendly language" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
    /// </summary>
    public List<ContractFriendly> Friendly { get; set; }
    /// <summary>
    /// Unique identifier for this Contract or a derivative that references a Source Contract.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.
    /// </summary>
    public Reference InstantiatesCanonical { get; set; }
    /// <summary>
    /// The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.
    /// </summary>
    public string InstantiatesUri { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesUri
    /// </summary>
    public Element _InstantiatesUri { get; set; }
    /// <summary>
    /// When this  Contract was issued.
    /// </summary>
    public string Issued { get; set; }
    /// <summary>
    /// Extension container element for Issued
    /// </summary>
    public Element _Issued { get; set; }
    /// <summary>
    /// List of Legal expressions or representations of this Contract.
    /// </summary>
    public List<ContractLegal> Legal { get; set; }
    /// <summary>
    /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
    /// </summary>
    public Attachment LegallyBindingAttachment { get; set; }
    /// <summary>
    /// Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the "source of truth" and which would be the basis for legal action related to enforcement of this Contract.
    /// </summary>
    public Reference LegallyBindingReference { get; set; }
    /// <summary>
    /// Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
    /// </summary>
    public CodeableConcept LegalState { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provence.entity indicates the target that was changed in the update. http://build.fhir.org/provenance-definitions.html#Provenance.entity.
    /// </summary>
    public List<Reference> RelevantHistory { get; set; }
    /// <summary>
    /// List of Computable Policy Rule Language Representations of this Contract.
    /// </summary>
    public List<ContractRule> Rule { get; set; }
    /// <summary>
    /// A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
    /// </summary>
    public CodeableConcept Scope { get; set; }
    /// <summary>
    /// Signers who are principal parties to the contract are bound by the Contract.activity related to the Contract.topic, and the Contract.term(s), which either extend or restrict the overall action on the topic by, for example, stipulating specific policies or obligations constraining actions, action reason, or agents with respect to some or all of the topic.
    /// For example, specifying how policies or obligations shall constrain actions and action reasons permitted or denied on all or a subset of the Contract.topic (e.g., all or a portion of property being transferred by the contract), agents (e.g., who can resell, assign interests, or alter the property being transferred by the contract), actions, and action reasons; or with respect to Contract.terms, stipulating, extending, or limiting the Contract.period of applicability or valuation of items under consideration.
    /// </summary>
    public List<ContractSigner> Signer { get; set; }
    /// <summary>
    /// Sites in which the contract is complied with,  exercised, or in force.
    /// </summary>
    public List<Reference> Site { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the contract as not currently valid or active.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The Contract.subject is an entity that has some role with respect to the Contract.topic and Contract.topic.term, which is of focal interest to the parties to the contract and likely impacted in a significant way by the Contract.action/Contract.action.reason and the Contract.term.action/Contract.action.reason. 
    /// In many cases, the Contract.subject is a Contract.signer if the subject is an adult; has a legal interest in the contract; and incompetent to participate in the contract agreement.
    /// </summary>
    public List<Reference> Subject { get; set; }
    /// <summary>
    /// An explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
    /// </summary>
    public string Subtitle { get; set; }
    /// <summary>
    /// Extension container element for Subtitle
    /// </summary>
    public Element _Subtitle { get; set; }
    /// <summary>
    /// Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
    /// </summary>
    public List<CodeableConcept> SubType { get; set; }
    /// <summary>
    /// Information that may be needed by/relevant to the performer in their execution of this term action.
    /// </summary>
    public List<Reference> SupportingInfo { get; set; }
    /// <summary>
    /// One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
    /// </summary>
    public List<ContractTerm> Term { get; set; }
    /// <summary>
    /// A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
    /// </summary>
    public CodeableConcept TopicCodeableConcept { get; set; }
    /// <summary>
    /// Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
    /// </summary>
    public Reference TopicReference { get; set; }
    /// <summary>
    /// A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Used in a domain that uses a supplied contract repository.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Note -  This is a business versionId, not a resource version id (see discussion http://build.fhir.org/resource.html#versions) 
    /// Comments - There may be different contract instances that have the same identifier but different versions. The version can be appended to the url in a reference to allow a reference to a particular business version of the plan definition with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (LegalState != null)
      {
        writer.WritePropertyName("legalState");
        LegalState.SerializeJson(writer, options);
      }

      if (InstantiatesCanonical != null)
      {
        writer.WritePropertyName("instantiatesCanonical");
        InstantiatesCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InstantiatesUri))
      {
        writer.WriteString("instantiatesUri", (string)InstantiatesUri!);
      }

      if (_InstantiatesUri != null)
      {
        writer.WritePropertyName("_instantiatesUri");
        _InstantiatesUri.SerializeJson(writer, options);
      }

      if (ContentDerivative != null)
      {
        writer.WritePropertyName("contentDerivative");
        ContentDerivative.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issued))
      {
        writer.WriteString("issued", (string)Issued!);
      }

      if (_Issued != null)
      {
        writer.WritePropertyName("_issued");
        _Issued.SerializeJson(writer, options);
      }

      if (Applies != null)
      {
        writer.WritePropertyName("applies");
        Applies.SerializeJson(writer, options);
      }

      if (ExpirationType != null)
      {
        writer.WritePropertyName("expirationType");
        ExpirationType.SerializeJson(writer, options);
      }

      if ((Subject != null) && (Subject.Count != 0))
      {
        writer.WritePropertyName("subject");
        writer.WriteStartArray();

        foreach (Reference valSubject in Subject)
        {
          valSubject.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Authority != null) && (Authority.Count != 0))
      {
        writer.WritePropertyName("authority");
        writer.WriteStartArray();

        foreach (Reference valAuthority in Authority)
        {
          valAuthority.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Domain != null) && (Domain.Count != 0))
      {
        writer.WritePropertyName("domain");
        writer.WriteStartArray();

        foreach (Reference valDomain in Domain)
        {
          valDomain.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Site != null) && (Site.Count != 0))
      {
        writer.WritePropertyName("site");
        writer.WriteStartArray();

        foreach (Reference valSite in Site)
        {
          valSite.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Subtitle))
      {
        writer.WriteString("subtitle", (string)Subtitle!);
      }

      if (_Subtitle != null)
      {
        writer.WritePropertyName("_subtitle");
        _Subtitle.SerializeJson(writer, options);
      }

      if ((Alias != null) && (Alias.Count != 0))
      {
        writer.WritePropertyName("alias");
        writer.WriteStartArray();

        foreach (string valAlias in Alias)
        {
          writer.WriteStringValue(valAlias);
        }

        writer.WriteEndArray();
      }

      if ((_Alias != null) && (_Alias.Count != 0))
      {
        writer.WritePropertyName("_alias");
        writer.WriteStartArray();

        foreach (Element val_Alias in _Alias)
        {
          val_Alias.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Author != null)
      {
        writer.WritePropertyName("author");
        Author.SerializeJson(writer, options);
      }

      if (Scope != null)
      {
        writer.WritePropertyName("scope");
        Scope.SerializeJson(writer, options);
      }

      if (TopicCodeableConcept != null)
      {
        writer.WritePropertyName("topicCodeableConcept");
        TopicCodeableConcept.SerializeJson(writer, options);
      }

      if (TopicReference != null)
      {
        writer.WritePropertyName("topicReference");
        TopicReference.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if ((SubType != null) && (SubType.Count != 0))
      {
        writer.WritePropertyName("subType");
        writer.WriteStartArray();

        foreach (CodeableConcept valSubType in SubType)
        {
          valSubType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ContentDefinition != null)
      {
        writer.WritePropertyName("contentDefinition");
        ContentDefinition.SerializeJson(writer, options);
      }

      if ((Term != null) && (Term.Count != 0))
      {
        writer.WritePropertyName("term");
        writer.WriteStartArray();

        foreach (ContractTerm valTerm in Term)
        {
          valTerm.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SupportingInfo != null) && (SupportingInfo.Count != 0))
      {
        writer.WritePropertyName("supportingInfo");
        writer.WriteStartArray();

        foreach (Reference valSupportingInfo in SupportingInfo)
        {
          valSupportingInfo.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelevantHistory != null) && (RelevantHistory.Count != 0))
      {
        writer.WritePropertyName("relevantHistory");
        writer.WriteStartArray();

        foreach (Reference valRelevantHistory in RelevantHistory)
        {
          valRelevantHistory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Signer != null) && (Signer.Count != 0))
      {
        writer.WritePropertyName("signer");
        writer.WriteStartArray();

        foreach (ContractSigner valSigner in Signer)
        {
          valSigner.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Friendly != null) && (Friendly.Count != 0))
      {
        writer.WritePropertyName("friendly");
        writer.WriteStartArray();

        foreach (ContractFriendly valFriendly in Friendly)
        {
          valFriendly.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Legal != null) && (Legal.Count != 0))
      {
        writer.WritePropertyName("legal");
        writer.WriteStartArray();

        foreach (ContractLegal valLegal in Legal)
        {
          valLegal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Rule != null) && (Rule.Count != 0))
      {
        writer.WritePropertyName("rule");
        writer.WriteStartArray();

        foreach (ContractRule valRule in Rule)
        {
          valRule.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (LegallyBindingAttachment != null)
      {
        writer.WritePropertyName("legallyBindingAttachment");
        LegallyBindingAttachment.SerializeJson(writer, options);
      }

      if (LegallyBindingReference != null)
      {
        writer.WritePropertyName("legallyBindingReference");
        LegallyBindingReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Alias = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Alias.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Alias.Count == 0)
          {
            Alias = null;
          }

          break;

        case "_alias":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Alias = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Alias = new fhirCsR4.Models.Element();
            obj_Alias.DeserializeJson(ref reader, options);
            _Alias.Add(obj_Alias);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Alias.Count == 0)
          {
            _Alias = null;
          }

          break;

        case "applies":
          Applies = new fhirCsR4.Models.Period();
          Applies.DeserializeJson(ref reader, options);
          break;

        case "author":
          Author = new fhirCsR4.Models.Reference();
          Author.DeserializeJson(ref reader, options);
          break;

        case "authority":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Authority = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objAuthority = new fhirCsR4.Models.Reference();
            objAuthority.DeserializeJson(ref reader, options);
            Authority.Add(objAuthority);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Authority.Count == 0)
          {
            Authority = null;
          }

          break;

        case "contentDefinition":
          ContentDefinition = new fhirCsR4.Models.ContractContentDefinition();
          ContentDefinition.DeserializeJson(ref reader, options);
          break;

        case "contentDerivative":
          ContentDerivative = new fhirCsR4.Models.CodeableConcept();
          ContentDerivative.DeserializeJson(ref reader, options);
          break;

        case "domain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Domain = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objDomain = new fhirCsR4.Models.Reference();
            objDomain.DeserializeJson(ref reader, options);
            Domain.Add(objDomain);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Domain.Count == 0)
          {
            Domain = null;
          }

          break;

        case "expirationType":
          ExpirationType = new fhirCsR4.Models.CodeableConcept();
          ExpirationType.DeserializeJson(ref reader, options);
          break;

        case "friendly":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Friendly = new List<ContractFriendly>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractFriendly objFriendly = new fhirCsR4.Models.ContractFriendly();
            objFriendly.DeserializeJson(ref reader, options);
            Friendly.Add(objFriendly);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Friendly.Count == 0)
          {
            Friendly = null;
          }

          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "instantiatesCanonical":
          InstantiatesCanonical = new fhirCsR4.Models.Reference();
          InstantiatesCanonical.DeserializeJson(ref reader, options);
          break;

        case "instantiatesUri":
          InstantiatesUri = reader.GetString();
          break;

        case "_instantiatesUri":
          _InstantiatesUri = new fhirCsR4.Models.Element();
          _InstantiatesUri.DeserializeJson(ref reader, options);
          break;

        case "issued":
          Issued = reader.GetString();
          break;

        case "_issued":
          _Issued = new fhirCsR4.Models.Element();
          _Issued.DeserializeJson(ref reader, options);
          break;

        case "legal":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Legal = new List<ContractLegal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractLegal objLegal = new fhirCsR4.Models.ContractLegal();
            objLegal.DeserializeJson(ref reader, options);
            Legal.Add(objLegal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Legal.Count == 0)
          {
            Legal = null;
          }

          break;

        case "legallyBindingAttachment":
          LegallyBindingAttachment = new fhirCsR4.Models.Attachment();
          LegallyBindingAttachment.DeserializeJson(ref reader, options);
          break;

        case "legallyBindingReference":
          LegallyBindingReference = new fhirCsR4.Models.Reference();
          LegallyBindingReference.DeserializeJson(ref reader, options);
          break;

        case "legalState":
          LegalState = new fhirCsR4.Models.CodeableConcept();
          LegalState.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "relevantHistory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelevantHistory = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objRelevantHistory = new fhirCsR4.Models.Reference();
            objRelevantHistory.DeserializeJson(ref reader, options);
            RelevantHistory.Add(objRelevantHistory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelevantHistory.Count == 0)
          {
            RelevantHistory = null;
          }

          break;

        case "rule":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Rule = new List<ContractRule>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractRule objRule = new fhirCsR4.Models.ContractRule();
            objRule.DeserializeJson(ref reader, options);
            Rule.Add(objRule);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Rule.Count == 0)
          {
            Rule = null;
          }

          break;

        case "scope":
          Scope = new fhirCsR4.Models.CodeableConcept();
          Scope.DeserializeJson(ref reader, options);
          break;

        case "signer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Signer = new List<ContractSigner>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractSigner objSigner = new fhirCsR4.Models.ContractSigner();
            objSigner.DeserializeJson(ref reader, options);
            Signer.Add(objSigner);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Signer.Count == 0)
          {
            Signer = null;
          }

          break;

        case "site":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Site = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSite = new fhirCsR4.Models.Reference();
            objSite.DeserializeJson(ref reader, options);
            Site.Add(objSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Site.Count == 0)
          {
            Site = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subject":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Subject = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSubject = new fhirCsR4.Models.Reference();
            objSubject.DeserializeJson(ref reader, options);
            Subject.Add(objSubject);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Subject.Count == 0)
          {
            Subject = null;
          }

          break;

        case "subtitle":
          Subtitle = reader.GetString();
          break;

        case "_subtitle":
          _Subtitle = new fhirCsR4.Models.Element();
          _Subtitle.DeserializeJson(ref reader, options);
          break;

        case "subType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objSubType = new fhirCsR4.Models.CodeableConcept();
            objSubType.DeserializeJson(ref reader, options);
            SubType.Add(objSubType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubType.Count == 0)
          {
            SubType = null;
          }

          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInfo = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSupportingInfo = new fhirCsR4.Models.Reference();
            objSupportingInfo.DeserializeJson(ref reader, options);
            SupportingInfo.Add(objSupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInfo.Count == 0)
          {
            SupportingInfo = null;
          }

          break;

        case "term":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Term = new List<ContractTerm>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContractTerm objTerm = new fhirCsR4.Models.ContractTerm();
            objTerm.DeserializeJson(ref reader, options);
            Term.Add(objTerm);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Term.Count == 0)
          {
            Term = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "topicCodeableConcept":
          TopicCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          TopicCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "topicReference":
          TopicReference = new fhirCsR4.Models.Reference();
          TopicReference.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Contract.status field
  /// </summary>
  public static class ContractStatusCodes {
    public const string AMENDED = "amended";
    public const string APPENDED = "appended";
    public const string CANCELLED = "cancelled";
    public const string DISPUTED = "disputed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
    public const string EXECUTABLE = "executable";
    public const string EXECUTED = "executed";
    public const string NEGOTIABLE = "negotiable";
    public const string OFFERED = "offered";
    public const string POLICY = "policy";
    public const string REJECTED = "rejected";
    public const string RENEWED = "renewed";
    public const string REVOKED = "revoked";
    public const string RESOLVED = "resolved";
    public const string TERMINATED = "terminated";
  }
}
