// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// A participant in the test execution, either the execution engine, a client, or a server.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReportParticipant>))]
  public class TestReportParticipant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The display name of the participant.
    /// </summary>
    public string Display { get; set; }
    /// <summary>
    /// Extension container element for Display
    /// </summary>
    public Element _Display { get; set; }
    /// <summary>
    /// The type of participant.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// The uri of the participant. An absolute URL is preferred.
    /// </summary>
    public string Uri { get; set; }
    /// <summary>
    /// Extension container element for Uri
    /// </summary>
    public Element _Uri { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Uri))
      {
        writer.WriteString("uri", (string)Uri!);
      }

      if (_Uri != null)
      {
        writer.WritePropertyName("_uri");
        _Uri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Display))
      {
        writer.WriteString("display", (string)Display!);
      }

      if (_Display != null)
      {
        writer.WritePropertyName("_display");
        _Display.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "display":
          Display = reader.GetString();
          break;

        case "_display":
          _Display = new fhirCsR4.Models.Element();
          _Display.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "uri":
          Uri = reader.GetString();
          break;

        case "_uri":
          _Uri = new fhirCsR4.Models.Element();
          _Uri.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestReport.participant.type field
  /// </summary>
  public static class TestReportParticipantTypeCodes {
    public const string TEST_ENGINE = "test-engine";
    public const string CLIENT = "client";
    public const string SERVER = "server";
  }
  /// <summary>
  /// The operation performed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReportSetupActionOperation>))]
  public class TestReportSetupActionOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A link to further details on the result.
    /// </summary>
    public string Detail { get; set; }
    /// <summary>
    /// Extension container element for Detail
    /// </summary>
    public Element _Detail { get; set; }
    /// <summary>
    /// An explanatory message associated with the result.
    /// </summary>
    public string Message { get; set; }
    /// <summary>
    /// Extension container element for Message
    /// </summary>
    public Element _Message { get; set; }
    /// <summary>
    /// The result of this operation.
    /// </summary>
    public string Result { get; set; }
    /// <summary>
    /// Extension container element for Result
    /// </summary>
    public Element _Result { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Result))
      {
        writer.WriteString("result", (string)Result!);
      }

      if (_Result != null)
      {
        writer.WritePropertyName("_result");
        _Result.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Message))
      {
        writer.WriteString("message", (string)Message!);
      }

      if (_Message != null)
      {
        writer.WritePropertyName("_message");
        _Message.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Detail))
      {
        writer.WriteString("detail", (string)Detail!);
      }

      if (_Detail != null)
      {
        writer.WritePropertyName("_detail");
        _Detail.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "detail":
          Detail = reader.GetString();
          break;

        case "_detail":
          _Detail = new fhirCsR4.Models.Element();
          _Detail.DeserializeJson(ref reader, options);
          break;

        case "message":
          Message = reader.GetString();
          break;

        case "_message":
          _Message = new fhirCsR4.Models.Element();
          _Message.DeserializeJson(ref reader, options);
          break;

        case "result":
          Result = reader.GetString();
          break;

        case "_result":
          _Result = new fhirCsR4.Models.Element();
          _Result.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestReport.setup.action.operation.result field
  /// </summary>
  public static class TestReportSetupActionOperationResultCodes {
    public const string PASS = "pass";
    public const string SKIP = "skip";
    public const string FAIL = "fail";
    public const string WARNING = "warning";
    public const string ERROR = "error";
  }
  /// <summary>
  /// The results of the assertion performed on the previous operations.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReportSetupActionAssert>))]
  public class TestReportSetupActionAssert : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A link to further details on the result.
    /// </summary>
    public string Detail { get; set; }
    /// <summary>
    /// Extension container element for Detail
    /// </summary>
    public Element _Detail { get; set; }
    /// <summary>
    /// An explanatory message associated with the result.
    /// </summary>
    public string Message { get; set; }
    /// <summary>
    /// Extension container element for Message
    /// </summary>
    public Element _Message { get; set; }
    /// <summary>
    /// The result of this assertion.
    /// </summary>
    public string Result { get; set; }
    /// <summary>
    /// Extension container element for Result
    /// </summary>
    public Element _Result { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Result))
      {
        writer.WriteString("result", (string)Result!);
      }

      if (_Result != null)
      {
        writer.WritePropertyName("_result");
        _Result.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Message))
      {
        writer.WriteString("message", (string)Message!);
      }

      if (_Message != null)
      {
        writer.WritePropertyName("_message");
        _Message.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Detail))
      {
        writer.WriteString("detail", (string)Detail!);
      }

      if (_Detail != null)
      {
        writer.WritePropertyName("_detail");
        _Detail.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "detail":
          Detail = reader.GetString();
          break;

        case "_detail":
          _Detail = new fhirCsR4.Models.Element();
          _Detail.DeserializeJson(ref reader, options);
          break;

        case "message":
          Message = reader.GetString();
          break;

        case "_message":
          _Message = new fhirCsR4.Models.Element();
          _Message.DeserializeJson(ref reader, options);
          break;

        case "result":
          Result = reader.GetString();
          break;

        case "_result":
          _Result = new fhirCsR4.Models.Element();
          _Result.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestReport.setup.action.assert.result field
  /// </summary>
  public static class TestReportSetupActionAssertResultCodes {
    public const string PASS = "pass";
    public const string SKIP = "skip";
    public const string FAIL = "fail";
    public const string WARNING = "warning";
    public const string ERROR = "error";
  }
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReportSetupAction>))]
  public class TestReportSetupAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The results of the assertion performed on the previous operations.
    /// </summary>
    public TestReportSetupActionAssert Assert { get; set; }
    /// <summary>
    /// The operation performed.
    /// </summary>
    public TestReportSetupActionOperation Operation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if (Assert != null)
      {
        writer.WritePropertyName("assert");
        Assert.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "assert":
          Assert = new fhirCsR4.Models.TestReportSetupActionAssert();
          Assert.DeserializeJson(ref reader, options);
          break;

        case "operation":
          Operation = new fhirCsR4.Models.TestReportSetupActionOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The results of the series of required setup operations before the tests were executed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReportSetup>))]
  public class TestReportSetup : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
    /// </summary>
    public List<TestReportSetupAction> Action { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (TestReportSetupAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<TestReportSetupAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestReportSetupAction objAction = new fhirCsR4.Models.TestReportSetupAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReportTestAction>))]
  public class TestReportTestAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The results of the assertion performed on the previous operations.
    /// </summary>
    public TestReportSetupActionAssert Assert { get; set; }
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    public TestReportSetupActionOperation Operation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if (Assert != null)
      {
        writer.WritePropertyName("assert");
        Assert.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "assert":
          Assert = new fhirCsR4.Models.TestReportSetupActionAssert();
          Assert.DeserializeJson(ref reader, options);
          break;

        case "operation":
          Operation = new fhirCsR4.Models.TestReportSetupActionOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A test executed from the test script.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReportTest>))]
  public class TestReportTest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
    /// </summary>
    public List<TestReportTestAction> Action { get; set; }
    /// <summary>
    /// A short description of the test used by test engines for tracking and reporting purposes.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The name of this test used for tracking/logging purposes by test engines.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (TestReportTestAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<TestReportTestAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestReportTestAction objAction = new fhirCsR4.Models.TestReportTestAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReportTeardownAction>))]
  public class TestReportTeardownAction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An operation would involve a REST request to a server.
    /// </summary>
    public TestReportSetupActionOperation Operation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Operation != null)
      {
        writer.WritePropertyName("operation");
        Operation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "operation":
          Operation = new fhirCsR4.Models.TestReportSetupActionOperation();
          Operation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReportTeardown>))]
  public class TestReportTeardown : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An action should contain either an operation or an assertion but not both.  It can contain any number of variables.
    /// </summary>
    public List<TestReportTeardownAction> Action { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (TestReportTeardownAction valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<TestReportTeardownAction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestReportTeardownAction objAction = new fhirCsR4.Models.TestReportTeardownAction();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A summary of information based on the results of executing a TestScript.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TestReport>))]
  public class TestReport : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "TestReport";
    /// <summary>
    /// Identifier for the TestScript assigned for external purposes outside the context of FHIR.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Additional specific dates may be added as extensions.
    /// </summary>
    public string Issued { get; set; }
    /// <summary>
    /// Extension container element for Issued
    /// </summary>
    public Element _Issued { get; set; }
    /// <summary>
    /// Not expected to be globally unique.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// A participant in the test execution, either the execution engine, a client, or a server.
    /// </summary>
    public List<TestReportParticipant> Participant { get; set; }
    /// <summary>
    /// The pass and fail result represents a completed test script execution. The pending result represents a test script execution that has not yet started or is currently in progress.
    /// </summary>
    public string Result { get; set; }
    /// <summary>
    /// Extension container element for Result
    /// </summary>
    public Element _Result { get; set; }
    /// <summary>
    /// The final score (percentage of tests passed) resulting from the execution of the TestScript.
    /// </summary>
    public decimal? Score { get; set; }
    /// <summary>
    /// Extension container element for Score
    /// </summary>
    public Element _Score { get; set; }
    /// <summary>
    /// The results of the series of required setup operations before the tests were executed.
    /// </summary>
    public TestReportSetup Setup { get; set; }
    /// <summary>
    /// The status represents where the execution is currently within the test script execution life cycle.
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
    /// </summary>
    public TestReportTeardown Teardown { get; set; }
    /// <summary>
    /// A test executed from the test script.
    /// </summary>
    public List<TestReportTest> Test { get; set; }
    /// <summary>
    /// Usually an organization, but may be an individual. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Tester { get; set; }
    /// <summary>
    /// Extension container element for Tester
    /// </summary>
    public Element _Tester { get; set; }
    /// <summary>
    /// Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
    /// </summary>
    public Reference TestScript { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (TestScript != null)
      {
        writer.WritePropertyName("testScript");
        TestScript.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Result))
      {
        writer.WriteString("result", (string)Result!);
      }

      if (_Result != null)
      {
        writer.WritePropertyName("_result");
        _Result.SerializeJson(writer, options);
      }

      if (Score != null)
      {
        writer.WriteNumber("score", (decimal)Score!);
      }

      if (_Score != null)
      {
        writer.WritePropertyName("_score");
        _Score.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Tester))
      {
        writer.WriteString("tester", (string)Tester!);
      }

      if (_Tester != null)
      {
        writer.WritePropertyName("_tester");
        _Tester.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Issued))
      {
        writer.WriteString("issued", (string)Issued!);
      }

      if (_Issued != null)
      {
        writer.WritePropertyName("_issued");
        _Issued.SerializeJson(writer, options);
      }

      if ((Participant != null) && (Participant.Count != 0))
      {
        writer.WritePropertyName("participant");
        writer.WriteStartArray();

        foreach (TestReportParticipant valParticipant in Participant)
        {
          valParticipant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Setup != null)
      {
        writer.WritePropertyName("setup");
        Setup.SerializeJson(writer, options);
      }

      if ((Test != null) && (Test.Count != 0))
      {
        writer.WritePropertyName("test");
        writer.WriteStartArray();

        foreach (TestReportTest valTest in Test)
        {
          valTest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Teardown != null)
      {
        writer.WritePropertyName("teardown");
        Teardown.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "issued":
          Issued = reader.GetString();
          break;

        case "_issued":
          _Issued = new fhirCsR4.Models.Element();
          _Issued.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "participant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Participant = new List<TestReportParticipant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestReportParticipant objParticipant = new fhirCsR4.Models.TestReportParticipant();
            objParticipant.DeserializeJson(ref reader, options);
            Participant.Add(objParticipant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Participant.Count == 0)
          {
            Participant = null;
          }

          break;

        case "result":
          Result = reader.GetString();
          break;

        case "_result":
          _Result = new fhirCsR4.Models.Element();
          _Result.DeserializeJson(ref reader, options);
          break;

        case "score":
          Score = reader.GetDecimal();
          break;

        case "_score":
          _Score = new fhirCsR4.Models.Element();
          _Score.DeserializeJson(ref reader, options);
          break;

        case "setup":
          Setup = new fhirCsR4.Models.TestReportSetup();
          Setup.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "teardown":
          Teardown = new fhirCsR4.Models.TestReportTeardown();
          Teardown.DeserializeJson(ref reader, options);
          break;

        case "test":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Test = new List<TestReportTest>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TestReportTest objTest = new fhirCsR4.Models.TestReportTest();
            objTest.DeserializeJson(ref reader, options);
            Test.Add(objTest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Test.Count == 0)
          {
            Test = null;
          }

          break;

        case "tester":
          Tester = reader.GetString();
          break;

        case "_tester":
          _Tester = new fhirCsR4.Models.Element();
          _Tester.DeserializeJson(ref reader, options);
          break;

        case "testScript":
          TestScript = new fhirCsR4.Models.Reference();
          TestScript.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the TestReport.result field
  /// </summary>
  public static class TestReportResultCodes {
    public const string PASS = "pass";
    public const string FAIL = "fail";
    public const string PENDING = "pending";
  }
  /// <summary>
  /// Code Values for the TestReport.status field
  /// </summary>
  public static class TestReportStatusCodes {
    public const string COMPLETED = "completed";
    public const string IN_PROGRESS = "in-progress";
    public const string WAITING = "waiting";
    public const string STOPPED = "stopped";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
}
