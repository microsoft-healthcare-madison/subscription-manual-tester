// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementSoftware>))]
  public class CapabilityStatementSoftware : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Name the software is known by.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Date this version of the software was released.
    /// </summary>
    public string ReleaseDate { get; set; }
    /// <summary>
    /// Extension container element for ReleaseDate
    /// </summary>
    public Element _ReleaseDate { get; set; }
    /// <summary>
    /// If possible, a version should be specified, as statements are likely to be different for different versions of software.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReleaseDate))
      {
        writer.WriteString("releaseDate", (string)ReleaseDate!);
      }

      if (_ReleaseDate != null)
      {
        writer.WritePropertyName("_releaseDate");
        _ReleaseDate.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "releaseDate":
          ReleaseDate = reader.GetString();
          break;

        case "_releaseDate":
          _ReleaseDate = new fhirCsR4.Models.Element();
          _ReleaseDate.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementImplementation>))]
  public class CapabilityStatementImplementation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
    /// </summary>
    public Reference Custodian { get; set; }
    /// <summary>
    /// Information about the specific installation that this capability statement relates to.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (Custodian != null)
      {
        writer.WritePropertyName("custodian");
        Custodian.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "custodian":
          Custodian = new fhirCsR4.Models.Reference();
          Custodian.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about security implementation from an interface perspective - what a client needs to know.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementRestSecurity>))]
  public class CapabilityStatementRestSecurity : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The easiest CORS headers to add are Access-Control-Allow-Origin: * &amp; Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.
    /// </summary>
    public bool? Cors { get; set; }
    /// <summary>
    /// General description of how security works.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Types of security services that are supported/required by the system.
    /// </summary>
    public List<CodeableConcept> Service { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Cors != null)
      {
        writer.WriteBoolean("cors", (bool)Cors!);
      }

      if ((Service != null) && (Service.Count != 0))
      {
        writer.WritePropertyName("service");
        writer.WriteStartArray();

        foreach (CodeableConcept valService in Service)
        {
          valService.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cors":
          Cors = reader.GetBoolean();
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "service":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Service = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objService = new fhirCsR4.Models.CodeableConcept();
            objService.DeserializeJson(ref reader, options);
            Service.Add(objService);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Service.Count == 0)
          {
            Service = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementRestResourceInteraction>))]
  public class CapabilityStatementRestResourceInteraction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Coded identifier of the operation, supported by the system resource.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR4.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.rest.resource.interaction.code field
  /// </summary>
  public static class CapabilityStatementRestResourceInteractionCodeCodes {
    public const string READ = "read";
    public const string VREAD = "vread";
    public const string UPDATE = "update";
    public const string PATCH = "patch";
    public const string DELETE = "delete";
    public const string HISTORY_INSTANCE = "history-instance";
    public const string HISTORY_TYPE = "history-type";
    public const string CREATE = "create";
    public const string SEARCH_TYPE = "search-type";
  }
  /// <summary>
  /// The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementRestResourceSearchParam>))]
  public class CapabilityStatementRestResourceSearchParam : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This SHOULD be present, and matches refers to a SearchParameter by its canonical URL. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource. This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
    /// </summary>
    public string Definition { get; set; }
    /// <summary>
    /// Extension container element for Definition
    /// </summary>
    public Element _Definition { get; set; }
    /// <summary>
    /// This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Definition))
      {
        writer.WriteString("definition", (string)Definition!);
      }

      if (_Definition != null)
      {
        writer.WritePropertyName("_definition");
        _Definition.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "definition":
          Definition = reader.GetString();
          break;

        case "_definition":
          _Definition = new fhirCsR4.Models.Element();
          _Definition.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.rest.resource.searchParam.type field
  /// </summary>
  public static class CapabilityStatementRestResourceSearchParamTypeCodes {
    public const string NUMBER = "number";
    public const string DATE = "date";
    public const string VAL_STRING = "string";
    public const string TOKEN = "token";
    public const string REFERENCE = "reference";
    public const string COMPOSITE = "composite";
    public const string QUANTITY = "quantity";
    public const string URI = "uri";
    public const string SPECIAL = "special";
  }
  /// <summary>
  /// Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
  /// If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementRestResourceOperation>))]
  public class CapabilityStatementRestResourceOperation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This can be used to build an HTML form to invoke the operation, for instance.
    /// </summary>
    public string Definition { get; set; }
    /// <summary>
    /// Extension container element for Definition
    /// </summary>
    public Element _Definition { get; set; }
    /// <summary>
    /// Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// The name here SHOULD be the same as the name in the definition, unless there is a name clash and the name cannot be used. The name does not include the "$" portion that is always included in the URL.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Definition))
      {
        writer.WriteString("definition", (string)Definition!);
      }

      if (_Definition != null)
      {
        writer.WritePropertyName("_definition");
        _Definition.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "definition":
          Definition = reader.GetString();
          break;

        case "_definition":
          _Definition = new fhirCsR4.Models.Element();
          _Definition.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Max of one repetition per resource type.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementRestResource>))]
  public class CapabilityStatementRestResource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.
    /// </summary>
    public bool? ConditionalCreate { get; set; }
    /// <summary>
    /// Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.
    /// </summary>
    public string ConditionalDelete { get; set; }
    /// <summary>
    /// Extension container element for ConditionalDelete
    /// </summary>
    public Element _ConditionalDelete { get; set; }
    /// <summary>
    /// Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.
    /// </summary>
    public string ConditionalRead { get; set; }
    /// <summary>
    /// Extension container element for ConditionalRead
    /// </summary>
    public Element _ConditionalRead { get; set; }
    /// <summary>
    /// Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.
    /// </summary>
    public bool? ConditionalUpdate { get; set; }
    /// <summary>
    /// Additional information about the resource type used by the system.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// In general, a Resource will only appear in a CapabilityStatement if the server actually has some capabilities - e.g. there is at least one interaction supported. However interactions can be omitted to support summarization (_summary = true).
    /// </summary>
    public List<CapabilityStatementRestResourceInteraction> Interaction { get; set; }
    /// <summary>
    /// Operations linked from CapabilityStatement.rest.resource.operation must have OperationDefinition.type = true or OperationDefinition.instance = true.    
    /// If an operation that is listed in multiple CapabilityStatement.rest.resource.operation (e.g. for different resource types), then clients should understand that the operation is only supported on the specified resource types, and that may be a subset of those listed in OperationDefinition.resource.
    /// </summary>
    public List<CapabilityStatementRestResourceOperation> Operation { get; set; }
    /// <summary>
    /// The profile applies to all  resources of this type - i.e. it is the superset of what is supported by the system.
    /// </summary>
    public string Profile { get; set; }
    /// <summary>
    /// Extension container element for Profile
    /// </summary>
    public Element _Profile { get; set; }
    /// <summary>
    /// It is useful to support the vRead operation for current operations, even if past versions aren't available.
    /// </summary>
    public bool? ReadHistory { get; set; }
    /// <summary>
    /// A set of flags that defines how references are supported.
    /// </summary>
    public List<string> ReferencePolicy { get; set; }
    /// <summary>
    /// Extension container element for ReferencePolicy
    /// </summary>
    public List<Element> _ReferencePolicy { get; set; }
    /// <summary>
    /// If this list is empty, the server does not support includes.
    /// </summary>
    public List<string> SearchInclude { get; set; }
    /// <summary>
    /// Extension container element for SearchInclude
    /// </summary>
    public List<Element> _SearchInclude { get; set; }
    /// <summary>
    /// The search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
    /// </summary>
    public List<CapabilityStatementRestResourceSearchParam> SearchParam { get; set; }
    /// <summary>
    /// If this list is empty, the server does not support reverse includes.
    /// </summary>
    public List<string> SearchRevInclude { get; set; }
    /// <summary>
    /// Extension container element for SearchRevInclude
    /// </summary>
    public List<Element> _SearchRevInclude { get; set; }
    /// <summary>
    /// Supported profiles are different than the profile that applies to a particular resource in .rest.resource.profile. The resource profile is a general statement of what features of the resource are supported overall by the system - the sum total of the facilities it supports. A supported profile is a deeper statement about the functionality of the data and services provided by the server (or used by the client). A typical case is a laboratory system that produces a set of different reports - this is the list of types of data that it publishes. A key aspect of declaring profiles here is the question of how the client converts knowledge that the server publishes this data into working with the data; the client can inspect individual resources to determine whether they conform to a particular profile, but how does it find the ones that do? It does so by searching using the _profile parameter, so any resources listed here must be valid values for the _profile resource (using the identifier in the target profile).
    /// </summary>
    public List<string> SupportedProfile { get; set; }
    /// <summary>
    /// Extension container element for SupportedProfile
    /// </summary>
    public List<Element> _SupportedProfile { get; set; }
    /// <summary>
    /// A type of resource exposed via the restful interface.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won't happen. While creating identities on the client means that the clients need to be managed, it's much more convenient for many scenarios if such management can be put in place.
    /// </summary>
    public bool? UpdateCreate { get; set; }
    /// <summary>
    /// If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.
    /// </summary>
    public string Versioning { get; set; }
    /// <summary>
    /// Extension container element for Versioning
    /// </summary>
    public Element _Versioning { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Profile))
      {
        writer.WriteString("profile", (string)Profile!);
      }

      if (_Profile != null)
      {
        writer.WritePropertyName("_profile");
        _Profile.SerializeJson(writer, options);
      }

      if ((SupportedProfile != null) && (SupportedProfile.Count != 0))
      {
        writer.WritePropertyName("supportedProfile");
        writer.WriteStartArray();

        foreach (string valSupportedProfile in SupportedProfile)
        {
          writer.WriteStringValue(valSupportedProfile);
        }

        writer.WriteEndArray();
      }

      if ((_SupportedProfile != null) && (_SupportedProfile.Count != 0))
      {
        writer.WritePropertyName("_supportedProfile");
        writer.WriteStartArray();

        foreach (Element val_SupportedProfile in _SupportedProfile)
        {
          val_SupportedProfile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((Interaction != null) && (Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();

        foreach (CapabilityStatementRestResourceInteraction valInteraction in Interaction)
        {
          valInteraction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Versioning))
      {
        writer.WriteString("versioning", (string)Versioning!);
      }

      if (_Versioning != null)
      {
        writer.WritePropertyName("_versioning");
        _Versioning.SerializeJson(writer, options);
      }

      if (ReadHistory != null)
      {
        writer.WriteBoolean("readHistory", (bool)ReadHistory!);
      }

      if (UpdateCreate != null)
      {
        writer.WriteBoolean("updateCreate", (bool)UpdateCreate!);
      }

      if (ConditionalCreate != null)
      {
        writer.WriteBoolean("conditionalCreate", (bool)ConditionalCreate!);
      }

      if (!string.IsNullOrEmpty(ConditionalRead))
      {
        writer.WriteString("conditionalRead", (string)ConditionalRead!);
      }

      if (_ConditionalRead != null)
      {
        writer.WritePropertyName("_conditionalRead");
        _ConditionalRead.SerializeJson(writer, options);
      }

      if (ConditionalUpdate != null)
      {
        writer.WriteBoolean("conditionalUpdate", (bool)ConditionalUpdate!);
      }

      if (!string.IsNullOrEmpty(ConditionalDelete))
      {
        writer.WriteString("conditionalDelete", (string)ConditionalDelete!);
      }

      if (_ConditionalDelete != null)
      {
        writer.WritePropertyName("_conditionalDelete");
        _ConditionalDelete.SerializeJson(writer, options);
      }

      if ((ReferencePolicy != null) && (ReferencePolicy.Count != 0))
      {
        writer.WritePropertyName("referencePolicy");
        writer.WriteStartArray();

        foreach (string valReferencePolicy in ReferencePolicy)
        {
          writer.WriteStringValue(valReferencePolicy);
        }

        writer.WriteEndArray();
      }

      if ((_ReferencePolicy != null) && (_ReferencePolicy.Count != 0))
      {
        writer.WritePropertyName("_referencePolicy");
        writer.WriteStartArray();

        foreach (Element val_ReferencePolicy in _ReferencePolicy)
        {
          val_ReferencePolicy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SearchInclude != null) && (SearchInclude.Count != 0))
      {
        writer.WritePropertyName("searchInclude");
        writer.WriteStartArray();

        foreach (string valSearchInclude in SearchInclude)
        {
          writer.WriteStringValue(valSearchInclude);
        }

        writer.WriteEndArray();
      }

      if ((_SearchInclude != null) && (_SearchInclude.Count != 0))
      {
        writer.WritePropertyName("_searchInclude");
        writer.WriteStartArray();

        foreach (Element val_SearchInclude in _SearchInclude)
        {
          val_SearchInclude.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SearchRevInclude != null) && (SearchRevInclude.Count != 0))
      {
        writer.WritePropertyName("searchRevInclude");
        writer.WriteStartArray();

        foreach (string valSearchRevInclude in SearchRevInclude)
        {
          writer.WriteStringValue(valSearchRevInclude);
        }

        writer.WriteEndArray();
      }

      if ((_SearchRevInclude != null) && (_SearchRevInclude.Count != 0))
      {
        writer.WritePropertyName("_searchRevInclude");
        writer.WriteStartArray();

        foreach (Element val_SearchRevInclude in _SearchRevInclude)
        {
          val_SearchRevInclude.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SearchParam != null) && (SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();

        foreach (CapabilityStatementRestResourceSearchParam valSearchParam in SearchParam)
        {
          valSearchParam.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Operation != null) && (Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();

        foreach (CapabilityStatementRestResourceOperation valOperation in Operation)
        {
          valOperation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "conditionalCreate":
          ConditionalCreate = reader.GetBoolean();
          break;

        case "conditionalDelete":
          ConditionalDelete = reader.GetString();
          break;

        case "_conditionalDelete":
          _ConditionalDelete = new fhirCsR4.Models.Element();
          _ConditionalDelete.DeserializeJson(ref reader, options);
          break;

        case "conditionalRead":
          ConditionalRead = reader.GetString();
          break;

        case "_conditionalRead":
          _ConditionalRead = new fhirCsR4.Models.Element();
          _ConditionalRead.DeserializeJson(ref reader, options);
          break;

        case "conditionalUpdate":
          ConditionalUpdate = reader.GetBoolean();
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interaction = new List<CapabilityStatementRestResourceInteraction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementRestResourceInteraction objInteraction = new fhirCsR4.Models.CapabilityStatementRestResourceInteraction();
            objInteraction.DeserializeJson(ref reader, options);
            Interaction.Add(objInteraction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interaction.Count == 0)
          {
            Interaction = null;
          }

          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Operation = new List<CapabilityStatementRestResourceOperation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementRestResourceOperation objOperation = new fhirCsR4.Models.CapabilityStatementRestResourceOperation();
            objOperation.DeserializeJson(ref reader, options);
            Operation.Add(objOperation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Operation.Count == 0)
          {
            Operation = null;
          }

          break;

        case "profile":
          Profile = reader.GetString();
          break;

        case "_profile":
          _Profile = new fhirCsR4.Models.Element();
          _Profile.DeserializeJson(ref reader, options);
          break;

        case "readHistory":
          ReadHistory = reader.GetBoolean();
          break;

        case "referencePolicy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReferencePolicy = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ReferencePolicy.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReferencePolicy.Count == 0)
          {
            ReferencePolicy = null;
          }

          break;

        case "_referencePolicy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ReferencePolicy = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_ReferencePolicy = new fhirCsR4.Models.Element();
            obj_ReferencePolicy.DeserializeJson(ref reader, options);
            _ReferencePolicy.Add(obj_ReferencePolicy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ReferencePolicy.Count == 0)
          {
            _ReferencePolicy = null;
          }

          break;

        case "searchInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchInclude = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SearchInclude.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchInclude.Count == 0)
          {
            SearchInclude = null;
          }

          break;

        case "_searchInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SearchInclude = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_SearchInclude = new fhirCsR4.Models.Element();
            obj_SearchInclude.DeserializeJson(ref reader, options);
            _SearchInclude.Add(obj_SearchInclude);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SearchInclude.Count == 0)
          {
            _SearchInclude = null;
          }

          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchParam = new List<CapabilityStatementRestResourceSearchParam>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementRestResourceSearchParam objSearchParam = new fhirCsR4.Models.CapabilityStatementRestResourceSearchParam();
            objSearchParam.DeserializeJson(ref reader, options);
            SearchParam.Add(objSearchParam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchParam.Count == 0)
          {
            SearchParam = null;
          }

          break;

        case "searchRevInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchRevInclude = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SearchRevInclude.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchRevInclude.Count == 0)
          {
            SearchRevInclude = null;
          }

          break;

        case "_searchRevInclude":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SearchRevInclude = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_SearchRevInclude = new fhirCsR4.Models.Element();
            obj_SearchRevInclude.DeserializeJson(ref reader, options);
            _SearchRevInclude.Add(obj_SearchRevInclude);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SearchRevInclude.Count == 0)
          {
            _SearchRevInclude = null;
          }

          break;

        case "supportedProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportedProfile = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SupportedProfile.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportedProfile.Count == 0)
          {
            SupportedProfile = null;
          }

          break;

        case "_supportedProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SupportedProfile = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_SupportedProfile = new fhirCsR4.Models.Element();
            obj_SupportedProfile.DeserializeJson(ref reader, options);
            _SupportedProfile.Add(obj_SupportedProfile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SupportedProfile.Count == 0)
          {
            _SupportedProfile = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "updateCreate":
          UpdateCreate = reader.GetBoolean();
          break;

        case "versioning":
          Versioning = reader.GetString();
          break;

        case "_versioning":
          _Versioning = new fhirCsR4.Models.Element();
          _Versioning.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.rest.resource.conditionalDelete field
  /// </summary>
  public static class CapabilityStatementRestResourceConditionalDeleteCodes {
    public const string NOT_SUPPORTED = "not-supported";
    public const string SINGLE = "single";
    public const string MULTIPLE = "multiple";
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.rest.resource.conditionalRead field
  /// </summary>
  public static class CapabilityStatementRestResourceConditionalReadCodes {
    public const string NOT_SUPPORTED = "not-supported";
    public const string MODIFIED_SINCE = "modified-since";
    public const string NOT_MATCH = "not-match";
    public const string FULL_SUPPORT = "full-support";
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.rest.resource.referencePolicy field
  /// </summary>
  public static class CapabilityStatementRestResourceReferencePolicyCodes {
    public const string LITERAL = "literal";
    public const string LOGICAL = "logical";
    public const string RESOLVES = "resolves";
    public const string ENFORCED = "enforced";
    public const string LOCAL = "local";
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.rest.resource.versioning field
  /// </summary>
  public static class CapabilityStatementRestResourceVersioningCodes {
    public const string NO_VERSION = "no-version";
    public const string VERSIONED = "versioned";
    public const string VERSIONED_UPDATE = "versioned-update";
  }
  /// <summary>
  /// A specification of restful operations supported by the system.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementRestInteraction>))]
  public class CapabilityStatementRestInteraction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A coded identifier of the operation, supported by the system.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR4.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.rest.interaction.code field
  /// </summary>
  public static class CapabilityStatementRestInteractionCodeCodes {
    public const string TRANSACTION = "transaction";
    public const string BATCH = "batch";
    public const string SEARCH_SYSTEM = "search-system";
    public const string HISTORY_SYSTEM = "history-system";
  }
  /// <summary>
  /// Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementRest>))]
  public class CapabilityStatementRest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).
    /// </summary>
    public List<string> Compartment { get; set; }
    /// <summary>
    /// Extension container element for Compartment
    /// </summary>
    public List<Element> _Compartment { get; set; }
    /// <summary>
    /// Information about the system's restful capabilities that apply across all applications, such as security.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// A specification of restful operations supported by the system.
    /// </summary>
    public List<CapabilityStatementRestInteraction> Interaction { get; set; }
    /// <summary>
    /// Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// CapabilityStatement.rest.operation is for operations invoked at the system level, or for operations that are supported across multiple resource types. Operations linked from CapabilityStatement.rest.operation must have OperationDefinition.system = true, or more than one Operation.resource.
    /// </summary>
    public List<CapabilityStatementRestResourceOperation> Operation { get; set; }
    /// <summary>
    /// Max of one repetition per resource type.
    /// </summary>
    public List<CapabilityStatementRestResource> Resource { get; set; }
    /// <summary>
    /// Typically, the only search parameters supported for all searches are those that apply to all resources - tags, profiles, text search etc. These search parameters should include the control search parameters such as _sort, _count, etc. that also apply to this resource (though many will be listed at [CapabilityStatement.rest.searchParam](capabilitystatement-definitions.html#CapabilityStatement.rest.searchParam)). The behavior of some search parameters may be further described by other code or extension elements, or narrative within the capability statement or linked [SearchParameter](searchparameter.html#) definitions.
    /// </summary>
    public List<CapabilityStatementRestResourceSearchParam> SearchParam { get; set; }
    /// <summary>
    /// Information about security implementation from an interface perspective - what a client needs to know.
    /// </summary>
    public CapabilityStatementRestSecurity Security { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (Security != null)
      {
        writer.WritePropertyName("security");
        Security.SerializeJson(writer, options);
      }

      if ((Resource != null) && (Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();

        foreach (CapabilityStatementRestResource valResource in Resource)
        {
          valResource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Interaction != null) && (Interaction.Count != 0))
      {
        writer.WritePropertyName("interaction");
        writer.WriteStartArray();

        foreach (CapabilityStatementRestInteraction valInteraction in Interaction)
        {
          valInteraction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SearchParam != null) && (SearchParam.Count != 0))
      {
        writer.WritePropertyName("searchParam");
        writer.WriteStartArray();

        foreach (CapabilityStatementRestResourceSearchParam valSearchParam in SearchParam)
        {
          valSearchParam.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Operation != null) && (Operation.Count != 0))
      {
        writer.WritePropertyName("operation");
        writer.WriteStartArray();

        foreach (CapabilityStatementRestResourceOperation valOperation in Operation)
        {
          valOperation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Compartment != null) && (Compartment.Count != 0))
      {
        writer.WritePropertyName("compartment");
        writer.WriteStartArray();

        foreach (string valCompartment in Compartment)
        {
          writer.WriteStringValue(valCompartment);
        }

        writer.WriteEndArray();
      }

      if ((_Compartment != null) && (_Compartment.Count != 0))
      {
        writer.WritePropertyName("_compartment");
        writer.WriteStartArray();

        foreach (Element val_Compartment in _Compartment)
        {
          val_Compartment.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Compartment = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Compartment.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Compartment.Count == 0)
          {
            Compartment = null;
          }

          break;

        case "_compartment":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Compartment = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Compartment = new fhirCsR4.Models.Element();
            obj_Compartment.DeserializeJson(ref reader, options);
            _Compartment.Add(obj_Compartment);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Compartment.Count == 0)
          {
            _Compartment = null;
          }

          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "interaction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Interaction = new List<CapabilityStatementRestInteraction>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementRestInteraction objInteraction = new fhirCsR4.Models.CapabilityStatementRestInteraction();
            objInteraction.DeserializeJson(ref reader, options);
            Interaction.Add(objInteraction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Interaction.Count == 0)
          {
            Interaction = null;
          }

          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR4.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "operation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Operation = new List<CapabilityStatementRestResourceOperation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementRestResourceOperation objOperation = new fhirCsR4.Models.CapabilityStatementRestResourceOperation();
            objOperation.DeserializeJson(ref reader, options);
            Operation.Add(objOperation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Operation.Count == 0)
          {
            Operation = null;
          }

          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Resource = new List<CapabilityStatementRestResource>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementRestResource objResource = new fhirCsR4.Models.CapabilityStatementRestResource();
            objResource.DeserializeJson(ref reader, options);
            Resource.Add(objResource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Resource.Count == 0)
          {
            Resource = null;
          }

          break;

        case "searchParam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SearchParam = new List<CapabilityStatementRestResourceSearchParam>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementRestResourceSearchParam objSearchParam = new fhirCsR4.Models.CapabilityStatementRestResourceSearchParam();
            objSearchParam.DeserializeJson(ref reader, options);
            SearchParam.Add(objSearchParam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SearchParam.Count == 0)
          {
            SearchParam = null;
          }

          break;

        case "security":
          Security = new fhirCsR4.Models.CapabilityStatementRestSecurity();
          Security.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.rest.mode field
  /// </summary>
  public static class CapabilityStatementRestModeCodes {
    public const string CLIENT = "client";
    public const string SERVER = "server";
  }
  /// <summary>
  /// An endpoint (network accessible address) to which messages and/or replies are to be sent.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementMessagingEndpoint>))]
  public class CapabilityStatementMessagingEndpoint : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.
    /// </summary>
    public string Address { get; set; }
    /// <summary>
    /// Extension container element for Address
    /// </summary>
    public Element _Address { get; set; }
    /// <summary>
    /// A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
    /// </summary>
    public Coding Protocol { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Protocol != null)
      {
        writer.WritePropertyName("protocol");
        Protocol.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Address))
      {
        writer.WriteString("address", (string)Address!);
      }

      if (_Address != null)
      {
        writer.WritePropertyName("_address");
        _Address.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "address":
          Address = reader.GetString();
          break;

        case "_address":
          _Address = new fhirCsR4.Models.Element();
          _Address.DeserializeJson(ref reader, options);
          break;

        case "protocol":
          Protocol = new fhirCsR4.Models.Coding();
          Protocol.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// This is a proposed alternative to the messaging.event structure.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementMessagingSupportedMessage>))]
  public class CapabilityStatementMessagingSupportedMessage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
    /// </summary>
    public string Definition { get; set; }
    /// <summary>
    /// Extension container element for Definition
    /// </summary>
    public Element _Definition { get; set; }
    /// <summary>
    /// The mode of this event declaration - whether application is sender or receiver.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Definition))
      {
        writer.WriteString("definition", (string)Definition!);
      }

      if (_Definition != null)
      {
        writer.WritePropertyName("_definition");
        _Definition.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "definition":
          Definition = reader.GetString();
          break;

        case "_definition":
          _Definition = new fhirCsR4.Models.Element();
          _Definition.DeserializeJson(ref reader, options);
          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR4.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.messaging.supportedMessage.mode field
  /// </summary>
  public static class CapabilityStatementMessagingSupportedMessageModeCodes {
    public const string SENDER = "sender";
    public const string RECEIVER = "receiver";
  }
  /// <summary>
  /// Multiple repetitions allow the documentation of multiple endpoints per solution.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementMessaging>))]
  public class CapabilityStatementMessaging : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// An endpoint (network accessible address) to which messages and/or replies are to be sent.
    /// </summary>
    public List<CapabilityStatementMessagingEndpoint> Endpoint { get; set; }
    /// <summary>
    /// If this value is missing then the application does not implement (receiver) or depend on (sender) reliable messaging.
    /// </summary>
    public uint? ReliableCache { get; set; }
    /// <summary>
    /// This is a proposed alternative to the messaging.event structure.
    /// </summary>
    public List<CapabilityStatementMessagingSupportedMessage> SupportedMessage { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Endpoint != null) && (Endpoint.Count != 0))
      {
        writer.WritePropertyName("endpoint");
        writer.WriteStartArray();

        foreach (CapabilityStatementMessagingEndpoint valEndpoint in Endpoint)
        {
          valEndpoint.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ReliableCache != null)
      {
        writer.WriteNumber("reliableCache", (uint)ReliableCache!);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if ((SupportedMessage != null) && (SupportedMessage.Count != 0))
      {
        writer.WritePropertyName("supportedMessage");
        writer.WriteStartArray();

        foreach (CapabilityStatementMessagingSupportedMessage valSupportedMessage in SupportedMessage)
        {
          valSupportedMessage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "endpoint":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Endpoint = new List<CapabilityStatementMessagingEndpoint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementMessagingEndpoint objEndpoint = new fhirCsR4.Models.CapabilityStatementMessagingEndpoint();
            objEndpoint.DeserializeJson(ref reader, options);
            Endpoint.Add(objEndpoint);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Endpoint.Count == 0)
          {
            Endpoint = null;
          }

          break;

        case "reliableCache":
          ReliableCache = reader.GetUInt32();
          break;

        case "supportedMessage":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportedMessage = new List<CapabilityStatementMessagingSupportedMessage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementMessagingSupportedMessage objSupportedMessage = new fhirCsR4.Models.CapabilityStatementMessagingSupportedMessage();
            objSupportedMessage.DeserializeJson(ref reader, options);
            SupportedMessage.Add(objSupportedMessage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportedMessage.Count == 0)
          {
            SupportedMessage = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A document definition.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatementDocument>))]
  public class CapabilityStatementDocument : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// Mode of this document declaration - whether an application is a producer or consumer.
    /// </summary>
    public string Mode { get; set; }
    /// <summary>
    /// Extension container element for Mode
    /// </summary>
    public Element _Mode { get; set; }
    /// <summary>
    /// The profile is actually on the Bundle.
    /// </summary>
    public string Profile { get; set; }
    /// <summary>
    /// Extension container element for Profile
    /// </summary>
    public Element _Profile { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Mode))
      {
        writer.WriteString("mode", (string)Mode!);
      }

      if (_Mode != null)
      {
        writer.WritePropertyName("_mode");
        _Mode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Profile))
      {
        writer.WriteString("profile", (string)Profile!);
      }

      if (_Profile != null)
      {
        writer.WritePropertyName("_profile");
        _Profile.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "mode":
          Mode = reader.GetString();
          break;

        case "_mode":
          _Mode = new fhirCsR4.Models.Element();
          _Mode.DeserializeJson(ref reader, options);
          break;

        case "profile":
          Profile = reader.GetString();
          break;

        case "_profile":
          _Profile = new fhirCsR4.Models.Element();
          _Profile.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.document.mode field
  /// </summary>
  public static class CapabilityStatementDocumentModeCodes {
    public const string PRODUCER = "producer";
    public const string CONSUMER = "consumer";
  }
  /// <summary>
  /// A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<CapabilityStatement>))]
  public class CapabilityStatement : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "CapabilityStatement";
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the capability statement. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the capability statement was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the capability statement as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the capability statement is presumed to be the predominant language in the place the capability statement was created).This does not need to be populated if the description is adequately implied by the software or implementation details.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// A document definition.
    /// </summary>
    public List<CapabilityStatementDocument> Document { get; set; }
    /// <summary>
    /// Allows filtering of capability statements that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Servers may implement multiple versions (see [Managing Multiple Versions](versioning.html), and the [$versions](capabilitystatement-operation-versions.html) operation). If they do, and the CapabilityStatement is requested from the server, then this fhirVersion will be either the version requested, or the server's default version.
    /// </summary>
    public string FhirVersion { get; set; }
    /// <summary>
    /// Extension container element for FhirVersion
    /// </summary>
    public Element _FhirVersion { get; set; }
    /// <summary>
    /// "xml", "json" and "ttl" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.
    /// </summary>
    public List<string> Format { get; set; }
    /// <summary>
    /// Extension container element for Format
    /// </summary>
    public List<Element> _Format { get; set; }
    /// <summary>
    /// Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
    /// </summary>
    public CapabilityStatementImplementation Implementation { get; set; }
    /// <summary>
    /// A list of implementation guides that the server does (or should) support in their entirety.
    /// </summary>
    public List<string> ImplementationGuide { get; set; }
    /// <summary>
    /// Extension container element for ImplementationGuide
    /// </summary>
    public List<Element> _ImplementationGuide { get; set; }
    /// <summary>
    /// the contents of any directly or indirectly imported CapabilityStatements SHALL NOT overlap, i.e. they cannot refer to the same rest/resource, operations/name, searchparam/name, interaction/code, messaging/endpoint, document/mode pair.
    /// A capability statement that imports another CapabilityStatement automatically instantiates it too (though this is often not a very useful statement for the kinds of CapabilityStatements that are suitable for importing).
    /// </summary>
    public List<string> Imports { get; set; }
    /// <summary>
    /// Extension container element for Imports
    /// </summary>
    public List<Element> _Imports { get; set; }
    /// <summary>
    /// HL7 defines the following Services: [Terminology Service](terminology-service.html).    
    /// Many [Implementation Guides](http://fhir.org/guides/registry) define additional services.
    /// </summary>
    public List<string> Instantiates { get; set; }
    /// <summary>
    /// Extension container element for Instantiates
    /// </summary>
    public List<Element> _Instantiates { get; set; }
    /// <summary>
    /// It may be possible for the capability statement to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// Multiple repetitions allow the documentation of multiple endpoints per solution.
    /// </summary>
    public List<CapabilityStatementMessaging> Messaging { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.
    /// </summary>
    public List<string> PatchFormat { get; set; }
    /// <summary>
    /// Extension container element for PatchFormat
    /// </summary>
    public List<Element> _PatchFormat { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the capability statement is the organization or individual primarily responsible for the maintenance and upkeep of the capability statement. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the capability statement. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the capability statement. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this capability statement.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).
    /// </summary>
    public List<CapabilityStatementRest> Rest { get; set; }
    /// <summary>
    /// Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
    /// </summary>
    public CapabilityStatementSoftware Software { get; set; }
    /// <summary>
    /// Allows filtering of capability statements that are appropriate for use versus not.This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different capability statement instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the capability statement with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Kind))
      {
        writer.WriteString("kind", (string)Kind!);
      }

      if (_Kind != null)
      {
        writer.WritePropertyName("_kind");
        _Kind.SerializeJson(writer, options);
      }

      if ((Instantiates != null) && (Instantiates.Count != 0))
      {
        writer.WritePropertyName("instantiates");
        writer.WriteStartArray();

        foreach (string valInstantiates in Instantiates)
        {
          writer.WriteStringValue(valInstantiates);
        }

        writer.WriteEndArray();
      }

      if ((_Instantiates != null) && (_Instantiates.Count != 0))
      {
        writer.WritePropertyName("_instantiates");
        writer.WriteStartArray();

        foreach (Element val_Instantiates in _Instantiates)
        {
          val_Instantiates.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Imports != null) && (Imports.Count != 0))
      {
        writer.WritePropertyName("imports");
        writer.WriteStartArray();

        foreach (string valImports in Imports)
        {
          writer.WriteStringValue(valImports);
        }

        writer.WriteEndArray();
      }

      if ((_Imports != null) && (_Imports.Count != 0))
      {
        writer.WritePropertyName("_imports");
        writer.WriteStartArray();

        foreach (Element val_Imports in _Imports)
        {
          val_Imports.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Software != null)
      {
        writer.WritePropertyName("software");
        Software.SerializeJson(writer, options);
      }

      if (Implementation != null)
      {
        writer.WritePropertyName("implementation");
        Implementation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(FhirVersion))
      {
        writer.WriteString("fhirVersion", (string)FhirVersion!);
      }

      if (_FhirVersion != null)
      {
        writer.WritePropertyName("_fhirVersion");
        _FhirVersion.SerializeJson(writer, options);
      }

      if ((Format != null) && (Format.Count != 0))
      {
        writer.WritePropertyName("format");
        writer.WriteStartArray();

        foreach (string valFormat in Format)
        {
          writer.WriteStringValue(valFormat);
        }

        writer.WriteEndArray();
      }

      if ((_Format != null) && (_Format.Count != 0))
      {
        writer.WritePropertyName("_format");
        writer.WriteStartArray();

        foreach (Element val_Format in _Format)
        {
          val_Format.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((PatchFormat != null) && (PatchFormat.Count != 0))
      {
        writer.WritePropertyName("patchFormat");
        writer.WriteStartArray();

        foreach (string valPatchFormat in PatchFormat)
        {
          writer.WriteStringValue(valPatchFormat);
        }

        writer.WriteEndArray();
      }

      if ((_PatchFormat != null) && (_PatchFormat.Count != 0))
      {
        writer.WritePropertyName("_patchFormat");
        writer.WriteStartArray();

        foreach (Element val_PatchFormat in _PatchFormat)
        {
          val_PatchFormat.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ImplementationGuide != null) && (ImplementationGuide.Count != 0))
      {
        writer.WritePropertyName("implementationGuide");
        writer.WriteStartArray();

        foreach (string valImplementationGuide in ImplementationGuide)
        {
          writer.WriteStringValue(valImplementationGuide);
        }

        writer.WriteEndArray();
      }

      if ((_ImplementationGuide != null) && (_ImplementationGuide.Count != 0))
      {
        writer.WritePropertyName("_implementationGuide");
        writer.WriteStartArray();

        foreach (Element val_ImplementationGuide in _ImplementationGuide)
        {
          val_ImplementationGuide.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Rest != null) && (Rest.Count != 0))
      {
        writer.WritePropertyName("rest");
        writer.WriteStartArray();

        foreach (CapabilityStatementRest valRest in Rest)
        {
          valRest.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Messaging != null) && (Messaging.Count != 0))
      {
        writer.WritePropertyName("messaging");
        writer.WriteStartArray();

        foreach (CapabilityStatementMessaging valMessaging in Messaging)
        {
          valMessaging.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Document != null) && (Document.Count != 0))
      {
        writer.WritePropertyName("document");
        writer.WriteStartArray();

        foreach (CapabilityStatementDocument valDocument in Document)
        {
          valDocument.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactDetail objContact = new fhirCsR4.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "document":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Document = new List<CapabilityStatementDocument>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementDocument objDocument = new fhirCsR4.Models.CapabilityStatementDocument();
            objDocument.DeserializeJson(ref reader, options);
            Document.Add(objDocument);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Document.Count == 0)
          {
            Document = null;
          }

          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "fhirVersion":
          FhirVersion = reader.GetString();
          break;

        case "_fhirVersion":
          _FhirVersion = new fhirCsR4.Models.Element();
          _FhirVersion.DeserializeJson(ref reader, options);
          break;

        case "format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Format = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Format.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Format.Count == 0)
          {
            Format = null;
          }

          break;

        case "_format":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Format = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Format = new fhirCsR4.Models.Element();
            obj_Format.DeserializeJson(ref reader, options);
            _Format.Add(obj_Format);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Format.Count == 0)
          {
            _Format = null;
          }

          break;

        case "implementation":
          Implementation = new fhirCsR4.Models.CapabilityStatementImplementation();
          Implementation.DeserializeJson(ref reader, options);
          break;

        case "implementationGuide":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ImplementationGuide = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ImplementationGuide.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ImplementationGuide.Count == 0)
          {
            ImplementationGuide = null;
          }

          break;

        case "_implementationGuide":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ImplementationGuide = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_ImplementationGuide = new fhirCsR4.Models.Element();
            obj_ImplementationGuide.DeserializeJson(ref reader, options);
            _ImplementationGuide.Add(obj_ImplementationGuide);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ImplementationGuide.Count == 0)
          {
            _ImplementationGuide = null;
          }

          break;

        case "imports":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Imports = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Imports.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Imports.Count == 0)
          {
            Imports = null;
          }

          break;

        case "_imports":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Imports = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Imports = new fhirCsR4.Models.Element();
            obj_Imports.DeserializeJson(ref reader, options);
            _Imports.Add(obj_Imports);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Imports.Count == 0)
          {
            _Imports = null;
          }

          break;

        case "instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Instantiates = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Instantiates.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Instantiates.Count == 0)
          {
            Instantiates = null;
          }

          break;

        case "_instantiates":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Instantiates = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Instantiates = new fhirCsR4.Models.Element();
            obj_Instantiates.DeserializeJson(ref reader, options);
            _Instantiates.Add(obj_Instantiates);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Instantiates.Count == 0)
          {
            _Instantiates = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objJurisdiction = new fhirCsR4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new fhirCsR4.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        case "messaging":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Messaging = new List<CapabilityStatementMessaging>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementMessaging objMessaging = new fhirCsR4.Models.CapabilityStatementMessaging();
            objMessaging.DeserializeJson(ref reader, options);
            Messaging.Add(objMessaging);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Messaging.Count == 0)
          {
            Messaging = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "patchFormat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PatchFormat = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PatchFormat.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PatchFormat.Count == 0)
          {
            PatchFormat = null;
          }

          break;

        case "_patchFormat":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PatchFormat = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_PatchFormat = new fhirCsR4.Models.Element();
            obj_PatchFormat.DeserializeJson(ref reader, options);
            _PatchFormat.Add(obj_PatchFormat);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PatchFormat.Count == 0)
          {
            _PatchFormat = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR4.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR4.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "rest":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Rest = new List<CapabilityStatementRest>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CapabilityStatementRest objRest = new fhirCsR4.Models.CapabilityStatementRest();
            objRest.DeserializeJson(ref reader, options);
            Rest.Add(objRest);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Rest.Count == 0)
          {
            Rest = null;
          }

          break;

        case "software":
          Software = new fhirCsR4.Models.CapabilityStatementSoftware();
          Software.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.UsageContext objUseContext = new fhirCsR4.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.format field
  /// </summary>
  public static class CapabilityStatementFormatCodes {
    public const string XML = "xml";
    public const string JSON = "json";
    public const string TTL = "ttl";
    public const string MIME = "MIME";
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.kind field
  /// </summary>
  public static class CapabilityStatementKindCodes {
    public const string INSTANCE = "instance";
    public const string CAPABILITY = "capability";
    public const string REQUIREMENTS = "requirements";
  }
  /// <summary>
  /// Code Values for the CapabilityStatement.status field
  /// </summary>
  public static class CapabilityStatementStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
