// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<QuestionnaireItemEnableWhen>))]
  public class QuestionnaireItemEnableWhen : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public bool? AnswerBoolean { get; set; }
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public decimal? AnswerDecimal { get; set; }
    /// <summary>
    /// Extension container element for AnswerDecimal
    /// </summary>
    public Element _AnswerDecimal { get; set; }
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public int? AnswerInteger { get; set; }
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public string AnswerDate { get; set; }
    /// <summary>
    /// Extension container element for AnswerDate
    /// </summary>
    public Element _AnswerDate { get; set; }
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public string AnswerDateTime { get; set; }
    /// <summary>
    /// Extension container element for AnswerDateTime
    /// </summary>
    public Element _AnswerDateTime { get; set; }
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public string AnswerTime { get; set; }
    /// <summary>
    /// Extension container element for AnswerTime
    /// </summary>
    public Element _AnswerTime { get; set; }
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public string AnswerString { get; set; }
    /// <summary>
    /// Extension container element for AnswerString
    /// </summary>
    public Element _AnswerString { get; set; }
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public Coding AnswerCoding { get; set; }
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public Quantity AnswerQuantity { get; set; }
    /// <summary>
    /// A value that the referenced question is tested using the specified operator in order for the item to be enabled.
    /// </summary>
    public Reference AnswerReference { get; set; }
    /// <summary>
    /// Specifies the criteria by which the question is enabled.
    /// </summary>
    public string Operator { get; set; }
    /// <summary>
    /// Extension container element for Operator
    /// </summary>
    public Element _Operator { get; set; }
    /// <summary>
    /// If multiple question occurrences are present for the same question (same linkId), then this refers to the nearest question occurrence reachable by tracing first the "ancestor" axis and then the "preceding" axis and then the "following" axis.
    /// </summary>
    public string Question { get; set; }
    /// <summary>
    /// Extension container element for Question
    /// </summary>
    public Element _Question { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Question))
      {
        writer.WriteString("question", (string)Question!);
      }

      if (_Question != null)
      {
        writer.WritePropertyName("_question");
        _Question.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Operator))
      {
        writer.WriteString("operator", (string)Operator!);
      }

      if (_Operator != null)
      {
        writer.WritePropertyName("_operator");
        _Operator.SerializeJson(writer, options);
      }

      if (AnswerBoolean != null)
      {
        writer.WriteBoolean("answerBoolean", (bool)AnswerBoolean!);
      }

      if (AnswerDecimal != null)
      {
        writer.WriteNumber("answerDecimal", (decimal)AnswerDecimal!);
      }

      if (_AnswerDecimal != null)
      {
        writer.WritePropertyName("_answerDecimal");
        _AnswerDecimal.SerializeJson(writer, options);
      }

      if (AnswerInteger != null)
      {
        writer.WriteNumber("answerInteger", (int)AnswerInteger!);
      }

      if (!string.IsNullOrEmpty(AnswerDate))
      {
        writer.WriteString("answerDate", (string)AnswerDate!);
      }

      if (_AnswerDate != null)
      {
        writer.WritePropertyName("_answerDate");
        _AnswerDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AnswerDateTime))
      {
        writer.WriteString("answerDateTime", (string)AnswerDateTime!);
      }

      if (_AnswerDateTime != null)
      {
        writer.WritePropertyName("_answerDateTime");
        _AnswerDateTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AnswerTime))
      {
        writer.WriteString("answerTime", (string)AnswerTime!);
      }

      if (_AnswerTime != null)
      {
        writer.WritePropertyName("_answerTime");
        _AnswerTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AnswerString))
      {
        writer.WriteString("answerString", (string)AnswerString!);
      }

      if (_AnswerString != null)
      {
        writer.WritePropertyName("_answerString");
        _AnswerString.SerializeJson(writer, options);
      }

      if (AnswerCoding != null)
      {
        writer.WritePropertyName("answerCoding");
        AnswerCoding.SerializeJson(writer, options);
      }

      if (AnswerQuantity != null)
      {
        writer.WritePropertyName("answerQuantity");
        AnswerQuantity.SerializeJson(writer, options);
      }

      if (AnswerReference != null)
      {
        writer.WritePropertyName("answerReference");
        AnswerReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "answerBoolean":
          AnswerBoolean = reader.GetBoolean();
          break;

        case "answerDecimal":
          AnswerDecimal = reader.GetDecimal();
          break;

        case "_answerDecimal":
          _AnswerDecimal = new fhirCsR4.Models.Element();
          _AnswerDecimal.DeserializeJson(ref reader, options);
          break;

        case "answerInteger":
          AnswerInteger = reader.GetInt32();
          break;

        case "answerDate":
          AnswerDate = reader.GetString();
          break;

        case "_answerDate":
          _AnswerDate = new fhirCsR4.Models.Element();
          _AnswerDate.DeserializeJson(ref reader, options);
          break;

        case "answerDateTime":
          AnswerDateTime = reader.GetString();
          break;

        case "_answerDateTime":
          _AnswerDateTime = new fhirCsR4.Models.Element();
          _AnswerDateTime.DeserializeJson(ref reader, options);
          break;

        case "answerTime":
          AnswerTime = reader.GetString();
          break;

        case "_answerTime":
          _AnswerTime = new fhirCsR4.Models.Element();
          _AnswerTime.DeserializeJson(ref reader, options);
          break;

        case "answerString":
          AnswerString = reader.GetString();
          break;

        case "_answerString":
          _AnswerString = new fhirCsR4.Models.Element();
          _AnswerString.DeserializeJson(ref reader, options);
          break;

        case "answerCoding":
          AnswerCoding = new fhirCsR4.Models.Coding();
          AnswerCoding.DeserializeJson(ref reader, options);
          break;

        case "answerQuantity":
          AnswerQuantity = new fhirCsR4.Models.Quantity();
          AnswerQuantity.DeserializeJson(ref reader, options);
          break;

        case "answerReference":
          AnswerReference = new fhirCsR4.Models.Reference();
          AnswerReference.DeserializeJson(ref reader, options);
          break;

        case "operator":
          Operator = reader.GetString();
          break;

        case "_operator":
          _Operator = new fhirCsR4.Models.Element();
          _Operator.DeserializeJson(ref reader, options);
          break;

        case "question":
          Question = reader.GetString();
          break;

        case "_question":
          _Question = new fhirCsR4.Models.Element();
          _Question.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Questionnaire.item.enableWhen.operator field
  /// </summary>
  public static class QuestionnaireItemEnableWhenOperatorCodes {
    public const string EXISTS = "exists";
    public const string EQUALS = "=";
    public const string NOT_EQUALS = "!=";
    public const string GREATER_THAN = ">";
    public const string LESS_THAN = "<";
    public const string GREATER_THAN_OR_EQUALS = ">=";
    public const string LESS_THAN_OR_EQUALS = "<=";
  }
  /// <summary>
  /// This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<QuestionnaireItemAnswerOption>))]
  public class QuestionnaireItemAnswerOption : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Use this instead of initial[v] if answerValueSet is present.
    /// </summary>
    public bool? InitialSelected { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public string ValueDate { get; set; }
    /// <summary>
    /// Extension container element for ValueDate
    /// </summary>
    public Element _ValueDate { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public string ValueTime { get; set; }
    /// <summary>
    /// Extension container element for ValueTime
    /// </summary>
    public Element _ValueTime { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public Coding ValueCoding { get; set; }
    /// <summary>
    /// The data type of the value must agree with the item.type.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (!string.IsNullOrEmpty(ValueDate))
      {
        writer.WriteString("valueDate", (string)ValueDate!);
      }

      if (_ValueDate != null)
      {
        writer.WritePropertyName("_valueDate");
        _ValueDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueTime))
      {
        writer.WriteString("valueTime", (string)ValueTime!);
      }

      if (_ValueTime != null)
      {
        writer.WritePropertyName("_valueTime");
        _ValueTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueCoding != null)
      {
        writer.WritePropertyName("valueCoding");
        ValueCoding.SerializeJson(writer, options);
      }

      if (ValueReference != null)
      {
        writer.WritePropertyName("valueReference");
        ValueReference.SerializeJson(writer, options);
      }

      if (InitialSelected != null)
      {
        writer.WriteBoolean("initialSelected", (bool)InitialSelected!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "initialSelected":
          InitialSelected = reader.GetBoolean();
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "valueDate":
          ValueDate = reader.GetString();
          break;

        case "_valueDate":
          _ValueDate = new fhirCsR4.Models.Element();
          _ValueDate.DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          ValueTime = reader.GetString();
          break;

        case "_valueTime":
          _ValueTime = new fhirCsR4.Models.Element();
          _ValueTime.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR4.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          ValueCoding = new fhirCsR4.Models.Coding();
          ValueCoding.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new fhirCsR4.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<QuestionnaireItemInitial>))]
  public class QuestionnaireItemInitial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public decimal? ValueDecimal { get; set; }
    /// <summary>
    /// Extension container element for ValueDecimal
    /// </summary>
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public string ValueDate { get; set; }
    /// <summary>
    /// Extension container element for ValueDate
    /// </summary>
    public Element _ValueDate { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public string ValueDateTime { get; set; }
    /// <summary>
    /// Extension container element for ValueDateTime
    /// </summary>
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public string ValueTime { get; set; }
    /// <summary>
    /// Extension container element for ValueTime
    /// </summary>
    public Element _ValueTime { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public string ValueUri { get; set; }
    /// <summary>
    /// Extension container element for ValueUri
    /// </summary>
    public Element _ValueUri { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public Coding ValueCoding { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The type of the initial value must be consistent with the type of the item.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (ValueDecimal != null)
      {
        writer.WriteNumber("valueDecimal", (decimal)ValueDecimal!);
      }

      if (_ValueDecimal != null)
      {
        writer.WritePropertyName("_valueDecimal");
        _ValueDecimal.SerializeJson(writer, options);
      }

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (!string.IsNullOrEmpty(ValueDate))
      {
        writer.WriteString("valueDate", (string)ValueDate!);
      }

      if (_ValueDate != null)
      {
        writer.WritePropertyName("_valueDate");
        _ValueDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDateTime))
      {
        writer.WriteString("valueDateTime", (string)ValueDateTime!);
      }

      if (_ValueDateTime != null)
      {
        writer.WritePropertyName("_valueDateTime");
        _ValueDateTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueTime))
      {
        writer.WriteString("valueTime", (string)ValueTime!);
      }

      if (_ValueTime != null)
      {
        writer.WritePropertyName("_valueTime");
        _ValueTime.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueUri))
      {
        writer.WriteString("valueUri", (string)ValueUri!);
      }

      if (_ValueUri != null)
      {
        writer.WritePropertyName("_valueUri");
        _ValueUri.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (ValueCoding != null)
      {
        writer.WritePropertyName("valueCoding");
        ValueCoding.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueReference != null)
      {
        writer.WritePropertyName("valueReference");
        ValueReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "valueDecimal":
          ValueDecimal = reader.GetDecimal();
          break;

        case "_valueDecimal":
          _ValueDecimal = new fhirCsR4.Models.Element();
          _ValueDecimal.DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "valueDate":
          ValueDate = reader.GetString();
          break;

        case "_valueDate":
          _ValueDate = new fhirCsR4.Models.Element();
          _ValueDate.DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          ValueDateTime = reader.GetString();
          break;

        case "_valueDateTime":
          _ValueDateTime = new fhirCsR4.Models.Element();
          _ValueDateTime.DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          ValueTime = reader.GetString();
          break;

        case "_valueTime":
          _ValueTime = new fhirCsR4.Models.Element();
          _ValueTime.DeserializeJson(ref reader, options);
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR4.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueUri":
          ValueUri = reader.GetString();
          break;

        case "_valueUri":
          _ValueUri = new fhirCsR4.Models.Element();
          _ValueUri.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR4.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          ValueCoding = new fhirCsR4.Models.Coding();
          ValueCoding.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR4.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new fhirCsR4.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<QuestionnaireItem>))]
  public class QuestionnaireItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This element can be used when the value set machinery of answerValueSet is deemed too cumbersome or when there's a need to capture possible answers that are not codes.
    /// </summary>
    public List<QuestionnaireItemAnswerOption> AnswerOption { get; set; }
    /// <summary>
    /// LOINC defines many useful value sets for questionnaire responses. See [LOINC Answer Lists](loinc.html#alist). The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public string AnswerValueSet { get; set; }
    /// <summary>
    /// Extension container element for AnswerValueSet
    /// </summary>
    public Element _AnswerValueSet { get; set; }
    /// <summary>
    /// The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public List<Coding> Code { get; set; }
    /// <summary>
    /// The uri refers to an ElementDefinition in a [StructureDefinition](structuredefinition.html#) and always starts with the [canonical URL](references.html#canonical) for the target resource. When referring to a StructureDefinition, a fragment identifier is used to specify the element definition by its id [Element.id](element-definitions.html#Element.id). E.g. http://hl7.org/fhir/StructureDefinition/Observation#Observation.value[x]. In the absence of a fragment identifier, the first/root element definition in the target is the matching element definition.
    /// </summary>
    public string Definition { get; set; }
    /// <summary>
    /// Extension container element for Definition
    /// </summary>
    public Element _Definition { get; set; }
    /// <summary>
    /// This element must be specified if more than one enableWhen value is provided.
    /// </summary>
    public string EnableBehavior { get; set; }
    /// <summary>
    /// Extension container element for EnableBehavior
    /// </summary>
    public Element _EnableBehavior { get; set; }
    /// <summary>
    /// If multiple repetitions of this extension are present, the item should be enabled when the condition for *any* of the repetitions is true.  I.e. treat "enableWhen"s as being joined by an "or" clause.  This element is a modifier because if enableWhen is present for an item, "required" is ignored unless one of the enableWhen conditions is met. When an item is disabled, all of its descendants are disabled, regardless of what their own enableWhen logic might evaluate to.
    /// </summary>
    public List<QuestionnaireItemEnableWhen> EnableWhen { get; set; }
    /// <summary>
    /// The user is allowed to change the value and override the default (unless marked as read-only). If the user doesn't change the value, then this initial value will be persisted when the QuestionnaireResponse is initially created.  Note that initial values can influence results.  The data type of initial[x] must agree with the item.type, and only repeating items can have more then one initial value.
    /// </summary>
    public List<QuestionnaireItemInitial> Initial { get; set; }
    /// <summary>
    /// There is no specified limit to the depth of nesting.  However, Questionnaire authors are encouraged to consider the impact on the user and user interface of overly deep nesting.
    /// </summary>
    public List<QuestionnaireItem> Item { get; set; }
    /// <summary>
    /// This ''can'' be a meaningful identifier (e.g. a LOINC code) but is not intended to have any meaning.  GUIDs or sequential numbers are appropriate here.
    /// </summary>
    public string LinkId { get; set; }
    /// <summary>
    /// Extension container element for LinkId
    /// </summary>
    public Element _LinkId { get; set; }
    /// <summary>
    /// For base64binary, reflects the number of characters representing the encoded data, not the number of bytes of the binary data. The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public int? MaxLength { get; set; }
    /// <summary>
    /// These are generally unique within a questionnaire, though this is not guaranteed. Some questionnaires may have multiple questions with the same label with logic to control which gets exposed.  Typically, these won't be used for "display" items, though such use is not prohibited.  Systems SHOULD NOT generate their own prefixes if prefixes are defined for any items within a Questionnaire.
    /// </summary>
    public string Prefix { get; set; }
    /// <summary>
    /// Extension container element for Prefix
    /// </summary>
    public Element _Prefix { get; set; }
    /// <summary>
    /// The value of readOnly elements can be established by asserting  extensions for defaultValues, linkages that support pre-population and/or extensions that support calculation based on other answers.
    /// </summary>
    public bool? ReadOnly { get; set; }
    /// <summary>
    /// If a question is marked as repeats=true, then multiple answers can be provided for the question in the corresponding QuestionnaireResponse.  When rendering the questionnaire, it is up to the rendering software whether to render the question text for each answer repetition (i.e. "repeat the question") or to simply allow entry/selection of multiple answers for the question (repeat the answers).  Which is most appropriate visually may depend on the type of answer as well as whether there are nested items.
    /// The resulting QuestionnaireResponse will be populated the same way regardless of rendering - one 'question' item with multiple answer values.
    ///  The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public bool? Repeats { get; set; }
    /// <summary>
    /// Questionnaire.item.required only has meaning for elements that are conditionally enabled with enableWhen if the condition evaluates to true.  If an item that contains other items is marked as required, that does not automatically make the contained elements required (though required groups must contain at least one child element). The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public bool? Required { get; set; }
    /// <summary>
    /// When using this element to represent the name of a section, use group type item and also make sure to limit the text element to a short string suitable for display as a section heading.  Group item instructions should be included as a display type item within the group.
    /// </summary>
    public string Text { get; set; }
    /// <summary>
    /// Extension container element for Text
    /// </summary>
    public Element _Text { get; set; }
    /// <summary>
    /// Additional constraints on the type of answer can be conveyed by extensions. The value may come from the ElementDefinition referred to by .definition.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(LinkId))
      {
        writer.WriteString("linkId", (string)LinkId!);
      }

      if (_LinkId != null)
      {
        writer.WritePropertyName("_linkId");
        _LinkId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Definition))
      {
        writer.WriteString("definition", (string)Definition!);
      }

      if (_Definition != null)
      {
        writer.WritePropertyName("_definition");
        _Definition.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (Coding valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Prefix))
      {
        writer.WriteString("prefix", (string)Prefix!);
      }

      if (_Prefix != null)
      {
        writer.WritePropertyName("_prefix");
        _Prefix.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Text))
      {
        writer.WriteString("text", (string)Text!);
      }

      if (_Text != null)
      {
        writer.WritePropertyName("_text");
        _Text.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if ((EnableWhen != null) && (EnableWhen.Count != 0))
      {
        writer.WritePropertyName("enableWhen");
        writer.WriteStartArray();

        foreach (QuestionnaireItemEnableWhen valEnableWhen in EnableWhen)
        {
          valEnableWhen.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(EnableBehavior))
      {
        writer.WriteString("enableBehavior", (string)EnableBehavior!);
      }

      if (_EnableBehavior != null)
      {
        writer.WritePropertyName("_enableBehavior");
        _EnableBehavior.SerializeJson(writer, options);
      }

      if (Required != null)
      {
        writer.WriteBoolean("required", (bool)Required!);
      }

      if (Repeats != null)
      {
        writer.WriteBoolean("repeats", (bool)Repeats!);
      }

      if (ReadOnly != null)
      {
        writer.WriteBoolean("readOnly", (bool)ReadOnly!);
      }

      if (MaxLength != null)
      {
        writer.WriteNumber("maxLength", (int)MaxLength!);
      }

      if (!string.IsNullOrEmpty(AnswerValueSet))
      {
        writer.WriteString("answerValueSet", (string)AnswerValueSet!);
      }

      if (_AnswerValueSet != null)
      {
        writer.WritePropertyName("_answerValueSet");
        _AnswerValueSet.SerializeJson(writer, options);
      }

      if ((AnswerOption != null) && (AnswerOption.Count != 0))
      {
        writer.WritePropertyName("answerOption");
        writer.WriteStartArray();

        foreach (QuestionnaireItemAnswerOption valAnswerOption in AnswerOption)
        {
          valAnswerOption.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Initial != null) && (Initial.Count != 0))
      {
        writer.WritePropertyName("initial");
        writer.WriteStartArray();

        foreach (QuestionnaireItemInitial valInitial in Initial)
        {
          valInitial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (QuestionnaireItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "answerOption":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          AnswerOption = new List<QuestionnaireItemAnswerOption>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.QuestionnaireItemAnswerOption objAnswerOption = new fhirCsR4.Models.QuestionnaireItemAnswerOption();
            objAnswerOption.DeserializeJson(ref reader, options);
            AnswerOption.Add(objAnswerOption);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (AnswerOption.Count == 0)
          {
            AnswerOption = null;
          }

          break;

        case "answerValueSet":
          AnswerValueSet = reader.GetString();
          break;

        case "_answerValueSet":
          _AnswerValueSet = new fhirCsR4.Models.Element();
          _AnswerValueSet.DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Coding objCode = new fhirCsR4.Models.Coding();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "definition":
          Definition = reader.GetString();
          break;

        case "_definition":
          _Definition = new fhirCsR4.Models.Element();
          _Definition.DeserializeJson(ref reader, options);
          break;

        case "enableBehavior":
          EnableBehavior = reader.GetString();
          break;

        case "_enableBehavior":
          _EnableBehavior = new fhirCsR4.Models.Element();
          _EnableBehavior.DeserializeJson(ref reader, options);
          break;

        case "enableWhen":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          EnableWhen = new List<QuestionnaireItemEnableWhen>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.QuestionnaireItemEnableWhen objEnableWhen = new fhirCsR4.Models.QuestionnaireItemEnableWhen();
            objEnableWhen.DeserializeJson(ref reader, options);
            EnableWhen.Add(objEnableWhen);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (EnableWhen.Count == 0)
          {
            EnableWhen = null;
          }

          break;

        case "initial":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Initial = new List<QuestionnaireItemInitial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.QuestionnaireItemInitial objInitial = new fhirCsR4.Models.QuestionnaireItemInitial();
            objInitial.DeserializeJson(ref reader, options);
            Initial.Add(objInitial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Initial.Count == 0)
          {
            Initial = null;
          }

          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<QuestionnaireItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.QuestionnaireItem objItem = new fhirCsR4.Models.QuestionnaireItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "linkId":
          LinkId = reader.GetString();
          break;

        case "_linkId":
          _LinkId = new fhirCsR4.Models.Element();
          _LinkId.DeserializeJson(ref reader, options);
          break;

        case "maxLength":
          MaxLength = reader.GetInt32();
          break;

        case "prefix":
          Prefix = reader.GetString();
          break;

        case "_prefix":
          _Prefix = new fhirCsR4.Models.Element();
          _Prefix.DeserializeJson(ref reader, options);
          break;

        case "readOnly":
          ReadOnly = reader.GetBoolean();
          break;

        case "repeats":
          Repeats = reader.GetBoolean();
          break;

        case "required":
          Required = reader.GetBoolean();
          break;

        case "text":
          Text = reader.GetString();
          break;

        case "_text":
          _Text = new fhirCsR4.Models.Element();
          _Text.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Questionnaire.item.enableBehavior field
  /// </summary>
  public static class QuestionnaireItemEnableBehaviorCodes {
    public const string ALL = "all";
    public const string ANY = "any";
  }
  /// <summary>
  /// Code Values for the Questionnaire.item.type field
  /// </summary>
  public static class QuestionnaireItemTypeCodes {
    public const string GROUP = "group";
    public const string DISPLAY = "display";
    public const string QUESTION = "question";
    public const string BOOLEAN = "boolean";
    public const string VAL_DECIMAL = "decimal";
    public const string INTEGER = "integer";
    public const string DATE = "date";
    public const string DATETIME = "dateTime";
    public const string TIME = "time";
    public const string VAL_STRING = "string";
    public const string TEXT = "text";
    public const string URL = "url";
    public const string CHOICE = "choice";
    public const string OPEN_CHOICE = "open-choice";
    public const string ATTACHMENT = "attachment";
    public const string REFERENCE = "reference";
    public const string QUANTITY = "quantity";
  }
  /// <summary>
  /// A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Questionnaire>))]
  public class Questionnaire : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Questionnaire";
    /// <summary>
    /// The 'date' element may be more recent than the approval date because of minor changes or editorial corrections.
    /// </summary>
    public string ApprovalDate { get; set; }
    /// <summary>
    /// Extension container element for ApprovalDate
    /// </summary>
    public Element _ApprovalDate { get; set; }
    /// <summary>
    /// An identifier for this question or group of questions in a particular terminology such as LOINC.
    /// </summary>
    public List<Coding> Code { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the questionnaire. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The URL of a Questionnaire that this Questionnaire is based on.
    /// </summary>
    public List<string> DerivedFrom { get; set; }
    /// <summary>
    /// Extension container element for DerivedFrom
    /// </summary>
    public List<Element> _DerivedFrom { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the questionnaire was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the questionnaire as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the questionnaire is presumed to be the predominant language in the place the questionnaire was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The effective period for a questionnaire  determines when the content is applicable for usage and is independent of publication and review dates. For example, a measure intended to be used for the year 2016 might be published in 2015.
    /// </summary>
    public Period EffectivePeriod { get; set; }
    /// <summary>
    /// Allows filtering of questionnaires that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Typically, this is used for identifiers that can go in an HL7 V3 II (instance identifier) data type, and can then identify this questionnaire outside of FHIR, where it is not possible to use the logical URI.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The content of the questionnaire is constructed from an ordered, hierarchical collection of items.
    /// </summary>
    public List<QuestionnaireItem> Item { get; set; }
    /// <summary>
    /// It may be possible for the questionnaire to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// If specified, this date follows the original approval date.
    /// </summary>
    public string LastReviewDate { get; set; }
    /// <summary>
    /// Extension container element for LastReviewDate
    /// </summary>
    public Element _LastReviewDate { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the questionnaire is the organization or individual primarily responsible for the maintenance and upkeep of the questionnaire. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the questionnaire. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the questionnaire. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this questionnaire.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// Allows filtering of questionnaires that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// If none are specified, then the subject is unlimited.
    /// </summary>
    public List<string> SubjectType { get; set; }
    /// <summary>
    /// Extension container element for SubjectType
    /// </summary>
    public List<Element> _SubjectType { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// The name of the referenced questionnaire can be conveyed using the http://hl7.org/fhir/StructureDefinition/display extension.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different questionnaire instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the questionnaire with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if ((DerivedFrom != null) && (DerivedFrom.Count != 0))
      {
        writer.WritePropertyName("derivedFrom");
        writer.WriteStartArray();

        foreach (string valDerivedFrom in DerivedFrom)
        {
          writer.WriteStringValue(valDerivedFrom);
        }

        writer.WriteEndArray();
      }

      if ((_DerivedFrom != null) && (_DerivedFrom.Count != 0))
      {
        writer.WritePropertyName("_derivedFrom");
        writer.WriteStartArray();

        foreach (Element val_DerivedFrom in _DerivedFrom)
        {
          val_DerivedFrom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if ((SubjectType != null) && (SubjectType.Count != 0))
      {
        writer.WritePropertyName("subjectType");
        writer.WriteStartArray();

        foreach (string valSubjectType in SubjectType)
        {
          writer.WriteStringValue(valSubjectType);
        }

        writer.WriteEndArray();
      }

      if ((_SubjectType != null) && (_SubjectType.Count != 0))
      {
        writer.WritePropertyName("_subjectType");
        writer.WriteStartArray();

        foreach (Element val_SubjectType in _SubjectType)
        {
          val_SubjectType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ApprovalDate))
      {
        writer.WriteString("approvalDate", (string)ApprovalDate!);
      }

      if (_ApprovalDate != null)
      {
        writer.WritePropertyName("_approvalDate");
        _ApprovalDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastReviewDate))
      {
        writer.WriteString("lastReviewDate", (string)LastReviewDate!);
      }

      if (_LastReviewDate != null)
      {
        writer.WritePropertyName("_lastReviewDate");
        _LastReviewDate.SerializeJson(writer, options);
      }

      if (EffectivePeriod != null)
      {
        writer.WritePropertyName("effectivePeriod");
        EffectivePeriod.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (Coding valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (QuestionnaireItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "approvalDate":
          ApprovalDate = reader.GetString();
          break;

        case "_approvalDate":
          _ApprovalDate = new fhirCsR4.Models.Element();
          _ApprovalDate.DeserializeJson(ref reader, options);
          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Coding objCode = new fhirCsR4.Models.Coding();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactDetail objContact = new fhirCsR4.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DerivedFrom = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DerivedFrom.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DerivedFrom.Count == 0)
          {
            DerivedFrom = null;
          }

          break;

        case "_derivedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _DerivedFrom = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_DerivedFrom = new fhirCsR4.Models.Element();
            obj_DerivedFrom.DeserializeJson(ref reader, options);
            _DerivedFrom.Add(obj_DerivedFrom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_DerivedFrom.Count == 0)
          {
            _DerivedFrom = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "effectivePeriod":
          EffectivePeriod = new fhirCsR4.Models.Period();
          EffectivePeriod.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<QuestionnaireItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.QuestionnaireItem objItem = new fhirCsR4.Models.QuestionnaireItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objJurisdiction = new fhirCsR4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "lastReviewDate":
          LastReviewDate = reader.GetString();
          break;

        case "_lastReviewDate":
          _LastReviewDate = new fhirCsR4.Models.Element();
          _LastReviewDate.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR4.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR4.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subjectType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubjectType = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            SubjectType.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubjectType.Count == 0)
          {
            SubjectType = null;
          }

          break;

        case "_subjectType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _SubjectType = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_SubjectType = new fhirCsR4.Models.Element();
            obj_SubjectType.DeserializeJson(ref reader, options);
            _SubjectType.Add(obj_SubjectType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_SubjectType.Count == 0)
          {
            _SubjectType = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.UsageContext objUseContext = new fhirCsR4.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Questionnaire.status field
  /// </summary>
  public static class QuestionnaireStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
