// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Moiety, for structural modifications.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionMoiety>))]
  public class SubstanceDefinitionMoiety : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Quantitative value for this moiety.
    /// </summary>
    public Quantity AmountQuantity { get; set; }
    /// <summary>
    /// Quantitative value for this moiety.
    /// </summary>
    public string AmountString { get; set; }
    /// <summary>
    /// Extension container element for AmountString
    /// </summary>
    public Element _AmountString { get; set; }
    /// <summary>
    /// The measurement type of the quantitative value.
    /// </summary>
    public CodeableConcept AmountType { get; set; }
    /// <summary>
    /// Identifier by which this moiety substance is known.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// Molecular formula for this moiety of this substance, typically using the Hill system.
    /// </summary>
    public string MolecularFormula { get; set; }
    /// <summary>
    /// Extension container element for MolecularFormula
    /// </summary>
    public Element _MolecularFormula { get; set; }
    /// <summary>
    /// Textual name for this moiety substance.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Optical activity type.
    /// </summary>
    public CodeableConcept OpticalActivity { get; set; }
    /// <summary>
    /// Role that the moiety is playing.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Stereochemistry type.
    /// </summary>
    public CodeableConcept Stereochemistry { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Stereochemistry != null)
      {
        writer.WritePropertyName("stereochemistry");
        Stereochemistry.SerializeJson(writer, options);
      }

      if (OpticalActivity != null)
      {
        writer.WritePropertyName("opticalActivity");
        OpticalActivity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MolecularFormula))
      {
        writer.WriteString("molecularFormula", (string)MolecularFormula!);
      }

      if (_MolecularFormula != null)
      {
        writer.WritePropertyName("_molecularFormula");
        _MolecularFormula.SerializeJson(writer, options);
      }

      if (AmountQuantity != null)
      {
        writer.WritePropertyName("amountQuantity");
        AmountQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AmountString))
      {
        writer.WriteString("amountString", (string)AmountString!);
      }

      if (_AmountString != null)
      {
        writer.WritePropertyName("_amountString");
        _AmountString.SerializeJson(writer, options);
      }

      if (AmountType != null)
      {
        writer.WritePropertyName("amountType");
        AmountType.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amountQuantity":
          AmountQuantity = new fhirCsR4.Models.Quantity();
          AmountQuantity.DeserializeJson(ref reader, options);
          break;

        case "amountString":
          AmountString = reader.GetString();
          break;

        case "_amountString":
          _AmountString = new fhirCsR4.Models.Element();
          _AmountString.DeserializeJson(ref reader, options);
          break;

        case "amountType":
          AmountType = new fhirCsR4.Models.CodeableConcept();
          AmountType.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "molecularFormula":
          MolecularFormula = reader.GetString();
          break;

        case "_molecularFormula":
          _MolecularFormula = new fhirCsR4.Models.Element();
          _MolecularFormula.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "opticalActivity":
          OpticalActivity = new fhirCsR4.Models.CodeableConcept();
          OpticalActivity.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR4.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "stereochemistry":
          Stereochemistry = new fhirCsR4.Models.CodeableConcept();
          Stereochemistry.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// General specifications for this substance, including how it is related to other substances.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionProperty>))]
  public class SubstanceDefinitionProperty : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Quantitative value for this property.
    /// </summary>
    public Quantity AmountQuantity { get; set; }
    /// <summary>
    /// Quantitative value for this property.
    /// </summary>
    public string AmountString { get; set; }
    /// <summary>
    /// Extension container element for AmountString
    /// </summary>
    public Element _AmountString { get; set; }
    /// <summary>
    /// A category for this property, e.g. Physical, Chemical, Enzymatic.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// Property type e.g. viscosity, pH, isoelectric point.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
    /// </summary>
    public CodeableReference DefiningSubstance { get; set; }
    /// <summary>
    /// Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).
    /// </summary>
    public string Parameters { get; set; }
    /// <summary>
    /// Extension container element for Parameters
    /// </summary>
    public Element _Parameters { get; set; }
    /// <summary>
    /// Range of typical values.
    /// </summary>
    public Range ReferenceRange { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Parameters))
      {
        writer.WriteString("parameters", (string)Parameters!);
      }

      if (_Parameters != null)
      {
        writer.WritePropertyName("_parameters");
        _Parameters.SerializeJson(writer, options);
      }

      if (DefiningSubstance != null)
      {
        writer.WritePropertyName("definingSubstance");
        DefiningSubstance.SerializeJson(writer, options);
      }

      if (AmountQuantity != null)
      {
        writer.WritePropertyName("amountQuantity");
        AmountQuantity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AmountString))
      {
        writer.WriteString("amountString", (string)AmountString!);
      }

      if (_AmountString != null)
      {
        writer.WritePropertyName("_amountString");
        _AmountString.SerializeJson(writer, options);
      }

      if (ReferenceRange != null)
      {
        writer.WritePropertyName("referenceRange");
        ReferenceRange.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amountQuantity":
          AmountQuantity = new fhirCsR4.Models.Quantity();
          AmountQuantity.DeserializeJson(ref reader, options);
          break;

        case "amountString":
          AmountString = reader.GetString();
          break;

        case "_amountString":
          _AmountString = new fhirCsR4.Models.Element();
          _AmountString.DeserializeJson(ref reader, options);
          break;

        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "definingSubstance":
          DefiningSubstance = new fhirCsR4.Models.CodeableReference();
          DefiningSubstance.DeserializeJson(ref reader, options);
          break;

        case "parameters":
          Parameters = reader.GetString();
          break;

        case "_parameters":
          _Parameters = new fhirCsR4.Models.Element();
          _Parameters.DeserializeJson(ref reader, options);
          break;

        case "referenceRange":
          ReferenceRange = new fhirCsR4.Models.Range();
          ReferenceRange.DeserializeJson(ref reader, options);
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSource = new fhirCsR4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionStructureIsotopeMolecularWeight>))]
  public class SubstanceDefinitionStructureIsotopeMolecularWeight : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
    /// </summary>
    public Quantity Amount { get; set; }
    /// <summary>
    /// The method by which the molecular weight was determined.
    /// </summary>
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// Type of molecular weight such as exact, average (also known as. number average), weight average.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Method != null)
      {
        writer.WritePropertyName("method");
        Method.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Amount != null)
      {
        writer.WritePropertyName("amount");
        Amount.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amount":
          Amount = new fhirCsR4.Models.Quantity();
          Amount.DeserializeJson(ref reader, options);
          break;

        case "method":
          Method = new fhirCsR4.Models.CodeableConcept();
          Method.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionStructureIsotope>))]
  public class SubstanceDefinitionStructureIsotope : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Half life - for a non-natural nuclide.
    /// </summary>
    public Quantity HalfLife { get; set; }
    /// <summary>
    /// Substance identifier for each non-natural or radioisotope.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
    /// </summary>
    public SubstanceDefinitionStructureIsotopeMolecularWeight MolecularWeight { get; set; }
    /// <summary>
    /// Substance name for each non-natural or radioisotope.
    /// </summary>
    public CodeableConcept Name { get; set; }
    /// <summary>
    /// The type of isotopic substitution present in a single substance.
    /// </summary>
    public CodeableConcept Substitution { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Name != null)
      {
        writer.WritePropertyName("name");
        Name.SerializeJson(writer, options);
      }

      if (Substitution != null)
      {
        writer.WritePropertyName("substitution");
        Substitution.SerializeJson(writer, options);
      }

      if (HalfLife != null)
      {
        writer.WritePropertyName("halfLife");
        HalfLife.SerializeJson(writer, options);
      }

      if (MolecularWeight != null)
      {
        writer.WritePropertyName("molecularWeight");
        MolecularWeight.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "halfLife":
          HalfLife = new fhirCsR4.Models.Quantity();
          HalfLife.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "molecularWeight":
          MolecularWeight = new fhirCsR4.Models.SubstanceDefinitionStructureIsotopeMolecularWeight();
          MolecularWeight.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = new fhirCsR4.Models.CodeableConcept();
          Name.DeserializeJson(ref reader, options);
          break;

        case "substitution":
          Substitution = new fhirCsR4.Models.CodeableConcept();
          Substitution.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A depiction of the structure or characterization of the substance.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionStructureRepresentation>))]
  public class SubstanceDefinitionStructureRepresentation : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// An attached file with the structural representation or characterization e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file.
    /// </summary>
    public Reference Document { get; set; }
    /// <summary>
    /// The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document.
    /// </summary>
    public CodeableConcept Format { get; set; }
    /// <summary>
    /// The structural representation or characterization as a text string in a standard format.
    /// </summary>
    public string Representation { get; set; }
    /// <summary>
    /// Extension container element for Representation
    /// </summary>
    public Element _Representation { get; set; }
    /// <summary>
    /// The kind of structural representation (e.g. full, partial) or the technique used to derive the analytical characterization of the substance (e.g. x-ray, HPLC, NMR, peptide mapping, ligand binding assay, etc.).
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Representation))
      {
        writer.WriteString("representation", (string)Representation!);
      }

      if (_Representation != null)
      {
        writer.WritePropertyName("_representation");
        _Representation.SerializeJson(writer, options);
      }

      if (Format != null)
      {
        writer.WritePropertyName("format");
        Format.SerializeJson(writer, options);
      }

      if (Document != null)
      {
        writer.WritePropertyName("document");
        Document.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "document":
          Document = new fhirCsR4.Models.Reference();
          Document.DeserializeJson(ref reader, options);
          break;

        case "format":
          Format = new fhirCsR4.Models.CodeableConcept();
          Format.DeserializeJson(ref reader, options);
          break;

        case "representation":
          Representation = reader.GetString();
          break;

        case "_representation":
          _Representation = new fhirCsR4.Models.Element();
          _Representation.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Structural information.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionStructure>))]
  public class SubstanceDefinitionStructure : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
    /// </summary>
    public List<SubstanceDefinitionStructureIsotope> Isotope { get; set; }
    /// <summary>
    /// Molecular formula of this substance, typically using the Hill system.
    /// </summary>
    public string MolecularFormula { get; set; }
    /// <summary>
    /// Extension container element for MolecularFormula
    /// </summary>
    public Element _MolecularFormula { get; set; }
    /// <summary>
    /// Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
    /// </summary>
    public string MolecularFormulaByMoiety { get; set; }
    /// <summary>
    /// Extension container element for MolecularFormulaByMoiety
    /// </summary>
    public Element _MolecularFormulaByMoiety { get; set; }
    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
    /// </summary>
    public SubstanceDefinitionStructureIsotopeMolecularWeight MolecularWeight { get; set; }
    /// <summary>
    /// Optical activity type.
    /// </summary>
    public CodeableConcept OpticalActivity { get; set; }
    /// <summary>
    /// A depiction of the structure or characterization of the substance.
    /// </summary>
    public List<SubstanceDefinitionStructureRepresentation> Representation { get; set; }
    /// <summary>
    /// Supporting literature about the source of information.
    /// </summary>
    public List<Reference> SourceDocument { get; set; }
    /// <summary>
    /// Stereochemistry type.
    /// </summary>
    public CodeableConcept Stereochemistry { get; set; }
    /// <summary>
    /// The method used to elucidate the structure or characterization of the drug substance. Examples: X-ray, HPLC, NMR, Peptide mapping, Ligand binding assay.
    /// </summary>
    public List<CodeableConcept> Technique { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Stereochemistry != null)
      {
        writer.WritePropertyName("stereochemistry");
        Stereochemistry.SerializeJson(writer, options);
      }

      if (OpticalActivity != null)
      {
        writer.WritePropertyName("opticalActivity");
        OpticalActivity.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MolecularFormula))
      {
        writer.WriteString("molecularFormula", (string)MolecularFormula!);
      }

      if (_MolecularFormula != null)
      {
        writer.WritePropertyName("_molecularFormula");
        _MolecularFormula.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(MolecularFormulaByMoiety))
      {
        writer.WriteString("molecularFormulaByMoiety", (string)MolecularFormulaByMoiety!);
      }

      if (_MolecularFormulaByMoiety != null)
      {
        writer.WritePropertyName("_molecularFormulaByMoiety");
        _MolecularFormulaByMoiety.SerializeJson(writer, options);
      }

      if ((Isotope != null) && (Isotope.Count != 0))
      {
        writer.WritePropertyName("isotope");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionStructureIsotope valIsotope in Isotope)
        {
          valIsotope.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (MolecularWeight != null)
      {
        writer.WritePropertyName("molecularWeight");
        MolecularWeight.SerializeJson(writer, options);
      }

      if ((Technique != null) && (Technique.Count != 0))
      {
        writer.WritePropertyName("technique");
        writer.WriteStartArray();

        foreach (CodeableConcept valTechnique in Technique)
        {
          valTechnique.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SourceDocument != null) && (SourceDocument.Count != 0))
      {
        writer.WritePropertyName("sourceDocument");
        writer.WriteStartArray();

        foreach (Reference valSourceDocument in SourceDocument)
        {
          valSourceDocument.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Representation != null) && (Representation.Count != 0))
      {
        writer.WritePropertyName("representation");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionStructureRepresentation valRepresentation in Representation)
        {
          valRepresentation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "isotope":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Isotope = new List<SubstanceDefinitionStructureIsotope>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionStructureIsotope objIsotope = new fhirCsR4.Models.SubstanceDefinitionStructureIsotope();
            objIsotope.DeserializeJson(ref reader, options);
            Isotope.Add(objIsotope);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Isotope.Count == 0)
          {
            Isotope = null;
          }

          break;

        case "molecularFormula":
          MolecularFormula = reader.GetString();
          break;

        case "_molecularFormula":
          _MolecularFormula = new fhirCsR4.Models.Element();
          _MolecularFormula.DeserializeJson(ref reader, options);
          break;

        case "molecularFormulaByMoiety":
          MolecularFormulaByMoiety = reader.GetString();
          break;

        case "_molecularFormulaByMoiety":
          _MolecularFormulaByMoiety = new fhirCsR4.Models.Element();
          _MolecularFormulaByMoiety.DeserializeJson(ref reader, options);
          break;

        case "molecularWeight":
          MolecularWeight = new fhirCsR4.Models.SubstanceDefinitionStructureIsotopeMolecularWeight();
          MolecularWeight.DeserializeJson(ref reader, options);
          break;

        case "opticalActivity":
          OpticalActivity = new fhirCsR4.Models.CodeableConcept();
          OpticalActivity.DeserializeJson(ref reader, options);
          break;

        case "representation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Representation = new List<SubstanceDefinitionStructureRepresentation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionStructureRepresentation objRepresentation = new fhirCsR4.Models.SubstanceDefinitionStructureRepresentation();
            objRepresentation.DeserializeJson(ref reader, options);
            Representation.Add(objRepresentation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Representation.Count == 0)
          {
            Representation = null;
          }

          break;

        case "sourceDocument":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SourceDocument = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSourceDocument = new fhirCsR4.Models.Reference();
            objSourceDocument.DeserializeJson(ref reader, options);
            SourceDocument.Add(objSourceDocument);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SourceDocument.Count == 0)
          {
            SourceDocument = null;
          }

          break;

        case "stereochemistry":
          Stereochemistry = new fhirCsR4.Models.CodeableConcept();
          Stereochemistry.DeserializeJson(ref reader, options);
          break;

        case "technique":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Technique = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objTechnique = new fhirCsR4.Models.CodeableConcept();
            objTechnique.DeserializeJson(ref reader, options);
            Technique.Add(objTechnique);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Technique.Count == 0)
          {
            Technique = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Codes associated with the substance.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionCode>))]
  public class SubstanceDefinitionCode : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The specific code.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// Any comment can be provided in this field, if necessary.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Status of the code assignment, for example 'provisional', 'approved'.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// The date at which the code status is changed as part of the terminology maintenance.
    /// </summary>
    public string StatusDate { get; set; }
    /// <summary>
    /// Extension container element for StatusDate
    /// </summary>
    public Element _StatusDate { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(StatusDate))
      {
        writer.WriteString("statusDate", (string)StatusDate!);
      }

      if (_StatusDate != null)
      {
        writer.WritePropertyName("_statusDate");
        _StatusDate.SerializeJson(writer, options);
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = new fhirCsR4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSource = new fhirCsR4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "status":
          Status = new fhirCsR4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "statusDate":
          StatusDate = reader.GetString();
          break;

        case "_statusDate":
          _StatusDate = new fhirCsR4.Models.Element();
          _StatusDate.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details of the official nature of this name.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionNameOfficial>))]
  public class SubstanceDefinitionNameOfficial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Which authority uses this official name.
    /// </summary>
    public CodeableConcept Authority { get; set; }
    /// <summary>
    /// Date of official name change.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The status of the official name, for example 'provisional', 'approved'.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Authority != null)
      {
        writer.WritePropertyName("authority");
        Authority.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authority":
          Authority = new fhirCsR4.Models.CodeableConcept();
          Authority.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = new fhirCsR4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Names applicable to this substance.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionName>))]
  public class SubstanceDefinitionName : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
    /// </summary>
    public List<CodeableConcept> Domain { get; set; }
    /// <summary>
    /// The jurisdiction where this name applies.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// Human language that the name is written in.
    /// </summary>
    public List<CodeableConcept> Language { get; set; }
    /// <summary>
    /// The actual name.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Details of the official nature of this name.
    /// </summary>
    public List<SubstanceDefinitionNameOfficial> Official { get; set; }
    /// <summary>
    /// If this is the preferred name for this substance.
    /// </summary>
    public bool? Preferred { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// The status of the name, for example 'current', 'proposed'.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// A synonym of this particular name, by which the substance is also known.
    /// </summary>
    public List<SubstanceDefinitionName> Synonym { get; set; }
    /// <summary>
    /// A translation for this name into another human language.
    /// </summary>
    public List<SubstanceDefinitionName> Translation { get; set; }
    /// <summary>
    /// Name type, for example 'systematic',  'scientific, 'brand'.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (Preferred != null)
      {
        writer.WriteBoolean("preferred", (bool)Preferred!);
      }

      if ((Language != null) && (Language.Count != 0))
      {
        writer.WritePropertyName("language");
        writer.WriteStartArray();

        foreach (CodeableConcept valLanguage in Language)
        {
          valLanguage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Domain != null) && (Domain.Count != 0))
      {
        writer.WritePropertyName("domain");
        writer.WriteStartArray();

        foreach (CodeableConcept valDomain in Domain)
        {
          valDomain.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Synonym != null) && (Synonym.Count != 0))
      {
        writer.WritePropertyName("synonym");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionName valSynonym in Synonym)
        {
          valSynonym.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Translation != null) && (Translation.Count != 0))
      {
        writer.WritePropertyName("translation");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionName valTranslation in Translation)
        {
          valTranslation.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Official != null) && (Official.Count != 0))
      {
        writer.WritePropertyName("official");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionNameOfficial valOfficial in Official)
        {
          valOfficial.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "domain":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Domain = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objDomain = new fhirCsR4.Models.CodeableConcept();
            objDomain.DeserializeJson(ref reader, options);
            Domain.Add(objDomain);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Domain.Count == 0)
          {
            Domain = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objJurisdiction = new fhirCsR4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "language":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Language = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objLanguage = new fhirCsR4.Models.CodeableConcept();
            objLanguage.DeserializeJson(ref reader, options);
            Language.Add(objLanguage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Language.Count == 0)
          {
            Language = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "official":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Official = new List<SubstanceDefinitionNameOfficial>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionNameOfficial objOfficial = new fhirCsR4.Models.SubstanceDefinitionNameOfficial();
            objOfficial.DeserializeJson(ref reader, options);
            Official.Add(objOfficial);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Official.Count == 0)
          {
            Official = null;
          }

          break;

        case "preferred":
          Preferred = reader.GetBoolean();
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSource = new fhirCsR4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "status":
          Status = new fhirCsR4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "synonym":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Synonym = new List<SubstanceDefinitionName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionName objSynonym = new fhirCsR4.Models.SubstanceDefinitionName();
            objSynonym.DeserializeJson(ref reader, options);
            Synonym.Add(objSynonym);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Synonym.Count == 0)
          {
            Synonym = null;
          }

          break;

        case "translation":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Translation = new List<SubstanceDefinitionName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionName objTranslation = new fhirCsR4.Models.SubstanceDefinitionName();
            objTranslation.DeserializeJson(ref reader, options);
            Translation.Add(objTranslation);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Translation.Count == 0)
          {
            Translation = null;
          }

          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A link between this substance and another, with details of the relationship.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionRelationship>))]
  public class SubstanceDefinitionRelationship : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    public Quantity AmountQuantity { get; set; }
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    public Range AmountRange { get; set; }
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    public Ratio AmountRatio { get; set; }
    /// <summary>
    /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
    /// </summary>
    public string AmountString { get; set; }
    /// <summary>
    /// Extension container element for AmountString
    /// </summary>
    public Element _AmountString { get; set; }
    /// <summary>
    /// For use when the numeric has an uncertain range.
    /// </summary>
    public Ratio AmountRatioHighLimit { get; set; }
    /// <summary>
    /// An operator for the amount, for example "average", "approximately", "less than".
    /// </summary>
    public CodeableConcept AmountType { get; set; }
    /// <summary>
    /// For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
    /// </summary>
    public bool? IsDefining { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// A pointer to another substance, as a resource or just a representational code.
    /// </summary>
    public Reference SubstanceDefinitionReference { get; set; }
    /// <summary>
    /// A pointer to another substance, as a resource or just a representational code.
    /// </summary>
    public CodeableConcept SubstanceDefinitionCodeableConcept { get; set; }
    /// <summary>
    /// For example "salt to parent", "active moiety", "starting material", "polymorph", "impurity of".
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (SubstanceDefinitionReference != null)
      {
        writer.WritePropertyName("substanceDefinitionReference");
        SubstanceDefinitionReference.SerializeJson(writer, options);
      }

      if (SubstanceDefinitionCodeableConcept != null)
      {
        writer.WritePropertyName("substanceDefinitionCodeableConcept");
        SubstanceDefinitionCodeableConcept.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (IsDefining != null)
      {
        writer.WriteBoolean("isDefining", (bool)IsDefining!);
      }

      if (AmountQuantity != null)
      {
        writer.WritePropertyName("amountQuantity");
        AmountQuantity.SerializeJson(writer, options);
      }

      if (AmountRange != null)
      {
        writer.WritePropertyName("amountRange");
        AmountRange.SerializeJson(writer, options);
      }

      if (AmountRatio != null)
      {
        writer.WritePropertyName("amountRatio");
        AmountRatio.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AmountString))
      {
        writer.WriteString("amountString", (string)AmountString!);
      }

      if (_AmountString != null)
      {
        writer.WritePropertyName("_amountString");
        _AmountString.SerializeJson(writer, options);
      }

      if (AmountRatioHighLimit != null)
      {
        writer.WritePropertyName("amountRatioHighLimit");
        AmountRatioHighLimit.SerializeJson(writer, options);
      }

      if (AmountType != null)
      {
        writer.WritePropertyName("amountType");
        AmountType.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "amountQuantity":
          AmountQuantity = new fhirCsR4.Models.Quantity();
          AmountQuantity.DeserializeJson(ref reader, options);
          break;

        case "amountRange":
          AmountRange = new fhirCsR4.Models.Range();
          AmountRange.DeserializeJson(ref reader, options);
          break;

        case "amountRatio":
          AmountRatio = new fhirCsR4.Models.Ratio();
          AmountRatio.DeserializeJson(ref reader, options);
          break;

        case "amountString":
          AmountString = reader.GetString();
          break;

        case "_amountString":
          _AmountString = new fhirCsR4.Models.Element();
          _AmountString.DeserializeJson(ref reader, options);
          break;

        case "amountRatioHighLimit":
          AmountRatioHighLimit = new fhirCsR4.Models.Ratio();
          AmountRatioHighLimit.DeserializeJson(ref reader, options);
          break;

        case "amountType":
          AmountType = new fhirCsR4.Models.CodeableConcept();
          AmountType.DeserializeJson(ref reader, options);
          break;

        case "isDefining":
          IsDefining = reader.GetBoolean();
          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSource = new fhirCsR4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "substanceDefinitionReference":
          SubstanceDefinitionReference = new fhirCsR4.Models.Reference();
          SubstanceDefinitionReference.DeserializeJson(ref reader, options);
          break;

        case "substanceDefinitionCodeableConcept":
          SubstanceDefinitionCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          SubstanceDefinitionCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Material or taxonomic/anatomical source for the substance.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinitionSourceMaterial>))]
  public class SubstanceDefinitionSourceMaterial : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The country or countries where the material is harvested.
    /// </summary>
    public List<CodeableConcept> CountryOfOrigin { get; set; }
    /// <summary>
    /// The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name.
    /// </summary>
    public CodeableConcept Genus { get; set; }
    /// <summary>
    /// An anatomical origin of the source material within an organism.
    /// </summary>
    public CodeableConcept Part { get; set; }
    /// <summary>
    /// The species of an organism, typically referring to the Latin epithet of the species of the plant/animal.
    /// </summary>
    public CodeableConcept Species { get; set; }
    /// <summary>
    /// A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Genus != null)
      {
        writer.WritePropertyName("genus");
        Genus.SerializeJson(writer, options);
      }

      if (Species != null)
      {
        writer.WritePropertyName("species");
        Species.SerializeJson(writer, options);
      }

      if (Part != null)
      {
        writer.WritePropertyName("part");
        Part.SerializeJson(writer, options);
      }

      if ((CountryOfOrigin != null) && (CountryOfOrigin.Count != 0))
      {
        writer.WritePropertyName("countryOfOrigin");
        writer.WriteStartArray();

        foreach (CodeableConcept valCountryOfOrigin in CountryOfOrigin)
        {
          valCountryOfOrigin.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "countryOfOrigin":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CountryOfOrigin = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objCountryOfOrigin = new fhirCsR4.Models.CodeableConcept();
            objCountryOfOrigin.DeserializeJson(ref reader, options);
            CountryOfOrigin.Add(objCountryOfOrigin);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CountryOfOrigin.Count == 0)
          {
            CountryOfOrigin = null;
          }

          break;

        case "genus":
          Genus = new fhirCsR4.Models.CodeableConcept();
          Genus.DeserializeJson(ref reader, options);
          break;

        case "part":
          Part = new fhirCsR4.Models.CodeableConcept();
          Part.DeserializeJson(ref reader, options);
          break;

        case "species":
          Species = new fhirCsR4.Models.CodeableConcept();
          Species.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The detailed description of a substance, typically at a level beyond what is used for prescribing.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<SubstanceDefinition>))]
  public class SubstanceDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "SubstanceDefinition";
    /// <summary>
    /// High level categorization, e.g. polymer or nucleic acid, or food, chemical, biological.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// A lower level classification than category, such as the general types of polymer (linear or branch chain) or type of impurity (process related or contaminant).
    /// </summary>
    public List<CodeableConcept> Classification { get; set; }
    /// <summary>
    /// Codes associated with the substance.
    /// </summary>
    public List<SubstanceDefinitionCode> Code { get; set; }
    /// <summary>
    /// Textual description of the substance.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// If the substance applies to only human or veterinary use.
    /// </summary>
    public CodeableConcept Domain { get; set; }
    /// <summary>
    /// The quality standard, established benchmark, to which substance complies (e.g. USP/NF, Ph. Eur, JP, BP, Company Standard).
    /// </summary>
    public List<CodeableConcept> Grade { get; set; }
    /// <summary>
    /// Identifier by which this substance is known.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// A company that makes this substance.
    /// </summary>
    public List<Reference> Manufacturer { get; set; }
    /// <summary>
    /// Moiety, for structural modifications.
    /// </summary>
    public List<SubstanceDefinitionMoiety> Moiety { get; set; }
    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids).
    /// </summary>
    public List<SubstanceDefinitionStructureIsotopeMolecularWeight> MolecularWeight { get; set; }
    /// <summary>
    /// Names applicable to this substance.
    /// </summary>
    public List<SubstanceDefinitionName> Name { get; set; }
    /// <summary>
    /// Textual comment about the substance's catalogue or registry record.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// General specifications for this substance, including how it is related to other substances.
    /// </summary>
    public List<SubstanceDefinitionProperty> Property { get; set; }
    /// <summary>
    /// A link between this substance and another, with details of the relationship.
    /// </summary>
    public List<SubstanceDefinitionRelationship> Relationship { get; set; }
    /// <summary>
    /// Supporting literature.
    /// </summary>
    public List<Reference> Source { get; set; }
    /// <summary>
    /// Material or taxonomic/anatomical source for the substance.
    /// </summary>
    public SubstanceDefinitionSourceMaterial SourceMaterial { get; set; }
    /// <summary>
    /// Status of substance within the catalogue e.g. approved.
    /// </summary>
    public CodeableConcept Status { get; set; }
    /// <summary>
    /// Structural information.
    /// </summary>
    public SubstanceDefinitionStructure Structure { get; set; }
    /// <summary>
    /// A company that supplies this substance.
    /// </summary>
    public List<Reference> Supplier { get; set; }
    /// <summary>
    /// A business level identifier of the substance.
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (Status != null)
      {
        writer.WritePropertyName("status");
        Status.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if ((Classification != null) && (Classification.Count != 0))
      {
        writer.WritePropertyName("classification");
        writer.WriteStartArray();

        foreach (CodeableConcept valClassification in Classification)
        {
          valClassification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Domain != null)
      {
        writer.WritePropertyName("domain");
        Domain.SerializeJson(writer, options);
      }

      if ((Grade != null) && (Grade.Count != 0))
      {
        writer.WritePropertyName("grade");
        writer.WriteStartArray();

        foreach (CodeableConcept valGrade in Grade)
        {
          valGrade.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((Source != null) && (Source.Count != 0))
      {
        writer.WritePropertyName("source");
        writer.WriteStartArray();

        foreach (Reference valSource in Source)
        {
          valSource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Manufacturer != null) && (Manufacturer.Count != 0))
      {
        writer.WritePropertyName("manufacturer");
        writer.WriteStartArray();

        foreach (Reference valManufacturer in Manufacturer)
        {
          valManufacturer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Supplier != null) && (Supplier.Count != 0))
      {
        writer.WritePropertyName("supplier");
        writer.WriteStartArray();

        foreach (Reference valSupplier in Supplier)
        {
          valSupplier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Moiety != null) && (Moiety.Count != 0))
      {
        writer.WritePropertyName("moiety");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionMoiety valMoiety in Moiety)
        {
          valMoiety.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Property != null) && (Property.Count != 0))
      {
        writer.WritePropertyName("property");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionProperty valProperty in Property)
        {
          valProperty.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Structure != null)
      {
        writer.WritePropertyName("structure");
        Structure.SerializeJson(writer, options);
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionCode valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Name != null) && (Name.Count != 0))
      {
        writer.WritePropertyName("name");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionName valName in Name)
        {
          valName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((MolecularWeight != null) && (MolecularWeight.Count != 0))
      {
        writer.WritePropertyName("molecularWeight");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionStructureIsotopeMolecularWeight valMolecularWeight in MolecularWeight)
        {
          valMolecularWeight.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Relationship != null) && (Relationship.Count != 0))
      {
        writer.WritePropertyName("relationship");
        writer.WriteStartArray();

        foreach (SubstanceDefinitionRelationship valRelationship in Relationship)
        {
          valRelationship.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (SourceMaterial != null)
      {
        writer.WritePropertyName("sourceMaterial");
        SourceMaterial.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "classification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Classification = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objClassification = new fhirCsR4.Models.CodeableConcept();
            objClassification.DeserializeJson(ref reader, options);
            Classification.Add(objClassification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Classification.Count == 0)
          {
            Classification = null;
          }

          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<SubstanceDefinitionCode>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionCode objCode = new fhirCsR4.Models.SubstanceDefinitionCode();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "domain":
          Domain = new fhirCsR4.Models.CodeableConcept();
          Domain.DeserializeJson(ref reader, options);
          break;

        case "grade":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Grade = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objGrade = new fhirCsR4.Models.CodeableConcept();
            objGrade.DeserializeJson(ref reader, options);
            Grade.Add(objGrade);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Grade.Count == 0)
          {
            Grade = null;
          }

          break;

        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "manufacturer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Manufacturer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objManufacturer = new fhirCsR4.Models.Reference();
            objManufacturer.DeserializeJson(ref reader, options);
            Manufacturer.Add(objManufacturer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Manufacturer.Count == 0)
          {
            Manufacturer = null;
          }

          break;

        case "moiety":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Moiety = new List<SubstanceDefinitionMoiety>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionMoiety objMoiety = new fhirCsR4.Models.SubstanceDefinitionMoiety();
            objMoiety.DeserializeJson(ref reader, options);
            Moiety.Add(objMoiety);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Moiety.Count == 0)
          {
            Moiety = null;
          }

          break;

        case "molecularWeight":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          MolecularWeight = new List<SubstanceDefinitionStructureIsotopeMolecularWeight>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionStructureIsotopeMolecularWeight objMolecularWeight = new fhirCsR4.Models.SubstanceDefinitionStructureIsotopeMolecularWeight();
            objMolecularWeight.DeserializeJson(ref reader, options);
            MolecularWeight.Add(objMolecularWeight);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (MolecularWeight.Count == 0)
          {
            MolecularWeight = null;
          }

          break;

        case "name":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Name = new List<SubstanceDefinitionName>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionName objName = new fhirCsR4.Models.SubstanceDefinitionName();
            objName.DeserializeJson(ref reader, options);
            Name.Add(objName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Name.Count == 0)
          {
            Name = null;
          }

          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "property":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Property = new List<SubstanceDefinitionProperty>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionProperty objProperty = new fhirCsR4.Models.SubstanceDefinitionProperty();
            objProperty.DeserializeJson(ref reader, options);
            Property.Add(objProperty);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Property.Count == 0)
          {
            Property = null;
          }

          break;

        case "relationship":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Relationship = new List<SubstanceDefinitionRelationship>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.SubstanceDefinitionRelationship objRelationship = new fhirCsR4.Models.SubstanceDefinitionRelationship();
            objRelationship.DeserializeJson(ref reader, options);
            Relationship.Add(objRelationship);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Relationship.Count == 0)
          {
            Relationship = null;
          }

          break;

        case "source":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Source = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSource = new fhirCsR4.Models.Reference();
            objSource.DeserializeJson(ref reader, options);
            Source.Add(objSource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Source.Count == 0)
          {
            Source = null;
          }

          break;

        case "sourceMaterial":
          SourceMaterial = new fhirCsR4.Models.SubstanceDefinitionSourceMaterial();
          SourceMaterial.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = new fhirCsR4.Models.CodeableConcept();
          Status.DeserializeJson(ref reader, options);
          break;

        case "structure":
          Structure = new fhirCsR4.Models.SubstanceDefinitionStructure();
          Structure.DeserializeJson(ref reader, options);
          break;

        case "supplier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Supplier = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objSupplier = new fhirCsR4.Models.Reference();
            objSupplier.DeserializeJson(ref reader, options);
            Supplier.Add(objSupplier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Supplier.Count == 0)
          {
            Supplier = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
}
