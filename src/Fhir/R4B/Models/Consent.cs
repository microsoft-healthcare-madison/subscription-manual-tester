// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ConsentPolicy>))]
  public class ConsentPolicy : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Entity or Organization having regulatory jurisdiction or accountability for  enforcing policies pertaining to Consent Directives.
    /// </summary>
    public string Authority { get; set; }
    /// <summary>
    /// Extension container element for Authority
    /// </summary>
    public Element _Authority { get; set; }
    /// <summary>
    /// This element is for discoverability / documentation and does not modify or qualify the policy rules.
    /// </summary>
    public string Uri { get; set; }
    /// <summary>
    /// Extension container element for Uri
    /// </summary>
    public Element _Uri { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Authority))
      {
        writer.WriteString("authority", (string)Authority!);
      }

      if (_Authority != null)
      {
        writer.WritePropertyName("_authority");
        _Authority.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Uri))
      {
        writer.WriteString("uri", (string)Uri!);
      }

      if (_Uri != null)
      {
        writer.WritePropertyName("_uri");
        _Uri.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authority":
          Authority = reader.GetString();
          break;

        case "_authority":
          _Authority = new fhirCsR4.Models.Element();
          _Authority.DeserializeJson(ref reader, options);
          break;

        case "uri":
          Uri = reader.GetString();
          break;

        case "_uri":
          _Uri = new fhirCsR4.Models.Element();
          _Uri.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ConsentVerification>))]
  public class ConsentVerification : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Date verification was collected.
    /// </summary>
    public string VerificationDate { get; set; }
    /// <summary>
    /// Extension container element for VerificationDate
    /// </summary>
    public Element _VerificationDate { get; set; }
    /// <summary>
    /// Has the instruction been verified.
    /// </summary>
    public bool Verified { get; set; }
    /// <summary>
    /// Who verified the instruction (Patient, Relative or other Authorized Person).
    /// </summary>
    public Reference VerifiedWith { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteBoolean("verified", Verified);

      if (VerifiedWith != null)
      {
        writer.WritePropertyName("verifiedWith");
        VerifiedWith.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(VerificationDate))
      {
        writer.WriteString("verificationDate", (string)VerificationDate!);
      }

      if (_VerificationDate != null)
      {
        writer.WritePropertyName("_verificationDate");
        _VerificationDate.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "verificationDate":
          VerificationDate = reader.GetString();
          break;

        case "_verificationDate":
          _VerificationDate = new fhirCsR4.Models.Element();
          _VerificationDate.DeserializeJson(ref reader, options);
          break;

        case "verified":
          Verified = reader.GetBoolean();
          break;

        case "verifiedWith":
          VerifiedWith = new fhirCsR4.Models.Reference();
          VerifiedWith.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ConsentProvisionActor>))]
  public class ConsentProvisionActor : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// How the individual is involved in the resources content that is described in the exception.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "reference":
          Reference = new fhirCsR4.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "role":
          Role = new fhirCsR4.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The resources controlled by this rule if specific resources are referenced.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ConsentProvisionData>))]
  public class ConsentProvisionData : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// How the resource reference is interpreted when testing consent restrictions.
    /// </summary>
    public string Meaning { get; set; }
    /// <summary>
    /// Extension container element for Meaning
    /// </summary>
    public Element _Meaning { get; set; }
    /// <summary>
    /// A reference to a specific resource that defines which resources are covered by this consent.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Meaning))
      {
        writer.WriteString("meaning", (string)Meaning!);
      }

      if (_Meaning != null)
      {
        writer.WritePropertyName("_meaning");
        _Meaning.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "meaning":
          Meaning = reader.GetString();
          break;

        case "_meaning":
          _Meaning = new fhirCsR4.Models.Element();
          _Meaning.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR4.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Consent.provision.data.meaning field
  /// </summary>
  public static class ConsentProvisionDataMeaningCodes {
    public const string INSTANCE = "instance";
    public const string RELATED = "related";
    public const string DEPENDENTS = "dependents";
    public const string AUTHOREDBY = "authoredby";
  }
  /// <summary>
  /// An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ConsentProvision>))]
  public class ConsentProvision : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Note that this is the direct action (not the grounds for the action covered in the purpose element). At present, the only action in the understood and tested scope of this resource is 'read'.
    /// </summary>
    public List<CodeableConcept> Action { get; set; }
    /// <summary>
    /// Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
    /// </summary>
    public List<ConsentProvisionActor> Actor { get; set; }
    /// <summary>
    /// Multiple types are or'ed together. The intention of the contentType element is that the codes refer to profiles or document types defined in a standard or an implementation guide somewhere.
    /// </summary>
    public List<Coding> Class { get; set; }
    /// <summary>
    /// Typical use of this is a Document code with class = CDA.
    /// </summary>
    public List<CodeableConcept> Code { get; set; }
    /// <summary>
    /// The resources controlled by this rule if specific resources are referenced.
    /// </summary>
    public List<ConsentProvisionData> Data { get; set; }
    /// <summary>
    /// This has a different sense to the Consent.period - that is when the consent agreement holds. This is the time period of the data that is controlled by the agreement.
    /// </summary>
    public Period DataPeriod { get; set; }
    /// <summary>
    /// The timeframe in this rule is valid.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// Rules which provide exceptions to the base rule or subrules.
    /// </summary>
    public List<ConsentProvision> Provision { get; set; }
    /// <summary>
    /// When the purpose of use tag is on the data, access request purpose of use shall not conflict.
    /// </summary>
    public List<Coding> Purpose { get; set; }
    /// <summary>
    /// If the consent specifies a security label of "R" then it applies to all resources that are labeled "R" or lower. E.g. for Confidentiality, it's a high water mark. For other kinds of security labels, subsumption logic applies. When the purpose of use tag is on the data, access request purpose of use shall not conflict.
    /// </summary>
    public List<Coding> SecurityLabel { get; set; }
    /// <summary>
    /// Action  to take - permit or deny - when the rule conditions are met.  Not permitted in root rule, required in all nested rules.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if ((Actor != null) && (Actor.Count != 0))
      {
        writer.WritePropertyName("actor");
        writer.WriteStartArray();

        foreach (ConsentProvisionActor valActor in Actor)
        {
          valActor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Action != null) && (Action.Count != 0))
      {
        writer.WritePropertyName("action");
        writer.WriteStartArray();

        foreach (CodeableConcept valAction in Action)
        {
          valAction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SecurityLabel != null) && (SecurityLabel.Count != 0))
      {
        writer.WritePropertyName("securityLabel");
        writer.WriteStartArray();

        foreach (Coding valSecurityLabel in SecurityLabel)
        {
          valSecurityLabel.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Purpose != null) && (Purpose.Count != 0))
      {
        writer.WritePropertyName("purpose");
        writer.WriteStartArray();

        foreach (Coding valPurpose in Purpose)
        {
          valPurpose.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Class != null) && (Class.Count != 0))
      {
        writer.WritePropertyName("class");
        writer.WriteStartArray();

        foreach (Coding valClass in Class)
        {
          valClass.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Code != null) && (Code.Count != 0))
      {
        writer.WritePropertyName("code");
        writer.WriteStartArray();

        foreach (CodeableConcept valCode in Code)
        {
          valCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (DataPeriod != null)
      {
        writer.WritePropertyName("dataPeriod");
        DataPeriod.SerializeJson(writer, options);
      }

      if ((Data != null) && (Data.Count != 0))
      {
        writer.WritePropertyName("data");
        writer.WriteStartArray();

        foreach (ConsentProvisionData valData in Data)
        {
          valData.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Provision != null) && (Provision.Count != 0))
      {
        writer.WritePropertyName("provision");
        writer.WriteStartArray();

        foreach (ConsentProvision valProvision in Provision)
        {
          valProvision.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "action":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Action = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objAction = new fhirCsR4.Models.CodeableConcept();
            objAction.DeserializeJson(ref reader, options);
            Action.Add(objAction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Action.Count == 0)
          {
            Action = null;
          }

          break;

        case "actor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Actor = new List<ConsentProvisionActor>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ConsentProvisionActor objActor = new fhirCsR4.Models.ConsentProvisionActor();
            objActor.DeserializeJson(ref reader, options);
            Actor.Add(objActor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Actor.Count == 0)
          {
            Actor = null;
          }

          break;

        case "class":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Class = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Coding objClass = new fhirCsR4.Models.Coding();
            objClass.DeserializeJson(ref reader, options);
            Class.Add(objClass);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Class.Count == 0)
          {
            Class = null;
          }

          break;

        case "code":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Code = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objCode = new fhirCsR4.Models.CodeableConcept();
            objCode.DeserializeJson(ref reader, options);
            Code.Add(objCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Code.Count == 0)
          {
            Code = null;
          }

          break;

        case "data":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Data = new List<ConsentProvisionData>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ConsentProvisionData objData = new fhirCsR4.Models.ConsentProvisionData();
            objData.DeserializeJson(ref reader, options);
            Data.Add(objData);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Data.Count == 0)
          {
            Data = null;
          }

          break;

        case "dataPeriod":
          DataPeriod = new fhirCsR4.Models.Period();
          DataPeriod.DeserializeJson(ref reader, options);
          break;

        case "period":
          Period = new fhirCsR4.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "provision":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Provision = new List<ConsentProvision>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ConsentProvision objProvision = new fhirCsR4.Models.ConsentProvision();
            objProvision.DeserializeJson(ref reader, options);
            Provision.Add(objProvision);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Provision.Count == 0)
          {
            Provision = null;
          }

          break;

        case "purpose":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Purpose = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Coding objPurpose = new fhirCsR4.Models.Coding();
            objPurpose.DeserializeJson(ref reader, options);
            Purpose.Add(objPurpose);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Purpose.Count == 0)
          {
            Purpose = null;
          }

          break;

        case "securityLabel":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SecurityLabel = new List<Coding>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Coding objSecurityLabel = new fhirCsR4.Models.Coding();
            objSecurityLabel.DeserializeJson(ref reader, options);
            SecurityLabel.Add(objSecurityLabel);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SecurityLabel.Count == 0)
          {
            SecurityLabel = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Consent.provision.type field
  /// </summary>
  public static class ConsentProvisionTypeCodes {
    public const string DENY = "deny";
    public const string PERMIT = "permit";
  }
  /// <summary>
  /// A record of a healthcare consumer’s  choices, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Consent>))]
  public class Consent : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Consent";
    /// <summary>
    /// A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
    /// </summary>
    public List<CodeableConcept> Category { get; set; }
    /// <summary>
    /// This is not the time of the original consent, but the time that this statement was made or derived.
    /// </summary>
    public string DateTime { get; set; }
    /// <summary>
    /// Extension container element for DateTime
    /// </summary>
    public Element _DateTime { get; set; }
    /// <summary>
    /// This identifier identifies this copy of the consent. Where this identifier is also used elsewhere as the identifier for a consent record (e.g. a CDA consent document) then the consent details are expected to be the same.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// The organization that manages the consent, and the framework within which it is executed.
    /// </summary>
    public List<Reference> Organization { get; set; }
    /// <summary>
    /// Commonly, the patient the consent pertains to is the author, but for young and old people, it may be some other person.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// Commonly, the patient the consent pertains to is the consentor, but particularly for young and old people, it may be some other person - e.g. a legal guardian.
    /// </summary>
    public List<Reference> Performer { get; set; }
    /// <summary>
    /// The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
    /// </summary>
    public List<ConsentPolicy> Policy { get; set; }
    /// <summary>
    /// If the policyRule is absent, computable consent would need to be constructed from the elements of the Consent resource.
    /// </summary>
    public CodeableConcept PolicyRule { get; set; }
    /// <summary>
    /// An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
    /// </summary>
    public ConsentProvision Provision { get; set; }
    /// <summary>
    /// A selector of the type of consent being presented: ADR, Privacy, Treatment, Research.  This list is now extensible.
    /// </summary>
    public CodeableConcept Scope { get; set; }
    /// <summary>
    /// The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
    /// </summary>
    public Attachment SourceAttachment { get; set; }
    /// <summary>
    /// The source can be contained inline (Attachment), referenced directly (Consent), referenced in a consent repository (DocumentReference), or simply by an identifier (Identifier), e.g. a CDA document id.
    /// </summary>
    public Reference SourceReference { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains the codes rejected and entered-in-error that mark the Consent as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
    /// </summary>
    public List<ConsentVerification> Verification { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Scope != null)
      {
        writer.WritePropertyName("scope");
        Scope.SerializeJson(writer, options);
      }

      if ((Category != null) && (Category.Count != 0))
      {
        writer.WritePropertyName("category");
        writer.WriteStartArray();

        foreach (CodeableConcept valCategory in Category)
        {
          valCategory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DateTime))
      {
        writer.WriteString("dateTime", (string)DateTime!);
      }

      if (_DateTime != null)
      {
        writer.WritePropertyName("_dateTime");
        _DateTime.SerializeJson(writer, options);
      }

      if ((Performer != null) && (Performer.Count != 0))
      {
        writer.WritePropertyName("performer");
        writer.WriteStartArray();

        foreach (Reference valPerformer in Performer)
        {
          valPerformer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Organization != null) && (Organization.Count != 0))
      {
        writer.WritePropertyName("organization");
        writer.WriteStartArray();

        foreach (Reference valOrganization in Organization)
        {
          valOrganization.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (SourceAttachment != null)
      {
        writer.WritePropertyName("sourceAttachment");
        SourceAttachment.SerializeJson(writer, options);
      }

      if (SourceReference != null)
      {
        writer.WritePropertyName("sourceReference");
        SourceReference.SerializeJson(writer, options);
      }

      if ((Policy != null) && (Policy.Count != 0))
      {
        writer.WritePropertyName("policy");
        writer.WriteStartArray();

        foreach (ConsentPolicy valPolicy in Policy)
        {
          valPolicy.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (PolicyRule != null)
      {
        writer.WritePropertyName("policyRule");
        PolicyRule.SerializeJson(writer, options);
      }

      if ((Verification != null) && (Verification.Count != 0))
      {
        writer.WritePropertyName("verification");
        writer.WriteStartArray();

        foreach (ConsentVerification valVerification in Verification)
        {
          valVerification.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Provision != null)
      {
        writer.WritePropertyName("provision");
        Provision.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Category = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objCategory = new fhirCsR4.Models.CodeableConcept();
            objCategory.DeserializeJson(ref reader, options);
            Category.Add(objCategory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Category.Count == 0)
          {
            Category = null;
          }

          break;

        case "dateTime":
          DateTime = reader.GetString();
          break;

        case "_dateTime":
          _DateTime = new fhirCsR4.Models.Element();
          _DateTime.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "organization":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Organization = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objOrganization = new fhirCsR4.Models.Reference();
            objOrganization.DeserializeJson(ref reader, options);
            Organization.Add(objOrganization);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Organization.Count == 0)
          {
            Organization = null;
          }

          break;

        case "patient":
          Patient = new fhirCsR4.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "performer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Performer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objPerformer = new fhirCsR4.Models.Reference();
            objPerformer.DeserializeJson(ref reader, options);
            Performer.Add(objPerformer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Performer.Count == 0)
          {
            Performer = null;
          }

          break;

        case "policy":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Policy = new List<ConsentPolicy>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ConsentPolicy objPolicy = new fhirCsR4.Models.ConsentPolicy();
            objPolicy.DeserializeJson(ref reader, options);
            Policy.Add(objPolicy);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Policy.Count == 0)
          {
            Policy = null;
          }

          break;

        case "policyRule":
          PolicyRule = new fhirCsR4.Models.CodeableConcept();
          PolicyRule.DeserializeJson(ref reader, options);
          break;

        case "provision":
          Provision = new fhirCsR4.Models.ConsentProvision();
          Provision.DeserializeJson(ref reader, options);
          break;

        case "scope":
          Scope = new fhirCsR4.Models.CodeableConcept();
          Scope.DeserializeJson(ref reader, options);
          break;

        case "sourceAttachment":
          SourceAttachment = new fhirCsR4.Models.Attachment();
          SourceAttachment.DeserializeJson(ref reader, options);
          break;

        case "sourceReference":
          SourceReference = new fhirCsR4.Models.Reference();
          SourceReference.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "verification":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Verification = new List<ConsentVerification>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ConsentVerification objVerification = new fhirCsR4.Models.ConsentVerification();
            objVerification.DeserializeJson(ref reader, options);
            Verification.Add(objVerification);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Verification.Count == 0)
          {
            Verification = null;
          }

          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Consent.status field
  /// </summary>
  public static class ConsentStatusCodes {
    public const string DRAFT = "draft";
    public const string PROPOSED = "proposed";
    public const string ACTIVE = "active";
    public const string REJECTED = "rejected";
    public const string INACTIVE = "inactive";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
}
