// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideDependsOn>))]
  public class ImplementationGuideDependsOn : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The NPM package name for the Implementation Guide that this IG depends on.
    /// </summary>
    public string PackageId { get; set; }
    /// <summary>
    /// Extension container element for PackageId
    /// </summary>
    public Element _PackageId { get; set; }
    /// <summary>
    /// Usually, A canonical reference to the implementation guide is the same as the master location at which the implementation guide is published.
    /// </summary>
    public string Uri { get; set; }
    /// <summary>
    /// Extension container element for Uri
    /// </summary>
    public Element _Uri { get; set; }
    /// <summary>
    /// This follows the syntax of the NPM packaging version field - see [[reference]].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Uri))
      {
        writer.WriteString("uri", (string)Uri!);
      }

      if (_Uri != null)
      {
        writer.WritePropertyName("_uri");
        _Uri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PackageId))
      {
        writer.WriteString("packageId", (string)PackageId!);
      }

      if (_PackageId != null)
      {
        writer.WritePropertyName("_packageId");
        _PackageId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "packageId":
          PackageId = reader.GetString();
          break;

        case "_packageId":
          _PackageId = new fhirCsR4.Models.Element();
          _PackageId.DeserializeJson(ref reader, options);
          break;

        case "uri":
          Uri = reader.GetString();
          break;

        case "_uri":
          _Uri = new fhirCsR4.Models.Element();
          _Uri.DeserializeJson(ref reader, options);
          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideGlobal>))]
  public class ImplementationGuideGlobal : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A reference to the profile that all instances must conform to.
    /// </summary>
    public string Profile { get; set; }
    /// <summary>
    /// Extension container element for Profile
    /// </summary>
    public Element _Profile { get; set; }
    /// <summary>
    /// The type must match that of the profile that is referred to but is made explicit here as a denormalization so that a system processing the implementation guide resource knows which resources the profile applies to even if the profile itself is not available.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Profile))
      {
        writer.WriteString("profile", (string)Profile!);
      }

      if (_Profile != null)
      {
        writer.WritePropertyName("_profile");
        _Profile.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "profile":
          Profile = reader.GetString();
          break;

        case "_profile":
          _Profile = new fhirCsR4.Models.Element();
          _Profile.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideDefinitionGrouping>))]
  public class ImplementationGuideDefinitionGrouping : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Human readable text describing the package.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The human-readable title to display for the package of resources when rendering the implementation guide.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideDefinitionResource>))]
  public class ImplementationGuideDefinitionResource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This is mostly used with examples to explain why it is present (though they can have extensive comments in the examples).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Examples: 
    /// * StructureDefinition -&gt; Any 
    /// * ValueSet -&gt; expansion 
    /// * OperationDefinition -&gt; Parameters 
    /// * Questionnaire -&gt; QuestionnaireResponse.
    /// </summary>
    public bool? ExampleBoolean { get; set; }
    /// <summary>
    /// Examples: 
    /// * StructureDefinition -&gt; Any 
    /// * ValueSet -&gt; expansion 
    /// * OperationDefinition -&gt; Parameters 
    /// * Questionnaire -&gt; QuestionnaireResponse.
    /// </summary>
    public string ExampleCanonical { get; set; }
    /// <summary>
    /// Extension container element for ExampleCanonical
    /// </summary>
    public Element _ExampleCanonical { get; set; }
    /// <summary>
    /// The resource SHALL be valid against all the versions it is specified to apply to. If the resource referred to is a StructureDefinition, the fhirVersion stated in the StructureDefinition cannot disagree with the version specified here; the specified versions SHALL include the version specified by the StructureDefinition, and may include additional versions using the [applicable-version](extension-structuredefinition-applicable-version.html) extension.
    /// </summary>
    public List<string> FhirVersion { get; set; }
    /// <summary>
    /// Extension container element for FhirVersion
    /// </summary>
    public List<Element> _FhirVersion { get; set; }
    /// <summary>
    /// This must correspond to a package.id element within this implementation guide.
    /// </summary>
    public string GroupingId { get; set; }
    /// <summary>
    /// Extension container element for GroupingId
    /// </summary>
    public Element _GroupingId { get; set; }
    /// <summary>
    /// A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if ((FhirVersion != null) && (FhirVersion.Count != 0))
      {
        writer.WritePropertyName("fhirVersion");
        writer.WriteStartArray();

        foreach (string valFhirVersion in FhirVersion)
        {
          writer.WriteStringValue(valFhirVersion);
        }

        writer.WriteEndArray();
      }

      if ((_FhirVersion != null) && (_FhirVersion.Count != 0))
      {
        writer.WritePropertyName("_fhirVersion");
        writer.WriteStartArray();

        foreach (Element val_FhirVersion in _FhirVersion)
        {
          val_FhirVersion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (ExampleBoolean != null)
      {
        writer.WriteBoolean("exampleBoolean", (bool)ExampleBoolean!);
      }

      if (!string.IsNullOrEmpty(ExampleCanonical))
      {
        writer.WriteString("exampleCanonical", (string)ExampleCanonical!);
      }

      if (_ExampleCanonical != null)
      {
        writer.WritePropertyName("_exampleCanonical");
        _ExampleCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(GroupingId))
      {
        writer.WriteString("groupingId", (string)GroupingId!);
      }

      if (_GroupingId != null)
      {
        writer.WritePropertyName("_groupingId");
        _GroupingId.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "exampleBoolean":
          ExampleBoolean = reader.GetBoolean();
          break;

        case "exampleCanonical":
          ExampleCanonical = reader.GetString();
          break;

        case "_exampleCanonical":
          _ExampleCanonical = new fhirCsR4.Models.Element();
          _ExampleCanonical.DeserializeJson(ref reader, options);
          break;

        case "fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FhirVersion = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            FhirVersion.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FhirVersion.Count == 0)
          {
            FhirVersion = null;
          }

          break;

        case "_fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _FhirVersion = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_FhirVersion = new fhirCsR4.Models.Element();
            obj_FhirVersion.DeserializeJson(ref reader, options);
            _FhirVersion.Add(obj_FhirVersion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_FhirVersion.Count == 0)
          {
            _FhirVersion = null;
          }

          break;

        case "groupingId":
          GroupingId = reader.GetString();
          break;

        case "_groupingId":
          _GroupingId = new fhirCsR4.Models.Element();
          _GroupingId.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR4.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideDefinitionPage>))]
  public class ImplementationGuideDefinitionPage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A code that indicates how the page is generated.
    /// </summary>
    public string Generation { get; set; }
    /// <summary>
    /// Extension container element for Generation
    /// </summary>
    public Element _Generation { get; set; }
    /// <summary>
    /// The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).
    /// </summary>
    public string NameUrl { get; set; }
    /// <summary>
    /// Extension container element for NameUrl
    /// </summary>
    public Element _NameUrl { get; set; }
    /// <summary>
    /// The publishing tool will autogenerate source for list (source = n/a) and inject included implementations for include (source = uri of guide to include).
    /// </summary>
    public Reference NameReference { get; set; }
    /// <summary>
    /// The implementation guide breadcrumbs are generated from this structure.
    /// </summary>
    public List<ImplementationGuideDefinitionPage> Page { get; set; }
    /// <summary>
    /// A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(NameUrl))
      {
        writer.WriteString("nameUrl", (string)NameUrl!);
      }

      if (_NameUrl != null)
      {
        writer.WritePropertyName("_nameUrl");
        _NameUrl.SerializeJson(writer, options);
      }

      if (NameReference != null)
      {
        writer.WritePropertyName("nameReference");
        NameReference.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Generation))
      {
        writer.WriteString("generation", (string)Generation!);
      }

      if (_Generation != null)
      {
        writer.WritePropertyName("_generation");
        _Generation.SerializeJson(writer, options);
      }

      if ((Page != null) && (Page.Count != 0))
      {
        writer.WritePropertyName("page");
        writer.WriteStartArray();

        foreach (ImplementationGuideDefinitionPage valPage in Page)
        {
          valPage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "generation":
          Generation = reader.GetString();
          break;

        case "_generation":
          _Generation = new fhirCsR4.Models.Element();
          _Generation.DeserializeJson(ref reader, options);
          break;

        case "nameUrl":
          NameUrl = reader.GetString();
          break;

        case "_nameUrl":
          _NameUrl = new fhirCsR4.Models.Element();
          _NameUrl.DeserializeJson(ref reader, options);
          break;

        case "nameReference":
          NameReference = new fhirCsR4.Models.Reference();
          NameReference.DeserializeJson(ref reader, options);
          break;

        case "page":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Page = new List<ImplementationGuideDefinitionPage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImplementationGuideDefinitionPage objPage = new fhirCsR4.Models.ImplementationGuideDefinitionPage();
            objPage.DeserializeJson(ref reader, options);
            Page.Add(objPage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Page.Count == 0)
          {
            Page = null;
          }

          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.definition.page.generation field
  /// </summary>
  public static class ImplementationGuideDefinitionPageGenerationCodes {
    public const string HTML = "html";
    public const string MARKDOWN = "markdown";
    public const string XML = "xml";
    public const string GENERATED = "generated";
  }
  /// <summary>
  /// Defines how IG is built by tools.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideDefinitionParameter>))]
  public class ImplementationGuideDefinitionParameter : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// apply | path-resource | path-pages | path-tx-cache | expansion-parameter | rule-broken-links | generate-xml | generate-json | generate-turtle | html-template.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Value for named type.
    /// </summary>
    public string Value { get; set; }
    /// <summary>
    /// Extension container element for Value
    /// </summary>
    public Element _Value { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Value))
      {
        writer.WriteString("value", (string)Value!);
      }

      if (_Value != null)
      {
        writer.WritePropertyName("_value");
        _Value.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR4.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "value":
          Value = reader.GetString();
          break;

        case "_value":
          _Value = new fhirCsR4.Models.Element();
          _Value.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.definition.parameter.code field
  /// </summary>
  public static class ImplementationGuideDefinitionParameterCodeCodes {
    public const string APPLY = "apply";
    public const string PATH_RESOURCE = "path-resource";
    public const string PATH_PAGES = "path-pages";
    public const string PATH_TX_CACHE = "path-tx-cache";
    public const string EXPANSION_PARAMETER = "expansion-parameter";
    public const string RULE_BROKEN_LINKS = "rule-broken-links";
    public const string GENERATE_XML = "generate-xml";
    public const string GENERATE_JSON = "generate-json";
    public const string GENERATE_TURTLE = "generate-turtle";
    public const string HTML_TEMPLATE = "html-template";
  }
  /// <summary>
  /// A template for building resources.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideDefinitionTemplate>))]
  public class ImplementationGuideDefinitionTemplate : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Type of template specified.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// The scope in which the template applies.
    /// </summary>
    public string Scope { get; set; }
    /// <summary>
    /// Extension container element for Scope
    /// </summary>
    public Element _Scope { get; set; }
    /// <summary>
    /// The source location for the template.
    /// </summary>
    public string Source { get; set; }
    /// <summary>
    /// Extension container element for Source
    /// </summary>
    public Element _Source { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Source))
      {
        writer.WriteString("source", (string)Source!);
      }

      if (_Source != null)
      {
        writer.WritePropertyName("_source");
        _Source.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Scope))
      {
        writer.WriteString("scope", (string)Scope!);
      }

      if (_Scope != null)
      {
        writer.WritePropertyName("_scope");
        _Scope.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR4.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "scope":
          Scope = reader.GetString();
          break;

        case "_scope":
          _Scope = new fhirCsR4.Models.Element();
          _Scope.DeserializeJson(ref reader, options);
          break;

        case "source":
          Source = reader.GetString();
          break;

        case "_source":
          _Source = new fhirCsR4.Models.Element();
          _Source.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideDefinition>))]
  public class ImplementationGuideDefinition : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Groupings are arbitrary sub-divisions of content. Typically, they are used to help build Table of Contents automatically.
    /// </summary>
    public List<ImplementationGuideDefinitionGrouping> Grouping { get; set; }
    /// <summary>
    /// Pages automatically become sections if they have sub-pages. By convention, the home page is called index.html.
    /// </summary>
    public ImplementationGuideDefinitionPage Page { get; set; }
    /// <summary>
    /// Defines how IG is built by tools.
    /// </summary>
    public List<ImplementationGuideDefinitionParameter> Parameter { get; set; }
    /// <summary>
    /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
    /// </summary>
    public List<ImplementationGuideDefinitionResource> Resource { get; set; }
    /// <summary>
    /// A template for building resources.
    /// </summary>
    public List<ImplementationGuideDefinitionTemplate> Template { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Grouping != null) && (Grouping.Count != 0))
      {
        writer.WritePropertyName("grouping");
        writer.WriteStartArray();

        foreach (ImplementationGuideDefinitionGrouping valGrouping in Grouping)
        {
          valGrouping.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Resource != null) && (Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();

        foreach (ImplementationGuideDefinitionResource valResource in Resource)
        {
          valResource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Page != null)
      {
        writer.WritePropertyName("page");
        Page.SerializeJson(writer, options);
      }

      if ((Parameter != null) && (Parameter.Count != 0))
      {
        writer.WritePropertyName("parameter");
        writer.WriteStartArray();

        foreach (ImplementationGuideDefinitionParameter valParameter in Parameter)
        {
          valParameter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Template != null) && (Template.Count != 0))
      {
        writer.WritePropertyName("template");
        writer.WriteStartArray();

        foreach (ImplementationGuideDefinitionTemplate valTemplate in Template)
        {
          valTemplate.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "grouping":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Grouping = new List<ImplementationGuideDefinitionGrouping>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImplementationGuideDefinitionGrouping objGrouping = new fhirCsR4.Models.ImplementationGuideDefinitionGrouping();
            objGrouping.DeserializeJson(ref reader, options);
            Grouping.Add(objGrouping);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Grouping.Count == 0)
          {
            Grouping = null;
          }

          break;

        case "page":
          Page = new fhirCsR4.Models.ImplementationGuideDefinitionPage();
          Page.DeserializeJson(ref reader, options);
          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Parameter = new List<ImplementationGuideDefinitionParameter>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImplementationGuideDefinitionParameter objParameter = new fhirCsR4.Models.ImplementationGuideDefinitionParameter();
            objParameter.DeserializeJson(ref reader, options);
            Parameter.Add(objParameter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Parameter.Count == 0)
          {
            Parameter = null;
          }

          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Resource = new List<ImplementationGuideDefinitionResource>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImplementationGuideDefinitionResource objResource = new fhirCsR4.Models.ImplementationGuideDefinitionResource();
            objResource.DeserializeJson(ref reader, options);
            Resource.Add(objResource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Resource.Count == 0)
          {
            Resource = null;
          }

          break;

        case "template":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Template = new List<ImplementationGuideDefinitionTemplate>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImplementationGuideDefinitionTemplate objTemplate = new fhirCsR4.Models.ImplementationGuideDefinitionTemplate();
            objTemplate.DeserializeJson(ref reader, options);
            Template.Add(objTemplate);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Template.Count == 0)
          {
            Template = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideManifestResource>))]
  public class ImplementationGuideManifestResource : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
    /// </summary>
    public bool? ExampleBoolean { get; set; }
    /// <summary>
    /// Typically, conformance resources and knowledge resources are directly part of the implementation guide, with their normal meaning, and patient linked resources are usually examples. However this is not always true.
    /// </summary>
    public string ExampleCanonical { get; set; }
    /// <summary>
    /// Extension container element for ExampleCanonical
    /// </summary>
    public Element _ExampleCanonical { get; set; }
    /// <summary>
    /// Usually this is a relative URL that locates the resource within the implementation guide. If you authoring an implementation guide, and will publish it using the FHIR publication tooling, use a URI that may point to a resource, or to one of various alternative representations (e.g. spreadsheet). The tooling will convert this when it publishes it.
    /// </summary>
    public Reference Reference { get; set; }
    /// <summary>
    /// Appending 'rendering' + "/" + this should resolve to the resource page.
    /// </summary>
    public string RelativePath { get; set; }
    /// <summary>
    /// Extension container element for RelativePath
    /// </summary>
    public Element _RelativePath { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (ExampleBoolean != null)
      {
        writer.WriteBoolean("exampleBoolean", (bool)ExampleBoolean!);
      }

      if (!string.IsNullOrEmpty(ExampleCanonical))
      {
        writer.WriteString("exampleCanonical", (string)ExampleCanonical!);
      }

      if (_ExampleCanonical != null)
      {
        writer.WritePropertyName("_exampleCanonical");
        _ExampleCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(RelativePath))
      {
        writer.WriteString("relativePath", (string)RelativePath!);
      }

      if (_RelativePath != null)
      {
        writer.WritePropertyName("_relativePath");
        _RelativePath.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "exampleBoolean":
          ExampleBoolean = reader.GetBoolean();
          break;

        case "exampleCanonical":
          ExampleCanonical = reader.GetString();
          break;

        case "_exampleCanonical":
          _ExampleCanonical = new fhirCsR4.Models.Element();
          _ExampleCanonical.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR4.Models.Reference();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "relativePath":
          RelativePath = reader.GetString();
          break;

        case "_relativePath":
          _RelativePath = new fhirCsR4.Models.Element();
          _RelativePath.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about a page within the IG.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideManifestPage>))]
  public class ImplementationGuideManifestPage : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Appending 'rendering' + "/" + page.name + "#" + page.anchor should resolve to the anchor.
    /// </summary>
    public List<string> Anchor { get; set; }
    /// <summary>
    /// Extension container element for Anchor
    /// </summary>
    public List<Element> _Anchor { get; set; }
    /// <summary>
    /// Appending 'rendering' + "/" + this should resolve to the page.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Label for the page intended for human display.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if ((Anchor != null) && (Anchor.Count != 0))
      {
        writer.WritePropertyName("anchor");
        writer.WriteStartArray();

        foreach (string valAnchor in Anchor)
        {
          writer.WriteStringValue(valAnchor);
        }

        writer.WriteEndArray();
      }

      if ((_Anchor != null) && (_Anchor.Count != 0))
      {
        writer.WritePropertyName("_anchor");
        writer.WriteStartArray();

        foreach (Element val_Anchor in _Anchor)
        {
          val_Anchor.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "anchor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Anchor = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Anchor.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Anchor.Count == 0)
          {
            Anchor = null;
          }

          break;

        case "_anchor":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Anchor = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Anchor = new fhirCsR4.Models.Element();
            obj_Anchor.DeserializeJson(ref reader, options);
            _Anchor.Add(obj_Anchor);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Anchor.Count == 0)
          {
            _Anchor = null;
          }

          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about an assembled implementation guide, created by the publication tooling.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuideManifest>))]
  public class ImplementationGuideManifest : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Indicates a relative path to an image that exists within the IG.
    /// </summary>
    public List<string> Image { get; set; }
    /// <summary>
    /// Extension container element for Image
    /// </summary>
    public List<Element> _Image { get; set; }
    /// <summary>
    /// Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
    /// </summary>
    public List<string> Other { get; set; }
    /// <summary>
    /// Extension container element for Other
    /// </summary>
    public List<Element> _Other { get; set; }
    /// <summary>
    /// Information about a page within the IG.
    /// </summary>
    public List<ImplementationGuideManifestPage> Page { get; set; }
    /// <summary>
    /// A pointer to official web page, PDF or other rendering of the implementation guide.
    /// </summary>
    public string Rendering { get; set; }
    /// <summary>
    /// Extension container element for Rendering
    /// </summary>
    public Element _Rendering { get; set; }
    /// <summary>
    /// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
    /// </summary>
    public List<ImplementationGuideManifestResource> Resource { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Rendering))
      {
        writer.WriteString("rendering", (string)Rendering!);
      }

      if (_Rendering != null)
      {
        writer.WritePropertyName("_rendering");
        _Rendering.SerializeJson(writer, options);
      }

      if ((Resource != null) && (Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();

        foreach (ImplementationGuideManifestResource valResource in Resource)
        {
          valResource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Page != null) && (Page.Count != 0))
      {
        writer.WritePropertyName("page");
        writer.WriteStartArray();

        foreach (ImplementationGuideManifestPage valPage in Page)
        {
          valPage.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Image != null) && (Image.Count != 0))
      {
        writer.WritePropertyName("image");
        writer.WriteStartArray();

        foreach (string valImage in Image)
        {
          writer.WriteStringValue(valImage);
        }

        writer.WriteEndArray();
      }

      if ((_Image != null) && (_Image.Count != 0))
      {
        writer.WritePropertyName("_image");
        writer.WriteStartArray();

        foreach (Element val_Image in _Image)
        {
          val_Image.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Other != null) && (Other.Count != 0))
      {
        writer.WritePropertyName("other");
        writer.WriteStartArray();

        foreach (string valOther in Other)
        {
          writer.WriteStringValue(valOther);
        }

        writer.WriteEndArray();
      }

      if ((_Other != null) && (_Other.Count != 0))
      {
        writer.WritePropertyName("_other");
        writer.WriteStartArray();

        foreach (Element val_Other in _Other)
        {
          val_Other.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "image":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Image = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Image.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Image.Count == 0)
          {
            Image = null;
          }

          break;

        case "_image":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Image = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Image = new fhirCsR4.Models.Element();
            obj_Image.DeserializeJson(ref reader, options);
            _Image.Add(obj_Image);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Image.Count == 0)
          {
            _Image = null;
          }

          break;

        case "other":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Other = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Other.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Other.Count == 0)
          {
            Other = null;
          }

          break;

        case "_other":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Other = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Other = new fhirCsR4.Models.Element();
            obj_Other.DeserializeJson(ref reader, options);
            _Other.Add(obj_Other);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Other.Count == 0)
          {
            _Other = null;
          }

          break;

        case "page":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Page = new List<ImplementationGuideManifestPage>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImplementationGuideManifestPage objPage = new fhirCsR4.Models.ImplementationGuideManifestPage();
            objPage.DeserializeJson(ref reader, options);
            Page.Add(objPage);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Page.Count == 0)
          {
            Page = null;
          }

          break;

        case "rendering":
          Rendering = reader.GetString();
          break;

        case "_rendering":
          _Rendering = new fhirCsR4.Models.Element();
          _Rendering.DeserializeJson(ref reader, options);
          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Resource = new List<ImplementationGuideManifestResource>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImplementationGuideManifestResource objResource = new fhirCsR4.Models.ImplementationGuideManifestResource();
            objResource.DeserializeJson(ref reader, options);
            Resource.Add(objResource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Resource.Count == 0)
          {
            Resource = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ImplementationGuide>))]
  public class ImplementationGuide : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "ImplementationGuide";
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
    /// </summary>
    public string Copyright { get; set; }
    /// <summary>
    /// Extension container element for Copyright
    /// </summary>
    public Element _Copyright { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the implementation guide. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// Principally, this consists of information abuot source resource and file locations, and build parameters and templates.
    /// </summary>
    public ImplementationGuideDefinition Definition { get; set; }
    /// <summary>
    /// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
    /// </summary>
    public List<ImplementationGuideDependsOn> DependsOn { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the implementation guide was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the implementation guide as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the implementation guide is presumed to be the predominant language in the place the implementation guide was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of implementation guides that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// Most implementation guides target a single version - e.g. they describe how to use a particular version, and the profiles and examples etc are valid for that version. But some implementation guides describe how to use multiple different versions of FHIR to solve the same problem, or in concert with each other. Typically, the requirement to support multiple versions arises as implementation matures and different implementation communities are stuck at different versions by regulation or market dynamics.
    /// </summary>
    public List<string> FhirVersion { get; set; }
    /// <summary>
    /// Extension container element for FhirVersion
    /// </summary>
    public List<Element> _FhirVersion { get; set; }
    /// <summary>
    /// See [Default Profiles](implementationguide.html#default) for a discussion of which resources are 'covered' by an implementation guide.
    /// </summary>
    public List<ImplementationGuideGlobal> Global { get; set; }
    /// <summary>
    /// It may be possible for the implementation guide to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
    /// </summary>
    public string License { get; set; }
    /// <summary>
    /// Extension container element for License
    /// </summary>
    public Element _License { get; set; }
    /// <summary>
    /// Information about an assembled implementation guide, created by the publication tooling.
    /// </summary>
    public ImplementationGuideManifest Manifest { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Many (if not all) IG publishing tools will require that this element be present. For implementation guides published through HL7 or the FHIR foundation, the FHIR product director assigns package IDs.
    /// </summary>
    public string PackageId { get; set; }
    /// <summary>
    /// Extension container element for PackageId
    /// </summary>
    public Element _PackageId { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the implementation guide is the organization or individual primarily responsible for the maintenance and upkeep of the implementation guide. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the implementation guide. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// Allows filtering of implementation guides that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different implementation guide instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the implementation guide with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Copyright))
      {
        writer.WriteString("copyright", (string)Copyright!);
      }

      if (_Copyright != null)
      {
        writer.WritePropertyName("_copyright");
        _Copyright.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(PackageId))
      {
        writer.WriteString("packageId", (string)PackageId!);
      }

      if (_PackageId != null)
      {
        writer.WritePropertyName("_packageId");
        _PackageId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(License))
      {
        writer.WriteString("license", (string)License!);
      }

      if (_License != null)
      {
        writer.WritePropertyName("_license");
        _License.SerializeJson(writer, options);
      }

      if ((FhirVersion != null) && (FhirVersion.Count != 0))
      {
        writer.WritePropertyName("fhirVersion");
        writer.WriteStartArray();

        foreach (string valFhirVersion in FhirVersion)
        {
          writer.WriteStringValue(valFhirVersion);
        }

        writer.WriteEndArray();
      }

      if ((_FhirVersion != null) && (_FhirVersion.Count != 0))
      {
        writer.WritePropertyName("_fhirVersion");
        writer.WriteStartArray();

        foreach (Element val_FhirVersion in _FhirVersion)
        {
          val_FhirVersion.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((DependsOn != null) && (DependsOn.Count != 0))
      {
        writer.WritePropertyName("dependsOn");
        writer.WriteStartArray();

        foreach (ImplementationGuideDependsOn valDependsOn in DependsOn)
        {
          valDependsOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Global != null) && (Global.Count != 0))
      {
        writer.WritePropertyName("global");
        writer.WriteStartArray();

        foreach (ImplementationGuideGlobal valGlobal in Global)
        {
          valGlobal.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Definition != null)
      {
        writer.WritePropertyName("definition");
        Definition.SerializeJson(writer, options);
      }

      if (Manifest != null)
      {
        writer.WritePropertyName("manifest");
        Manifest.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactDetail objContact = new fhirCsR4.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "copyright":
          Copyright = reader.GetString();
          break;

        case "_copyright":
          _Copyright = new fhirCsR4.Models.Element();
          _Copyright.DeserializeJson(ref reader, options);
          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "definition":
          Definition = new fhirCsR4.Models.ImplementationGuideDefinition();
          Definition.DeserializeJson(ref reader, options);
          break;

        case "dependsOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DependsOn = new List<ImplementationGuideDependsOn>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImplementationGuideDependsOn objDependsOn = new fhirCsR4.Models.ImplementationGuideDependsOn();
            objDependsOn.DeserializeJson(ref reader, options);
            DependsOn.Add(objDependsOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DependsOn.Count == 0)
          {
            DependsOn = null;
          }

          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FhirVersion = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            FhirVersion.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FhirVersion.Count == 0)
          {
            FhirVersion = null;
          }

          break;

        case "_fhirVersion":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _FhirVersion = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_FhirVersion = new fhirCsR4.Models.Element();
            obj_FhirVersion.DeserializeJson(ref reader, options);
            _FhirVersion.Add(obj_FhirVersion);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_FhirVersion.Count == 0)
          {
            _FhirVersion = null;
          }

          break;

        case "global":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Global = new List<ImplementationGuideGlobal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ImplementationGuideGlobal objGlobal = new fhirCsR4.Models.ImplementationGuideGlobal();
            objGlobal.DeserializeJson(ref reader, options);
            Global.Add(objGlobal);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Global.Count == 0)
          {
            Global = null;
          }

          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objJurisdiction = new fhirCsR4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "license":
          License = reader.GetString();
          break;

        case "_license":
          _License = new fhirCsR4.Models.Element();
          _License.DeserializeJson(ref reader, options);
          break;

        case "manifest":
          Manifest = new fhirCsR4.Models.ImplementationGuideManifest();
          Manifest.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "packageId":
          PackageId = reader.GetString();
          break;

        case "_packageId":
          _PackageId = new fhirCsR4.Models.Element();
          _PackageId.DeserializeJson(ref reader, options);
          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR4.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.UsageContext objUseContext = new fhirCsR4.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the ImplementationGuide.status field
  /// </summary>
  public static class ImplementationGuideStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
