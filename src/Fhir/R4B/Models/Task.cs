// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TaskRestriction>))]
  public class TaskRestriction : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Note that period.high is the due date representing the time by which the task should be completed.
    /// </summary>
    public Period Period { get; set; }
    /// <summary>
    /// For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
    /// </summary>
    public List<Reference> Recipient { get; set; }
    /// <summary>
    /// Indicates the number of times the requested action should occur.
    /// </summary>
    public uint? Repetitions { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Repetitions != null)
      {
        writer.WriteNumber("repetitions", (uint)Repetitions!);
      }

      if (Period != null)
      {
        writer.WritePropertyName("period");
        Period.SerializeJson(writer, options);
      }

      if ((Recipient != null) && (Recipient.Count != 0))
      {
        writer.WritePropertyName("recipient");
        writer.WriteStartArray();

        foreach (Reference valRecipient in Recipient)
        {
          valRecipient.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "period":
          Period = new fhirCsR4.Models.Period();
          Period.DeserializeJson(ref reader, options);
          break;

        case "recipient":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Recipient = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objRecipient = new fhirCsR4.Models.Reference();
            objRecipient.DeserializeJson(ref reader, options);
            Recipient.Add(objRecipient);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Recipient.Count == 0)
          {
            Recipient = null;
          }

          break;

        case "repetitions":
          Repetitions = reader.GetUInt32();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Additional information that may be needed in the execution of the task.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TaskInput>))]
  public class TaskInput : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// If referencing a BPMN workflow or Protocol, the "system" is the URL for the workflow definition and the code is the "name" of the required input.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public byte[] ValueBase64Binary { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueCanonical { get; set; }
    /// <summary>
    /// Extension container element for ValueCanonical
    /// </summary>
    public Element _ValueCanonical { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueCode { get; set; }
    /// <summary>
    /// Extension container element for ValueCode
    /// </summary>
    public Element _ValueCode { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueDate { get; set; }
    /// <summary>
    /// Extension container element for ValueDate
    /// </summary>
    public Element _ValueDate { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueDateTime { get; set; }
    /// <summary>
    /// Extension container element for ValueDateTime
    /// </summary>
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public decimal? ValueDecimal { get; set; }
    /// <summary>
    /// Extension container element for ValueDecimal
    /// </summary>
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueId { get; set; }
    /// <summary>
    /// Extension container element for ValueId
    /// </summary>
    public Element _ValueId { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueInstant { get; set; }
    /// <summary>
    /// Extension container element for ValueInstant
    /// </summary>
    public Element _ValueInstant { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueMarkdown { get; set; }
    /// <summary>
    /// Extension container element for ValueMarkdown
    /// </summary>
    public Element _ValueMarkdown { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueOid { get; set; }
    /// <summary>
    /// Extension container element for ValueOid
    /// </summary>
    public Element _ValueOid { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public uint? ValuePositiveInt { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueTime { get; set; }
    /// <summary>
    /// Extension container element for ValueTime
    /// </summary>
    public Element _ValueTime { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public uint? ValueUnsignedInt { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueUri { get; set; }
    /// <summary>
    /// Extension container element for ValueUri
    /// </summary>
    public Element _ValueUri { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public string ValueUrl { get; set; }
    /// <summary>
    /// Extension container element for ValueUrl
    /// </summary>
    public Element _ValueUrl { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Guid? ValueUuid { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Address ValueAddress { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Age ValueAge { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Annotation ValueAnnotation { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Coding ValueCoding { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public ContactPoint ValueContactPoint { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Count ValueCount { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Distance ValueDistance { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Duration ValueDuration { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public HumanName ValueHumanName { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Identifier ValueIdentifier { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Money ValueMoney { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Period ValuePeriod { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Range ValueRange { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Ratio ValueRatio { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public SampledData ValueSampledData { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Signature ValueSignature { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Timing ValueTiming { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public ContactDetail ValueContactDetail { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Contributor ValueContributor { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public DataRequirement ValueDataRequirement { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Expression ValueExpression { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public ParameterDefinition ValueParameterDefinition { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public RelatedArtifact ValueRelatedArtifact { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public TriggerDefinition ValueTriggerDefinition { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public UsageContext ValueUsageContext { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Dosage ValueDosage { get; set; }
    /// <summary>
    /// The value of the input parameter as a basic type.
    /// </summary>
    public Meta ValueMeta { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueBase64Binary != null)
      {
        writer.WriteString("valueBase64Binary", System.Convert.ToBase64String(ValueBase64Binary));
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (!string.IsNullOrEmpty(ValueCanonical))
      {
        writer.WriteString("valueCanonical", (string)ValueCanonical!);
      }

      if (_ValueCanonical != null)
      {
        writer.WritePropertyName("_valueCanonical");
        _ValueCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueCode))
      {
        writer.WriteString("valueCode", (string)ValueCode!);
      }

      if (_ValueCode != null)
      {
        writer.WritePropertyName("_valueCode");
        _ValueCode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDate))
      {
        writer.WriteString("valueDate", (string)ValueDate!);
      }

      if (_ValueDate != null)
      {
        writer.WritePropertyName("_valueDate");
        _ValueDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDateTime))
      {
        writer.WriteString("valueDateTime", (string)ValueDateTime!);
      }

      if (_ValueDateTime != null)
      {
        writer.WritePropertyName("_valueDateTime");
        _ValueDateTime.SerializeJson(writer, options);
      }

      if (ValueDecimal != null)
      {
        writer.WriteNumber("valueDecimal", (decimal)ValueDecimal!);
      }

      if (_ValueDecimal != null)
      {
        writer.WritePropertyName("_valueDecimal");
        _ValueDecimal.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueId))
      {
        writer.WriteString("valueId", (string)ValueId!);
      }

      if (_ValueId != null)
      {
        writer.WritePropertyName("_valueId");
        _ValueId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueInstant))
      {
        writer.WriteString("valueInstant", (string)ValueInstant!);
      }

      if (_ValueInstant != null)
      {
        writer.WritePropertyName("_valueInstant");
        _ValueInstant.SerializeJson(writer, options);
      }

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (!string.IsNullOrEmpty(ValueMarkdown))
      {
        writer.WriteString("valueMarkdown", (string)ValueMarkdown!);
      }

      if (_ValueMarkdown != null)
      {
        writer.WritePropertyName("_valueMarkdown");
        _ValueMarkdown.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueOid))
      {
        writer.WriteString("valueOid", (string)ValueOid!);
      }

      if (_ValueOid != null)
      {
        writer.WritePropertyName("_valueOid");
        _ValueOid.SerializeJson(writer, options);
      }

      if (ValuePositiveInt != null)
      {
        writer.WriteNumber("valuePositiveInt", (uint)ValuePositiveInt!);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueTime))
      {
        writer.WriteString("valueTime", (string)ValueTime!);
      }

      if (_ValueTime != null)
      {
        writer.WritePropertyName("_valueTime");
        _ValueTime.SerializeJson(writer, options);
      }

      if (ValueUnsignedInt != null)
      {
        writer.WriteNumber("valueUnsignedInt", (uint)ValueUnsignedInt!);
      }

      if (!string.IsNullOrEmpty(ValueUri))
      {
        writer.WriteString("valueUri", (string)ValueUri!);
      }

      if (_ValueUri != null)
      {
        writer.WritePropertyName("_valueUri");
        _ValueUri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueUrl))
      {
        writer.WriteString("valueUrl", (string)ValueUrl!);
      }

      if (_ValueUrl != null)
      {
        writer.WritePropertyName("_valueUrl");
        _ValueUrl.SerializeJson(writer, options);
      }

      if (ValueUuid != null)
      {
        writer.WriteString("valueUuid", (Guid)ValueUuid!);
      }

      if (ValueAddress != null)
      {
        writer.WritePropertyName("valueAddress");
        ValueAddress.SerializeJson(writer, options);
      }

      if (ValueAge != null)
      {
        writer.WritePropertyName("valueAge");
        ValueAge.SerializeJson(writer, options);
      }

      if (ValueAnnotation != null)
      {
        writer.WritePropertyName("valueAnnotation");
        ValueAnnotation.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (ValueCoding != null)
      {
        writer.WritePropertyName("valueCoding");
        ValueCoding.SerializeJson(writer, options);
      }

      if (ValueContactPoint != null)
      {
        writer.WritePropertyName("valueContactPoint");
        ValueContactPoint.SerializeJson(writer, options);
      }

      if (ValueCount != null)
      {
        writer.WritePropertyName("valueCount");
        ValueCount.SerializeJson(writer, options);
      }

      if (ValueDistance != null)
      {
        writer.WritePropertyName("valueDistance");
        ValueDistance.SerializeJson(writer, options);
      }

      if (ValueDuration != null)
      {
        writer.WritePropertyName("valueDuration");
        ValueDuration.SerializeJson(writer, options);
      }

      if (ValueHumanName != null)
      {
        writer.WritePropertyName("valueHumanName");
        ValueHumanName.SerializeJson(writer, options);
      }

      if (ValueIdentifier != null)
      {
        writer.WritePropertyName("valueIdentifier");
        ValueIdentifier.SerializeJson(writer, options);
      }

      if (ValueMoney != null)
      {
        writer.WritePropertyName("valueMoney");
        ValueMoney.SerializeJson(writer, options);
      }

      if (ValuePeriod != null)
      {
        writer.WritePropertyName("valuePeriod");
        ValuePeriod.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueRange != null)
      {
        writer.WritePropertyName("valueRange");
        ValueRange.SerializeJson(writer, options);
      }

      if (ValueRatio != null)
      {
        writer.WritePropertyName("valueRatio");
        ValueRatio.SerializeJson(writer, options);
      }

      if (ValueReference != null)
      {
        writer.WritePropertyName("valueReference");
        ValueReference.SerializeJson(writer, options);
      }

      if (ValueSampledData != null)
      {
        writer.WritePropertyName("valueSampledData");
        ValueSampledData.SerializeJson(writer, options);
      }

      if (ValueSignature != null)
      {
        writer.WritePropertyName("valueSignature");
        ValueSignature.SerializeJson(writer, options);
      }

      if (ValueTiming != null)
      {
        writer.WritePropertyName("valueTiming");
        ValueTiming.SerializeJson(writer, options);
      }

      if (ValueContactDetail != null)
      {
        writer.WritePropertyName("valueContactDetail");
        ValueContactDetail.SerializeJson(writer, options);
      }

      if (ValueContributor != null)
      {
        writer.WritePropertyName("valueContributor");
        ValueContributor.SerializeJson(writer, options);
      }

      if (ValueDataRequirement != null)
      {
        writer.WritePropertyName("valueDataRequirement");
        ValueDataRequirement.SerializeJson(writer, options);
      }

      if (ValueExpression != null)
      {
        writer.WritePropertyName("valueExpression");
        ValueExpression.SerializeJson(writer, options);
      }

      if (ValueParameterDefinition != null)
      {
        writer.WritePropertyName("valueParameterDefinition");
        ValueParameterDefinition.SerializeJson(writer, options);
      }

      if (ValueRelatedArtifact != null)
      {
        writer.WritePropertyName("valueRelatedArtifact");
        ValueRelatedArtifact.SerializeJson(writer, options);
      }

      if (ValueTriggerDefinition != null)
      {
        writer.WritePropertyName("valueTriggerDefinition");
        ValueTriggerDefinition.SerializeJson(writer, options);
      }

      if (ValueUsageContext != null)
      {
        writer.WritePropertyName("valueUsageContext");
        ValueUsageContext.SerializeJson(writer, options);
      }

      if (ValueDosage != null)
      {
        writer.WritePropertyName("valueDosage");
        ValueDosage.SerializeJson(writer, options);
      }

      if (ValueMeta != null)
      {
        writer.WritePropertyName("valueMeta");
        ValueMeta.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueBase64Binary":
          ValueBase64Binary = System.Convert.FromBase64String(reader.GetString());
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "valueCanonical":
          ValueCanonical = reader.GetString();
          break;

        case "_valueCanonical":
          _ValueCanonical = new fhirCsR4.Models.Element();
          _ValueCanonical.DeserializeJson(ref reader, options);
          break;

        case "valueCode":
          ValueCode = reader.GetString();
          break;

        case "_valueCode":
          _ValueCode = new fhirCsR4.Models.Element();
          _ValueCode.DeserializeJson(ref reader, options);
          break;

        case "valueDate":
          ValueDate = reader.GetString();
          break;

        case "_valueDate":
          _ValueDate = new fhirCsR4.Models.Element();
          _ValueDate.DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          ValueDateTime = reader.GetString();
          break;

        case "_valueDateTime":
          _ValueDateTime = new fhirCsR4.Models.Element();
          _ValueDateTime.DeserializeJson(ref reader, options);
          break;

        case "valueDecimal":
          ValueDecimal = reader.GetDecimal();
          break;

        case "_valueDecimal":
          _ValueDecimal = new fhirCsR4.Models.Element();
          _ValueDecimal.DeserializeJson(ref reader, options);
          break;

        case "valueId":
          ValueId = reader.GetString();
          break;

        case "_valueId":
          _ValueId = new fhirCsR4.Models.Element();
          _ValueId.DeserializeJson(ref reader, options);
          break;

        case "valueInstant":
          ValueInstant = reader.GetString();
          break;

        case "_valueInstant":
          _ValueInstant = new fhirCsR4.Models.Element();
          _ValueInstant.DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "valueMarkdown":
          ValueMarkdown = reader.GetString();
          break;

        case "_valueMarkdown":
          _ValueMarkdown = new fhirCsR4.Models.Element();
          _ValueMarkdown.DeserializeJson(ref reader, options);
          break;

        case "valueOid":
          ValueOid = reader.GetString();
          break;

        case "_valueOid":
          _ValueOid = new fhirCsR4.Models.Element();
          _ValueOid.DeserializeJson(ref reader, options);
          break;

        case "valuePositiveInt":
          ValuePositiveInt = reader.GetUInt32();
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR4.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          ValueTime = reader.GetString();
          break;

        case "_valueTime":
          _ValueTime = new fhirCsR4.Models.Element();
          _ValueTime.DeserializeJson(ref reader, options);
          break;

        case "valueUnsignedInt":
          ValueUnsignedInt = reader.GetUInt32();
          break;

        case "valueUri":
          ValueUri = reader.GetString();
          break;

        case "_valueUri":
          _ValueUri = new fhirCsR4.Models.Element();
          _ValueUri.DeserializeJson(ref reader, options);
          break;

        case "valueUrl":
          ValueUrl = reader.GetString();
          break;

        case "_valueUrl":
          _ValueUrl = new fhirCsR4.Models.Element();
          _ValueUrl.DeserializeJson(ref reader, options);
          break;

        case "valueUuid":
          ValueUuid = reader.GetGuid();
          break;

        case "valueAddress":
          ValueAddress = new fhirCsR4.Models.Address();
          ValueAddress.DeserializeJson(ref reader, options);
          break;

        case "valueAge":
          ValueAge = new fhirCsR4.Models.Age();
          ValueAge.DeserializeJson(ref reader, options);
          break;

        case "valueAnnotation":
          ValueAnnotation = new fhirCsR4.Models.Annotation();
          ValueAnnotation.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR4.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          ValueCoding = new fhirCsR4.Models.Coding();
          ValueCoding.DeserializeJson(ref reader, options);
          break;

        case "valueContactPoint":
          ValueContactPoint = new fhirCsR4.Models.ContactPoint();
          ValueContactPoint.DeserializeJson(ref reader, options);
          break;

        case "valueCount":
          ValueCount = new fhirCsR4.Models.Count();
          ValueCount.DeserializeJson(ref reader, options);
          break;

        case "valueDistance":
          ValueDistance = new fhirCsR4.Models.Distance();
          ValueDistance.DeserializeJson(ref reader, options);
          break;

        case "valueDuration":
          ValueDuration = new fhirCsR4.Models.Duration();
          ValueDuration.DeserializeJson(ref reader, options);
          break;

        case "valueHumanName":
          ValueHumanName = new fhirCsR4.Models.HumanName();
          ValueHumanName.DeserializeJson(ref reader, options);
          break;

        case "valueIdentifier":
          ValueIdentifier = new fhirCsR4.Models.Identifier();
          ValueIdentifier.DeserializeJson(ref reader, options);
          break;

        case "valueMoney":
          ValueMoney = new fhirCsR4.Models.Money();
          ValueMoney.DeserializeJson(ref reader, options);
          break;

        case "valuePeriod":
          ValuePeriod = new fhirCsR4.Models.Period();
          ValuePeriod.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR4.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueRange":
          ValueRange = new fhirCsR4.Models.Range();
          ValueRange.DeserializeJson(ref reader, options);
          break;

        case "valueRatio":
          ValueRatio = new fhirCsR4.Models.Ratio();
          ValueRatio.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new fhirCsR4.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        case "valueSampledData":
          ValueSampledData = new fhirCsR4.Models.SampledData();
          ValueSampledData.DeserializeJson(ref reader, options);
          break;

        case "valueSignature":
          ValueSignature = new fhirCsR4.Models.Signature();
          ValueSignature.DeserializeJson(ref reader, options);
          break;

        case "valueTiming":
          ValueTiming = new fhirCsR4.Models.Timing();
          ValueTiming.DeserializeJson(ref reader, options);
          break;

        case "valueContactDetail":
          ValueContactDetail = new fhirCsR4.Models.ContactDetail();
          ValueContactDetail.DeserializeJson(ref reader, options);
          break;

        case "valueContributor":
          ValueContributor = new fhirCsR4.Models.Contributor();
          ValueContributor.DeserializeJson(ref reader, options);
          break;

        case "valueDataRequirement":
          ValueDataRequirement = new fhirCsR4.Models.DataRequirement();
          ValueDataRequirement.DeserializeJson(ref reader, options);
          break;

        case "valueExpression":
          ValueExpression = new fhirCsR4.Models.Expression();
          ValueExpression.DeserializeJson(ref reader, options);
          break;

        case "valueParameterDefinition":
          ValueParameterDefinition = new fhirCsR4.Models.ParameterDefinition();
          ValueParameterDefinition.DeserializeJson(ref reader, options);
          break;

        case "valueRelatedArtifact":
          ValueRelatedArtifact = new fhirCsR4.Models.RelatedArtifact();
          ValueRelatedArtifact.DeserializeJson(ref reader, options);
          break;

        case "valueTriggerDefinition":
          ValueTriggerDefinition = new fhirCsR4.Models.TriggerDefinition();
          ValueTriggerDefinition.DeserializeJson(ref reader, options);
          break;

        case "valueUsageContext":
          ValueUsageContext = new fhirCsR4.Models.UsageContext();
          ValueUsageContext.DeserializeJson(ref reader, options);
          break;

        case "valueDosage":
          ValueDosage = new fhirCsR4.Models.Dosage();
          ValueDosage.DeserializeJson(ref reader, options);
          break;

        case "valueMeta":
          ValueMeta = new fhirCsR4.Models.Meta();
          ValueMeta.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Outputs produced by the Task.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<TaskOutput>))]
  public class TaskOutput : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name of the Output parameter.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public byte[] ValueBase64Binary { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueCanonical { get; set; }
    /// <summary>
    /// Extension container element for ValueCanonical
    /// </summary>
    public Element _ValueCanonical { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueCode { get; set; }
    /// <summary>
    /// Extension container element for ValueCode
    /// </summary>
    public Element _ValueCode { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueDate { get; set; }
    /// <summary>
    /// Extension container element for ValueDate
    /// </summary>
    public Element _ValueDate { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueDateTime { get; set; }
    /// <summary>
    /// Extension container element for ValueDateTime
    /// </summary>
    public Element _ValueDateTime { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public decimal? ValueDecimal { get; set; }
    /// <summary>
    /// Extension container element for ValueDecimal
    /// </summary>
    public Element _ValueDecimal { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueId { get; set; }
    /// <summary>
    /// Extension container element for ValueId
    /// </summary>
    public Element _ValueId { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueInstant { get; set; }
    /// <summary>
    /// Extension container element for ValueInstant
    /// </summary>
    public Element _ValueInstant { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public int? ValueInteger { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueMarkdown { get; set; }
    /// <summary>
    /// Extension container element for ValueMarkdown
    /// </summary>
    public Element _ValueMarkdown { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueOid { get; set; }
    /// <summary>
    /// Extension container element for ValueOid
    /// </summary>
    public Element _ValueOid { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public uint? ValuePositiveInt { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueTime { get; set; }
    /// <summary>
    /// Extension container element for ValueTime
    /// </summary>
    public Element _ValueTime { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public uint? ValueUnsignedInt { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueUri { get; set; }
    /// <summary>
    /// Extension container element for ValueUri
    /// </summary>
    public Element _ValueUri { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public string ValueUrl { get; set; }
    /// <summary>
    /// Extension container element for ValueUrl
    /// </summary>
    public Element _ValueUrl { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Guid? ValueUuid { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Address ValueAddress { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Age ValueAge { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Annotation ValueAnnotation { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public CodeableConcept ValueCodeableConcept { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Coding ValueCoding { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public ContactPoint ValueContactPoint { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Count ValueCount { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Distance ValueDistance { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Duration ValueDuration { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public HumanName ValueHumanName { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Identifier ValueIdentifier { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Money ValueMoney { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Period ValuePeriod { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Range ValueRange { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Ratio ValueRatio { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public SampledData ValueSampledData { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Signature ValueSignature { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Timing ValueTiming { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public ContactDetail ValueContactDetail { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Contributor ValueContributor { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public DataRequirement ValueDataRequirement { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Expression ValueExpression { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public ParameterDefinition ValueParameterDefinition { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public RelatedArtifact ValueRelatedArtifact { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public TriggerDefinition ValueTriggerDefinition { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public UsageContext ValueUsageContext { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Dosage ValueDosage { get; set; }
    /// <summary>
    /// The value of the Output parameter as a basic type.
    /// </summary>
    public Meta ValueMeta { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (ValueBase64Binary != null)
      {
        writer.WriteString("valueBase64Binary", System.Convert.ToBase64String(ValueBase64Binary));
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (!string.IsNullOrEmpty(ValueCanonical))
      {
        writer.WriteString("valueCanonical", (string)ValueCanonical!);
      }

      if (_ValueCanonical != null)
      {
        writer.WritePropertyName("_valueCanonical");
        _ValueCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueCode))
      {
        writer.WriteString("valueCode", (string)ValueCode!);
      }

      if (_ValueCode != null)
      {
        writer.WritePropertyName("_valueCode");
        _ValueCode.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDate))
      {
        writer.WriteString("valueDate", (string)ValueDate!);
      }

      if (_ValueDate != null)
      {
        writer.WritePropertyName("_valueDate");
        _ValueDate.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueDateTime))
      {
        writer.WriteString("valueDateTime", (string)ValueDateTime!);
      }

      if (_ValueDateTime != null)
      {
        writer.WritePropertyName("_valueDateTime");
        _ValueDateTime.SerializeJson(writer, options);
      }

      if (ValueDecimal != null)
      {
        writer.WriteNumber("valueDecimal", (decimal)ValueDecimal!);
      }

      if (_ValueDecimal != null)
      {
        writer.WritePropertyName("_valueDecimal");
        _ValueDecimal.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueId))
      {
        writer.WriteString("valueId", (string)ValueId!);
      }

      if (_ValueId != null)
      {
        writer.WritePropertyName("_valueId");
        _ValueId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueInstant))
      {
        writer.WriteString("valueInstant", (string)ValueInstant!);
      }

      if (_ValueInstant != null)
      {
        writer.WritePropertyName("_valueInstant");
        _ValueInstant.SerializeJson(writer, options);
      }

      if (ValueInteger != null)
      {
        writer.WriteNumber("valueInteger", (int)ValueInteger!);
      }

      if (!string.IsNullOrEmpty(ValueMarkdown))
      {
        writer.WriteString("valueMarkdown", (string)ValueMarkdown!);
      }

      if (_ValueMarkdown != null)
      {
        writer.WritePropertyName("_valueMarkdown");
        _ValueMarkdown.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueOid))
      {
        writer.WriteString("valueOid", (string)ValueOid!);
      }

      if (_ValueOid != null)
      {
        writer.WritePropertyName("_valueOid");
        _ValueOid.SerializeJson(writer, options);
      }

      if (ValuePositiveInt != null)
      {
        writer.WriteNumber("valuePositiveInt", (uint)ValuePositiveInt!);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueTime))
      {
        writer.WriteString("valueTime", (string)ValueTime!);
      }

      if (_ValueTime != null)
      {
        writer.WritePropertyName("_valueTime");
        _ValueTime.SerializeJson(writer, options);
      }

      if (ValueUnsignedInt != null)
      {
        writer.WriteNumber("valueUnsignedInt", (uint)ValueUnsignedInt!);
      }

      if (!string.IsNullOrEmpty(ValueUri))
      {
        writer.WriteString("valueUri", (string)ValueUri!);
      }

      if (_ValueUri != null)
      {
        writer.WritePropertyName("_valueUri");
        _ValueUri.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueUrl))
      {
        writer.WriteString("valueUrl", (string)ValueUrl!);
      }

      if (_ValueUrl != null)
      {
        writer.WritePropertyName("_valueUrl");
        _ValueUrl.SerializeJson(writer, options);
      }

      if (ValueUuid != null)
      {
        writer.WriteString("valueUuid", (Guid)ValueUuid!);
      }

      if (ValueAddress != null)
      {
        writer.WritePropertyName("valueAddress");
        ValueAddress.SerializeJson(writer, options);
      }

      if (ValueAge != null)
      {
        writer.WritePropertyName("valueAge");
        ValueAge.SerializeJson(writer, options);
      }

      if (ValueAnnotation != null)
      {
        writer.WritePropertyName("valueAnnotation");
        ValueAnnotation.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (ValueCodeableConcept != null)
      {
        writer.WritePropertyName("valueCodeableConcept");
        ValueCodeableConcept.SerializeJson(writer, options);
      }

      if (ValueCoding != null)
      {
        writer.WritePropertyName("valueCoding");
        ValueCoding.SerializeJson(writer, options);
      }

      if (ValueContactPoint != null)
      {
        writer.WritePropertyName("valueContactPoint");
        ValueContactPoint.SerializeJson(writer, options);
      }

      if (ValueCount != null)
      {
        writer.WritePropertyName("valueCount");
        ValueCount.SerializeJson(writer, options);
      }

      if (ValueDistance != null)
      {
        writer.WritePropertyName("valueDistance");
        ValueDistance.SerializeJson(writer, options);
      }

      if (ValueDuration != null)
      {
        writer.WritePropertyName("valueDuration");
        ValueDuration.SerializeJson(writer, options);
      }

      if (ValueHumanName != null)
      {
        writer.WritePropertyName("valueHumanName");
        ValueHumanName.SerializeJson(writer, options);
      }

      if (ValueIdentifier != null)
      {
        writer.WritePropertyName("valueIdentifier");
        ValueIdentifier.SerializeJson(writer, options);
      }

      if (ValueMoney != null)
      {
        writer.WritePropertyName("valueMoney");
        ValueMoney.SerializeJson(writer, options);
      }

      if (ValuePeriod != null)
      {
        writer.WritePropertyName("valuePeriod");
        ValuePeriod.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueRange != null)
      {
        writer.WritePropertyName("valueRange");
        ValueRange.SerializeJson(writer, options);
      }

      if (ValueRatio != null)
      {
        writer.WritePropertyName("valueRatio");
        ValueRatio.SerializeJson(writer, options);
      }

      if (ValueReference != null)
      {
        writer.WritePropertyName("valueReference");
        ValueReference.SerializeJson(writer, options);
      }

      if (ValueSampledData != null)
      {
        writer.WritePropertyName("valueSampledData");
        ValueSampledData.SerializeJson(writer, options);
      }

      if (ValueSignature != null)
      {
        writer.WritePropertyName("valueSignature");
        ValueSignature.SerializeJson(writer, options);
      }

      if (ValueTiming != null)
      {
        writer.WritePropertyName("valueTiming");
        ValueTiming.SerializeJson(writer, options);
      }

      if (ValueContactDetail != null)
      {
        writer.WritePropertyName("valueContactDetail");
        ValueContactDetail.SerializeJson(writer, options);
      }

      if (ValueContributor != null)
      {
        writer.WritePropertyName("valueContributor");
        ValueContributor.SerializeJson(writer, options);
      }

      if (ValueDataRequirement != null)
      {
        writer.WritePropertyName("valueDataRequirement");
        ValueDataRequirement.SerializeJson(writer, options);
      }

      if (ValueExpression != null)
      {
        writer.WritePropertyName("valueExpression");
        ValueExpression.SerializeJson(writer, options);
      }

      if (ValueParameterDefinition != null)
      {
        writer.WritePropertyName("valueParameterDefinition");
        ValueParameterDefinition.SerializeJson(writer, options);
      }

      if (ValueRelatedArtifact != null)
      {
        writer.WritePropertyName("valueRelatedArtifact");
        ValueRelatedArtifact.SerializeJson(writer, options);
      }

      if (ValueTriggerDefinition != null)
      {
        writer.WritePropertyName("valueTriggerDefinition");
        ValueTriggerDefinition.SerializeJson(writer, options);
      }

      if (ValueUsageContext != null)
      {
        writer.WritePropertyName("valueUsageContext");
        ValueUsageContext.SerializeJson(writer, options);
      }

      if (ValueDosage != null)
      {
        writer.WritePropertyName("valueDosage");
        ValueDosage.SerializeJson(writer, options);
      }

      if (ValueMeta != null)
      {
        writer.WritePropertyName("valueMeta");
        ValueMeta.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "valueBase64Binary":
          ValueBase64Binary = System.Convert.FromBase64String(reader.GetString());
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "valueCanonical":
          ValueCanonical = reader.GetString();
          break;

        case "_valueCanonical":
          _ValueCanonical = new fhirCsR4.Models.Element();
          _ValueCanonical.DeserializeJson(ref reader, options);
          break;

        case "valueCode":
          ValueCode = reader.GetString();
          break;

        case "_valueCode":
          _ValueCode = new fhirCsR4.Models.Element();
          _ValueCode.DeserializeJson(ref reader, options);
          break;

        case "valueDate":
          ValueDate = reader.GetString();
          break;

        case "_valueDate":
          _ValueDate = new fhirCsR4.Models.Element();
          _ValueDate.DeserializeJson(ref reader, options);
          break;

        case "valueDateTime":
          ValueDateTime = reader.GetString();
          break;

        case "_valueDateTime":
          _ValueDateTime = new fhirCsR4.Models.Element();
          _ValueDateTime.DeserializeJson(ref reader, options);
          break;

        case "valueDecimal":
          ValueDecimal = reader.GetDecimal();
          break;

        case "_valueDecimal":
          _ValueDecimal = new fhirCsR4.Models.Element();
          _ValueDecimal.DeserializeJson(ref reader, options);
          break;

        case "valueId":
          ValueId = reader.GetString();
          break;

        case "_valueId":
          _ValueId = new fhirCsR4.Models.Element();
          _ValueId.DeserializeJson(ref reader, options);
          break;

        case "valueInstant":
          ValueInstant = reader.GetString();
          break;

        case "_valueInstant":
          _ValueInstant = new fhirCsR4.Models.Element();
          _ValueInstant.DeserializeJson(ref reader, options);
          break;

        case "valueInteger":
          ValueInteger = reader.GetInt32();
          break;

        case "valueMarkdown":
          ValueMarkdown = reader.GetString();
          break;

        case "_valueMarkdown":
          _ValueMarkdown = new fhirCsR4.Models.Element();
          _ValueMarkdown.DeserializeJson(ref reader, options);
          break;

        case "valueOid":
          ValueOid = reader.GetString();
          break;

        case "_valueOid":
          _ValueOid = new fhirCsR4.Models.Element();
          _ValueOid.DeserializeJson(ref reader, options);
          break;

        case "valuePositiveInt":
          ValuePositiveInt = reader.GetUInt32();
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR4.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueTime":
          ValueTime = reader.GetString();
          break;

        case "_valueTime":
          _ValueTime = new fhirCsR4.Models.Element();
          _ValueTime.DeserializeJson(ref reader, options);
          break;

        case "valueUnsignedInt":
          ValueUnsignedInt = reader.GetUInt32();
          break;

        case "valueUri":
          ValueUri = reader.GetString();
          break;

        case "_valueUri":
          _ValueUri = new fhirCsR4.Models.Element();
          _ValueUri.DeserializeJson(ref reader, options);
          break;

        case "valueUrl":
          ValueUrl = reader.GetString();
          break;

        case "_valueUrl":
          _ValueUrl = new fhirCsR4.Models.Element();
          _ValueUrl.DeserializeJson(ref reader, options);
          break;

        case "valueUuid":
          ValueUuid = reader.GetGuid();
          break;

        case "valueAddress":
          ValueAddress = new fhirCsR4.Models.Address();
          ValueAddress.DeserializeJson(ref reader, options);
          break;

        case "valueAge":
          ValueAge = new fhirCsR4.Models.Age();
          ValueAge.DeserializeJson(ref reader, options);
          break;

        case "valueAnnotation":
          ValueAnnotation = new fhirCsR4.Models.Annotation();
          ValueAnnotation.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR4.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        case "valueCodeableConcept":
          ValueCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          ValueCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "valueCoding":
          ValueCoding = new fhirCsR4.Models.Coding();
          ValueCoding.DeserializeJson(ref reader, options);
          break;

        case "valueContactPoint":
          ValueContactPoint = new fhirCsR4.Models.ContactPoint();
          ValueContactPoint.DeserializeJson(ref reader, options);
          break;

        case "valueCount":
          ValueCount = new fhirCsR4.Models.Count();
          ValueCount.DeserializeJson(ref reader, options);
          break;

        case "valueDistance":
          ValueDistance = new fhirCsR4.Models.Distance();
          ValueDistance.DeserializeJson(ref reader, options);
          break;

        case "valueDuration":
          ValueDuration = new fhirCsR4.Models.Duration();
          ValueDuration.DeserializeJson(ref reader, options);
          break;

        case "valueHumanName":
          ValueHumanName = new fhirCsR4.Models.HumanName();
          ValueHumanName.DeserializeJson(ref reader, options);
          break;

        case "valueIdentifier":
          ValueIdentifier = new fhirCsR4.Models.Identifier();
          ValueIdentifier.DeserializeJson(ref reader, options);
          break;

        case "valueMoney":
          ValueMoney = new fhirCsR4.Models.Money();
          ValueMoney.DeserializeJson(ref reader, options);
          break;

        case "valuePeriod":
          ValuePeriod = new fhirCsR4.Models.Period();
          ValuePeriod.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR4.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueRange":
          ValueRange = new fhirCsR4.Models.Range();
          ValueRange.DeserializeJson(ref reader, options);
          break;

        case "valueRatio":
          ValueRatio = new fhirCsR4.Models.Ratio();
          ValueRatio.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new fhirCsR4.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        case "valueSampledData":
          ValueSampledData = new fhirCsR4.Models.SampledData();
          ValueSampledData.DeserializeJson(ref reader, options);
          break;

        case "valueSignature":
          ValueSignature = new fhirCsR4.Models.Signature();
          ValueSignature.DeserializeJson(ref reader, options);
          break;

        case "valueTiming":
          ValueTiming = new fhirCsR4.Models.Timing();
          ValueTiming.DeserializeJson(ref reader, options);
          break;

        case "valueContactDetail":
          ValueContactDetail = new fhirCsR4.Models.ContactDetail();
          ValueContactDetail.DeserializeJson(ref reader, options);
          break;

        case "valueContributor":
          ValueContributor = new fhirCsR4.Models.Contributor();
          ValueContributor.DeserializeJson(ref reader, options);
          break;

        case "valueDataRequirement":
          ValueDataRequirement = new fhirCsR4.Models.DataRequirement();
          ValueDataRequirement.DeserializeJson(ref reader, options);
          break;

        case "valueExpression":
          ValueExpression = new fhirCsR4.Models.Expression();
          ValueExpression.DeserializeJson(ref reader, options);
          break;

        case "valueParameterDefinition":
          ValueParameterDefinition = new fhirCsR4.Models.ParameterDefinition();
          ValueParameterDefinition.DeserializeJson(ref reader, options);
          break;

        case "valueRelatedArtifact":
          ValueRelatedArtifact = new fhirCsR4.Models.RelatedArtifact();
          ValueRelatedArtifact.DeserializeJson(ref reader, options);
          break;

        case "valueTriggerDefinition":
          ValueTriggerDefinition = new fhirCsR4.Models.TriggerDefinition();
          ValueTriggerDefinition.DeserializeJson(ref reader, options);
          break;

        case "valueUsageContext":
          ValueUsageContext = new fhirCsR4.Models.UsageContext();
          ValueUsageContext.DeserializeJson(ref reader, options);
          break;

        case "valueDosage":
          ValueDosage = new fhirCsR4.Models.Dosage();
          ValueDosage.DeserializeJson(ref reader, options);
          break;

        case "valueMeta":
          ValueMeta = new fhirCsR4.Models.Meta();
          ValueMeta.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A task to be performed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Task>))]
  public class Task : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Task";
    /// <summary>
    /// The date and time this task was created.
    /// </summary>
    public string AuthoredOn { get; set; }
    /// <summary>
    /// Extension container element for AuthoredOn
    /// </summary>
    public Element _AuthoredOn { get; set; }
    /// <summary>
    /// BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
    /// </summary>
    public List<Reference> BasedOn { get; set; }
    /// <summary>
    /// Contains business-specific nuances of the business state.
    /// </summary>
    public CodeableConcept BusinessStatus { get; set; }
    /// <summary>
    /// The title (eg "My Tasks", "Outstanding Tasks for Patient X") should go into the code.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// A free-text description of what is to be performed.
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
    /// </summary>
    public Reference Encounter { get; set; }
    /// <summary>
    /// Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
    /// </summary>
    public Period ExecutionPeriod { get; set; }
    /// <summary>
    /// If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.).
    /// </summary>
    public Reference Focus { get; set; }
    /// <summary>
    /// The entity who benefits from the performance of the service specified in the task (e.g., the patient).
    /// </summary>
    public Reference For { get; set; }
    /// <summary>
    /// An identifier that links together multiple tasks and other requests that were created in the same context.
    /// </summary>
    public Identifier GroupIdentifier { get; set; }
    /// <summary>
    /// The business identifier for this task.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Additional information that may be needed in the execution of the task.
    /// </summary>
    public List<TaskInput> Input { get; set; }
    /// <summary>
    /// The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
    /// </summary>
    public string InstantiatesCanonical { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesCanonical
    /// </summary>
    public Element _InstantiatesCanonical { get; set; }
    /// <summary>
    /// The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
    /// </summary>
    public string InstantiatesUri { get; set; }
    /// <summary>
    /// Extension container element for InstantiatesUri
    /// </summary>
    public Element _InstantiatesUri { get; set; }
    /// <summary>
    /// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
    /// </summary>
    public List<Reference> Insurance { get; set; }
    /// <summary>
    /// This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.
    /// In most cases, Tasks will have an intent of "order".
    /// </summary>
    public string Intent { get; set; }
    /// <summary>
    /// Extension container element for Intent
    /// </summary>
    public Element _Intent { get; set; }
    /// <summary>
    /// The date and time of last modification to this task.
    /// </summary>
    public string LastModified { get; set; }
    /// <summary>
    /// Extension container element for LastModified
    /// </summary>
    public Element _LastModified { get; set; }
    /// <summary>
    /// Principal physical location where the this task is performed.
    /// </summary>
    public Reference Location { get; set; }
    /// <summary>
    /// Free-text information captured about the task as it progresses.
    /// </summary>
    public List<Annotation> Note { get; set; }
    /// <summary>
    /// Outputs produced by the Task.
    /// </summary>
    public List<TaskOutput> Output { get; set; }
    /// <summary>
    /// Tasks may be created with an owner not yet identified.
    /// </summary>
    public Reference Owner { get; set; }
    /// <summary>
    /// This should usually be 0..1.
    /// </summary>
    public List<Reference> PartOf { get; set; }
    /// <summary>
    /// The kind of participant that should perform the task.
    /// </summary>
    public List<CodeableConcept> PerformerType { get; set; }
    /// <summary>
    /// Indicates how quickly the Task should be addressed with respect to other requests.
    /// </summary>
    public string Priority { get; set; }
    /// <summary>
    /// Extension container element for Priority
    /// </summary>
    public Element _Priority { get; set; }
    /// <summary>
    /// This should only be included if there is no focus or if it differs from the reason indicated on the focus.
    /// </summary>
    public CodeableConcept ReasonCode { get; set; }
    /// <summary>
    /// Tasks might be justified based on an Observation, a Condition, a past or planned procedure, etc.   This should only be included if there is no focus or if it differs from the reason indicated on the focus.    Use the CodeableConcept text element in `Task.reasonCode` if the data is free (uncoded) text.
    /// </summary>
    public Reference ReasonReference { get; set; }
    /// <summary>
    /// This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
    /// </summary>
    public List<Reference> RelevantHistory { get; set; }
    /// <summary>
    /// The creator of the task.
    /// </summary>
    public Reference Requester { get; set; }
    /// <summary>
    /// If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
    /// </summary>
    public TaskRestriction Restriction { get; set; }
    /// <summary>
    /// The current status of the task.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This applies to the current status.  Look at the history of the task to see reasons for past statuses.
    /// </summary>
    public CodeableConcept StatusReason { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(InstantiatesCanonical))
      {
        writer.WriteString("instantiatesCanonical", (string)InstantiatesCanonical!);
      }

      if (_InstantiatesCanonical != null)
      {
        writer.WritePropertyName("_instantiatesCanonical");
        _InstantiatesCanonical.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(InstantiatesUri))
      {
        writer.WriteString("instantiatesUri", (string)InstantiatesUri!);
      }

      if (_InstantiatesUri != null)
      {
        writer.WritePropertyName("_instantiatesUri");
        _InstantiatesUri.SerializeJson(writer, options);
      }

      if ((BasedOn != null) && (BasedOn.Count != 0))
      {
        writer.WritePropertyName("basedOn");
        writer.WriteStartArray();

        foreach (Reference valBasedOn in BasedOn)
        {
          valBasedOn.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (GroupIdentifier != null)
      {
        writer.WritePropertyName("groupIdentifier");
        GroupIdentifier.SerializeJson(writer, options);
      }

      if ((PartOf != null) && (PartOf.Count != 0))
      {
        writer.WritePropertyName("partOf");
        writer.WriteStartArray();

        foreach (Reference valPartOf in PartOf)
        {
          valPartOf.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (StatusReason != null)
      {
        writer.WritePropertyName("statusReason");
        StatusReason.SerializeJson(writer, options);
      }

      if (BusinessStatus != null)
      {
        writer.WritePropertyName("businessStatus");
        BusinessStatus.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Intent))
      {
        writer.WriteString("intent", (string)Intent!);
      }

      if (_Intent != null)
      {
        writer.WritePropertyName("_intent");
        _Intent.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Priority))
      {
        writer.WriteString("priority", (string)Priority!);
      }

      if (_Priority != null)
      {
        writer.WritePropertyName("_priority");
        _Priority.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if (Focus != null)
      {
        writer.WritePropertyName("focus");
        Focus.SerializeJson(writer, options);
      }

      if (For != null)
      {
        writer.WritePropertyName("for");
        For.SerializeJson(writer, options);
      }

      if (Encounter != null)
      {
        writer.WritePropertyName("encounter");
        Encounter.SerializeJson(writer, options);
      }

      if (ExecutionPeriod != null)
      {
        writer.WritePropertyName("executionPeriod");
        ExecutionPeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(AuthoredOn))
      {
        writer.WriteString("authoredOn", (string)AuthoredOn!);
      }

      if (_AuthoredOn != null)
      {
        writer.WritePropertyName("_authoredOn");
        _AuthoredOn.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(LastModified))
      {
        writer.WriteString("lastModified", (string)LastModified!);
      }

      if (_LastModified != null)
      {
        writer.WritePropertyName("_lastModified");
        _LastModified.SerializeJson(writer, options);
      }

      if (Requester != null)
      {
        writer.WritePropertyName("requester");
        Requester.SerializeJson(writer, options);
      }

      if ((PerformerType != null) && (PerformerType.Count != 0))
      {
        writer.WritePropertyName("performerType");
        writer.WriteStartArray();

        foreach (CodeableConcept valPerformerType in PerformerType)
        {
          valPerformerType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Owner != null)
      {
        writer.WritePropertyName("owner");
        Owner.SerializeJson(writer, options);
      }

      if (Location != null)
      {
        writer.WritePropertyName("location");
        Location.SerializeJson(writer, options);
      }

      if (ReasonCode != null)
      {
        writer.WritePropertyName("reasonCode");
        ReasonCode.SerializeJson(writer, options);
      }

      if (ReasonReference != null)
      {
        writer.WritePropertyName("reasonReference");
        ReasonReference.SerializeJson(writer, options);
      }

      if ((Insurance != null) && (Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();

        foreach (Reference valInsurance in Insurance)
        {
          valInsurance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Note != null) && (Note.Count != 0))
      {
        writer.WritePropertyName("note");
        writer.WriteStartArray();

        foreach (Annotation valNote in Note)
        {
          valNote.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((RelevantHistory != null) && (RelevantHistory.Count != 0))
      {
        writer.WritePropertyName("relevantHistory");
        writer.WriteStartArray();

        foreach (Reference valRelevantHistory in RelevantHistory)
        {
          valRelevantHistory.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Restriction != null)
      {
        writer.WritePropertyName("restriction");
        Restriction.SerializeJson(writer, options);
      }

      if ((Input != null) && (Input.Count != 0))
      {
        writer.WritePropertyName("input");
        writer.WriteStartArray();

        foreach (TaskInput valInput in Input)
        {
          valInput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Output != null) && (Output.Count != 0))
      {
        writer.WritePropertyName("output");
        writer.WriteStartArray();

        foreach (TaskOutput valOutput in Output)
        {
          valOutput.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "authoredOn":
          AuthoredOn = reader.GetString();
          break;

        case "_authoredOn":
          _AuthoredOn = new fhirCsR4.Models.Element();
          _AuthoredOn.DeserializeJson(ref reader, options);
          break;

        case "basedOn":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          BasedOn = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objBasedOn = new fhirCsR4.Models.Reference();
            objBasedOn.DeserializeJson(ref reader, options);
            BasedOn.Add(objBasedOn);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (BasedOn.Count == 0)
          {
            BasedOn = null;
          }

          break;

        case "businessStatus":
          BusinessStatus = new fhirCsR4.Models.CodeableConcept();
          BusinessStatus.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "encounter":
          Encounter = new fhirCsR4.Models.Reference();
          Encounter.DeserializeJson(ref reader, options);
          break;

        case "executionPeriod":
          ExecutionPeriod = new fhirCsR4.Models.Period();
          ExecutionPeriod.DeserializeJson(ref reader, options);
          break;

        case "focus":
          Focus = new fhirCsR4.Models.Reference();
          Focus.DeserializeJson(ref reader, options);
          break;

        case "for":
          For = new fhirCsR4.Models.Reference();
          For.DeserializeJson(ref reader, options);
          break;

        case "groupIdentifier":
          GroupIdentifier = new fhirCsR4.Models.Identifier();
          GroupIdentifier.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "input":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Input = new List<TaskInput>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TaskInput objInput = new fhirCsR4.Models.TaskInput();
            objInput.DeserializeJson(ref reader, options);
            Input.Add(objInput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Input.Count == 0)
          {
            Input = null;
          }

          break;

        case "instantiatesCanonical":
          InstantiatesCanonical = reader.GetString();
          break;

        case "_instantiatesCanonical":
          _InstantiatesCanonical = new fhirCsR4.Models.Element();
          _InstantiatesCanonical.DeserializeJson(ref reader, options);
          break;

        case "instantiatesUri":
          InstantiatesUri = reader.GetString();
          break;

        case "_instantiatesUri":
          _InstantiatesUri = new fhirCsR4.Models.Element();
          _InstantiatesUri.DeserializeJson(ref reader, options);
          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Insurance = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objInsurance = new fhirCsR4.Models.Reference();
            objInsurance.DeserializeJson(ref reader, options);
            Insurance.Add(objInsurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Insurance.Count == 0)
          {
            Insurance = null;
          }

          break;

        case "intent":
          Intent = reader.GetString();
          break;

        case "_intent":
          _Intent = new fhirCsR4.Models.Element();
          _Intent.DeserializeJson(ref reader, options);
          break;

        case "lastModified":
          LastModified = reader.GetString();
          break;

        case "_lastModified":
          _LastModified = new fhirCsR4.Models.Element();
          _LastModified.DeserializeJson(ref reader, options);
          break;

        case "location":
          Location = new fhirCsR4.Models.Reference();
          Location.DeserializeJson(ref reader, options);
          break;

        case "note":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Note = new List<Annotation>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Annotation objNote = new fhirCsR4.Models.Annotation();
            objNote.DeserializeJson(ref reader, options);
            Note.Add(objNote);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Note.Count == 0)
          {
            Note = null;
          }

          break;

        case "output":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Output = new List<TaskOutput>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.TaskOutput objOutput = new fhirCsR4.Models.TaskOutput();
            objOutput.DeserializeJson(ref reader, options);
            Output.Add(objOutput);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Output.Count == 0)
          {
            Output = null;
          }

          break;

        case "owner":
          Owner = new fhirCsR4.Models.Reference();
          Owner.DeserializeJson(ref reader, options);
          break;

        case "partOf":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PartOf = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objPartOf = new fhirCsR4.Models.Reference();
            objPartOf.DeserializeJson(ref reader, options);
            PartOf.Add(objPartOf);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PartOf.Count == 0)
          {
            PartOf = null;
          }

          break;

        case "performerType":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PerformerType = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objPerformerType = new fhirCsR4.Models.CodeableConcept();
            objPerformerType.DeserializeJson(ref reader, options);
            PerformerType.Add(objPerformerType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PerformerType.Count == 0)
          {
            PerformerType = null;
          }

          break;

        case "priority":
          Priority = reader.GetString();
          break;

        case "_priority":
          _Priority = new fhirCsR4.Models.Element();
          _Priority.DeserializeJson(ref reader, options);
          break;

        case "reasonCode":
          ReasonCode = new fhirCsR4.Models.CodeableConcept();
          ReasonCode.DeserializeJson(ref reader, options);
          break;

        case "reasonReference":
          ReasonReference = new fhirCsR4.Models.Reference();
          ReasonReference.DeserializeJson(ref reader, options);
          break;

        case "relevantHistory":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          RelevantHistory = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objRelevantHistory = new fhirCsR4.Models.Reference();
            objRelevantHistory.DeserializeJson(ref reader, options);
            RelevantHistory.Add(objRelevantHistory);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (RelevantHistory.Count == 0)
          {
            RelevantHistory = null;
          }

          break;

        case "requester":
          Requester = new fhirCsR4.Models.Reference();
          Requester.DeserializeJson(ref reader, options);
          break;

        case "restriction":
          Restriction = new fhirCsR4.Models.TaskRestriction();
          Restriction.DeserializeJson(ref reader, options);
          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "statusReason":
          StatusReason = new fhirCsR4.Models.CodeableConcept();
          StatusReason.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Task.intent field
  /// </summary>
  public static class TaskIntentCodes {
    public const string UNKNOWN = "unknown";
    public const string PROPOSAL = "proposal";
    public const string PLAN = "plan";
    public const string ORDER = "order";
    public const string ORIGINAL_ORDER = "original-order";
    public const string REFLEX_ORDER = "reflex-order";
    public const string FILLER_ORDER = "filler-order";
    public const string INSTANCE_ORDER = "instance-order";
    public const string OPTION = "option";
  }
  /// <summary>
  /// Code Values for the Task.priority field
  /// </summary>
  public static class TaskPriorityCodes {
    public const string ROUTINE = "routine";
    public const string URGENT = "urgent";
    public const string ASAP = "asap";
    public const string STAT = "stat";
  }
  /// <summary>
  /// Code Values for the Task.status field
  /// </summary>
  public static class TaskStatusCodes {
    public const string DRAFT = "draft";
    public const string REQUESTED = "requested";
    public const string RECEIVED = "received";
    public const string ACCEPTED = "accepted";
    public const string REJECTED = "rejected";
    public const string READY = "ready";
    public const string CANCELLED = "cancelled";
    public const string IN_PROGRESS = "in-progress";
    public const string ON_HOLD = "on-hold";
    public const string FAILED = "failed";
    public const string COMPLETED = "completed";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
}
