// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MolecularSequenceReferenceSeq>))]
  public class MolecularSequenceReferenceSeq : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).
    /// </summary>
    public CodeableConcept Chromosome { get; set; }
    /// <summary>
    /// The Genome Build used for reference, following GRCh build versions e.g. 'GRCh 37'.  Version number must be included if a versioned release of a primary build was used.
    /// </summary>
    public string GenomeBuild { get; set; }
    /// <summary>
    /// Extension container element for GenomeBuild
    /// </summary>
    public Element _GenomeBuild { get; set; }
    /// <summary>
    /// A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the "sense" strand, and the opposite complementary strand is the "antisense" strand.
    /// </summary>
    public string Orientation { get; set; }
    /// <summary>
    /// Extension container element for Orientation
    /// </summary>
    public Element _Orientation { get; set; }
    /// <summary>
    /// Reference identifier of reference sequence submitted to NCBI. It must match the type in the MolecularSequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.
    /// </summary>
    public CodeableConcept ReferenceSeqId { get; set; }
    /// <summary>
    /// A pointer to another MolecularSequence entity as reference sequence.
    /// </summary>
    public Reference ReferenceSeqPointer { get; set; }
    /// <summary>
    /// A string like "ACGT".
    /// </summary>
    public string ReferenceSeqString { get; set; }
    /// <summary>
    /// Extension container element for ReferenceSeqString
    /// </summary>
    public Element _ReferenceSeqString { get; set; }
    /// <summary>
    /// An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.
    /// </summary>
    public string Strand { get; set; }
    /// <summary>
    /// Extension container element for Strand
    /// </summary>
    public Element _Strand { get; set; }
    /// <summary>
    /// End position of the window on the reference sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
    /// </summary>
    public int? WindowEnd { get; set; }
    /// <summary>
    /// Start position of the window on the reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
    /// </summary>
    public int? WindowStart { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Chromosome != null)
      {
        writer.WritePropertyName("chromosome");
        Chromosome.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(GenomeBuild))
      {
        writer.WriteString("genomeBuild", (string)GenomeBuild!);
      }

      if (_GenomeBuild != null)
      {
        writer.WritePropertyName("_genomeBuild");
        _GenomeBuild.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Orientation))
      {
        writer.WriteString("orientation", (string)Orientation!);
      }

      if (_Orientation != null)
      {
        writer.WritePropertyName("_orientation");
        _Orientation.SerializeJson(writer, options);
      }

      if (ReferenceSeqId != null)
      {
        writer.WritePropertyName("referenceSeqId");
        ReferenceSeqId.SerializeJson(writer, options);
      }

      if (ReferenceSeqPointer != null)
      {
        writer.WritePropertyName("referenceSeqPointer");
        ReferenceSeqPointer.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReferenceSeqString))
      {
        writer.WriteString("referenceSeqString", (string)ReferenceSeqString!);
      }

      if (_ReferenceSeqString != null)
      {
        writer.WritePropertyName("_referenceSeqString");
        _ReferenceSeqString.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Strand))
      {
        writer.WriteString("strand", (string)Strand!);
      }

      if (_Strand != null)
      {
        writer.WritePropertyName("_strand");
        _Strand.SerializeJson(writer, options);
      }

      if (WindowStart != null)
      {
        writer.WriteNumber("windowStart", (int)WindowStart!);
      }

      if (WindowEnd != null)
      {
        writer.WriteNumber("windowEnd", (int)WindowEnd!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "chromosome":
          Chromosome = new fhirCsR4.Models.CodeableConcept();
          Chromosome.DeserializeJson(ref reader, options);
          break;

        case "genomeBuild":
          GenomeBuild = reader.GetString();
          break;

        case "_genomeBuild":
          _GenomeBuild = new fhirCsR4.Models.Element();
          _GenomeBuild.DeserializeJson(ref reader, options);
          break;

        case "orientation":
          Orientation = reader.GetString();
          break;

        case "_orientation":
          _Orientation = new fhirCsR4.Models.Element();
          _Orientation.DeserializeJson(ref reader, options);
          break;

        case "referenceSeqId":
          ReferenceSeqId = new fhirCsR4.Models.CodeableConcept();
          ReferenceSeqId.DeserializeJson(ref reader, options);
          break;

        case "referenceSeqPointer":
          ReferenceSeqPointer = new fhirCsR4.Models.Reference();
          ReferenceSeqPointer.DeserializeJson(ref reader, options);
          break;

        case "referenceSeqString":
          ReferenceSeqString = reader.GetString();
          break;

        case "_referenceSeqString":
          _ReferenceSeqString = new fhirCsR4.Models.Element();
          _ReferenceSeqString.DeserializeJson(ref reader, options);
          break;

        case "strand":
          Strand = reader.GetString();
          break;

        case "_strand":
          _Strand = new fhirCsR4.Models.Element();
          _Strand.DeserializeJson(ref reader, options);
          break;

        case "windowEnd":
          WindowEnd = reader.GetInt32();
          break;

        case "windowStart":
          WindowStart = reader.GetInt32();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MolecularSequence.referenceSeq.orientation field
  /// </summary>
  public static class MolecularSequenceReferenceSeqOrientationCodes {
    public const string SENSE = "sense";
    public const string ANTISENSE = "antisense";
  }
  /// <summary>
  /// Code Values for the MolecularSequence.referenceSeq.strand field
  /// </summary>
  public static class MolecularSequenceReferenceSeqStrandCodes {
    public const string WATSON = "watson";
    public const string CRICK = "crick";
  }
  /// <summary>
  /// The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MolecularSequenceVariant>))]
  public class MolecularSequenceVariant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).
    /// </summary>
    public string Cigar { get; set; }
    /// <summary>
    /// Extension container element for Cigar
    /// </summary>
    public Element _Cigar { get; set; }
    /// <summary>
    /// End position of the variant on the reference sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
    /// </summary>
    public int? End { get; set; }
    /// <summary>
    /// An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)).  Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed  sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
    /// </summary>
    public string ObservedAllele { get; set; }
    /// <summary>
    /// Extension container element for ObservedAllele
    /// </summary>
    public Element _ObservedAllele { get; set; }
    /// <summary>
    /// An allele is one of a set of coexisting sequence variants of a gene ([SO:0001023](http://www.sequenceontology.org/browser/current_svn/term/SO:0001023)). Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.
    /// </summary>
    public string ReferenceAllele { get; set; }
    /// <summary>
    /// Extension container element for ReferenceAllele
    /// </summary>
    public Element _ReferenceAllele { get; set; }
    /// <summary>
    /// Start position of the variant on the  reference sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
    /// </summary>
    public int? Start { get; set; }
    /// <summary>
    /// A pointer to an Observation containing variant information.
    /// </summary>
    public Reference VariantPointer { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Start != null)
      {
        writer.WriteNumber("start", (int)Start!);
      }

      if (End != null)
      {
        writer.WriteNumber("end", (int)End!);
      }

      if (!string.IsNullOrEmpty(ObservedAllele))
      {
        writer.WriteString("observedAllele", (string)ObservedAllele!);
      }

      if (_ObservedAllele != null)
      {
        writer.WritePropertyName("_observedAllele");
        _ObservedAllele.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReferenceAllele))
      {
        writer.WriteString("referenceAllele", (string)ReferenceAllele!);
      }

      if (_ReferenceAllele != null)
      {
        writer.WritePropertyName("_referenceAllele");
        _ReferenceAllele.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Cigar))
      {
        writer.WriteString("cigar", (string)Cigar!);
      }

      if (_Cigar != null)
      {
        writer.WritePropertyName("_cigar");
        _Cigar.SerializeJson(writer, options);
      }

      if (VariantPointer != null)
      {
        writer.WritePropertyName("variantPointer");
        VariantPointer.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "cigar":
          Cigar = reader.GetString();
          break;

        case "_cigar":
          _Cigar = new fhirCsR4.Models.Element();
          _Cigar.DeserializeJson(ref reader, options);
          break;

        case "end":
          End = reader.GetInt32();
          break;

        case "observedAllele":
          ObservedAllele = reader.GetString();
          break;

        case "_observedAllele":
          _ObservedAllele = new fhirCsR4.Models.Element();
          _ObservedAllele.DeserializeJson(ref reader, options);
          break;

        case "referenceAllele":
          ReferenceAllele = reader.GetString();
          break;

        case "_referenceAllele":
          _ReferenceAllele = new fhirCsR4.Models.Element();
          _ReferenceAllele.DeserializeJson(ref reader, options);
          break;

        case "start":
          Start = reader.GetInt32();
          break;

        case "variantPointer":
          VariantPointer = new fhirCsR4.Models.Reference();
          VariantPointer.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MolecularSequenceQualityRoc>))]
  public class MolecularSequenceQualityRoc : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Calculated fScore if the GQ score threshold was set to "score" field value.
    /// </summary>
    public List<decimal> FMeasure { get; set; }
    /// <summary>
    /// Extension container element for FMeasure
    /// </summary>
    public List<Element> _FMeasure { get; set; }
    /// <summary>
    /// The number of false negatives if the GQ score threshold was set to "score" field value.
    /// </summary>
    public List<int> NumFN { get; set; }
    /// <summary>
    /// The number of false positives if the GQ score threshold was set to "score" field value.
    /// </summary>
    public List<int> NumFP { get; set; }
    /// <summary>
    /// The number of true positives if the GQ score threshold was set to "score" field value.
    /// </summary>
    public List<int> NumTP { get; set; }
    /// <summary>
    /// Calculated precision if the GQ score threshold was set to "score" field value.
    /// </summary>
    public List<decimal> Precision { get; set; }
    /// <summary>
    /// Extension container element for Precision
    /// </summary>
    public List<Element> _Precision { get; set; }
    /// <summary>
    /// Invidual data point representing the GQ (genotype quality) score threshold.
    /// </summary>
    public List<int> Score { get; set; }
    /// <summary>
    /// Calculated sensitivity if the GQ score threshold was set to "score" field value.
    /// </summary>
    public List<decimal> Sensitivity { get; set; }
    /// <summary>
    /// Extension container element for Sensitivity
    /// </summary>
    public List<Element> _Sensitivity { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((Score != null) && (Score.Count != 0))
      {
        writer.WritePropertyName("score");
        writer.WriteStartArray();

        foreach (int valScore in Score)
        {
          writer.WriteNumberValue(valScore);
        }

        writer.WriteEndArray();
      }

      if ((NumTP != null) && (NumTP.Count != 0))
      {
        writer.WritePropertyName("numTP");
        writer.WriteStartArray();

        foreach (int valNumTP in NumTP)
        {
          writer.WriteNumberValue(valNumTP);
        }

        writer.WriteEndArray();
      }

      if ((NumFP != null) && (NumFP.Count != 0))
      {
        writer.WritePropertyName("numFP");
        writer.WriteStartArray();

        foreach (int valNumFP in NumFP)
        {
          writer.WriteNumberValue(valNumFP);
        }

        writer.WriteEndArray();
      }

      if ((NumFN != null) && (NumFN.Count != 0))
      {
        writer.WritePropertyName("numFN");
        writer.WriteStartArray();

        foreach (int valNumFN in NumFN)
        {
          writer.WriteNumberValue(valNumFN);
        }

        writer.WriteEndArray();
      }

      if ((Precision != null) && (Precision.Count != 0))
      {
        writer.WritePropertyName("precision");
        writer.WriteStartArray();

        foreach (decimal valPrecision in Precision)
        {
          writer.WriteNumberValue(valPrecision);
        }

        writer.WriteEndArray();
      }

      if ((_Precision != null) && (_Precision.Count != 0))
      {
        writer.WritePropertyName("_precision");
        writer.WriteStartArray();

        foreach (Element val_Precision in _Precision)
        {
          val_Precision.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Sensitivity != null) && (Sensitivity.Count != 0))
      {
        writer.WritePropertyName("sensitivity");
        writer.WriteStartArray();

        foreach (decimal valSensitivity in Sensitivity)
        {
          writer.WriteNumberValue(valSensitivity);
        }

        writer.WriteEndArray();
      }

      if ((_Sensitivity != null) && (_Sensitivity.Count != 0))
      {
        writer.WritePropertyName("_sensitivity");
        writer.WriteStartArray();

        foreach (Element val_Sensitivity in _Sensitivity)
        {
          val_Sensitivity.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((FMeasure != null) && (FMeasure.Count != 0))
      {
        writer.WritePropertyName("fMeasure");
        writer.WriteStartArray();

        foreach (decimal valFMeasure in FMeasure)
        {
          writer.WriteNumberValue(valFMeasure);
        }

        writer.WriteEndArray();
      }

      if ((_FMeasure != null) && (_FMeasure.Count != 0))
      {
        writer.WritePropertyName("_fMeasure");
        writer.WriteStartArray();

        foreach (Element val_FMeasure in _FMeasure)
        {
          val_FMeasure.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "fMeasure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          FMeasure = new List<decimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            FMeasure.Add(reader.GetDecimal());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (FMeasure.Count == 0)
          {
            FMeasure = null;
          }

          break;

        case "_fMeasure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _FMeasure = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_FMeasure = new fhirCsR4.Models.Element();
            obj_FMeasure.DeserializeJson(ref reader, options);
            _FMeasure.Add(obj_FMeasure);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_FMeasure.Count == 0)
          {
            _FMeasure = null;
          }

          break;

        case "numFN":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NumFN = new List<int>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NumFN.Add(reader.GetInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NumFN.Count == 0)
          {
            NumFN = null;
          }

          break;

        case "numFP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NumFP = new List<int>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NumFP.Add(reader.GetInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NumFP.Count == 0)
          {
            NumFP = null;
          }

          break;

        case "numTP":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          NumTP = new List<int>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            NumTP.Add(reader.GetInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (NumTP.Count == 0)
          {
            NumTP = null;
          }

          break;

        case "precision":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Precision = new List<decimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Precision.Add(reader.GetDecimal());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Precision.Count == 0)
          {
            Precision = null;
          }

          break;

        case "_precision":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Precision = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Precision = new fhirCsR4.Models.Element();
            obj_Precision.DeserializeJson(ref reader, options);
            _Precision.Add(obj_Precision);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Precision.Count == 0)
          {
            _Precision = null;
          }

          break;

        case "score":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Score = new List<int>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Score.Add(reader.GetInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Score.Count == 0)
          {
            Score = null;
          }

          break;

        case "sensitivity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Sensitivity = new List<decimal>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Sensitivity.Add(reader.GetDecimal());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Sensitivity.Count == 0)
          {
            Sensitivity = null;
          }

          break;

        case "_sensitivity":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Sensitivity = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Sensitivity = new fhirCsR4.Models.Element();
            obj_Sensitivity.DeserializeJson(ref reader, options);
            _Sensitivity.Add(obj_Sensitivity);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Sensitivity.Count == 0)
          {
            _Sensitivity = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MolecularSequenceQuality>))]
  public class MolecularSequenceQuality : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// End position of the sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
    /// </summary>
    public int? End { get; set; }
    /// <summary>
    /// Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall).
    /// </summary>
    public decimal? FScore { get; set; }
    /// <summary>
    /// Extension container element for FScore
    /// </summary>
    public Element _FScore { get; set; }
    /// <summary>
    /// The number of false positives where the non-REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar).
    /// </summary>
    public decimal? GtFP { get; set; }
    /// <summary>
    /// Extension container element for GtFP
    /// </summary>
    public Element _GtFP { get; set; }
    /// <summary>
    /// Which method is used to get sequence quality.
    /// </summary>
    public CodeableConcept Method { get; set; }
    /// <summary>
    /// QUERY.TP / (QUERY.TP + QUERY.FP).
    /// </summary>
    public decimal? Precision { get; set; }
    /// <summary>
    /// Extension container element for Precision
    /// </summary>
    public Element _Precision { get; set; }
    /// <summary>
    /// False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here.
    /// </summary>
    public decimal? QueryFP { get; set; }
    /// <summary>
    /// Extension container element for QueryFP
    /// </summary>
    public Element _QueryFP { get; set; }
    /// <summary>
    /// True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
    /// </summary>
    public decimal? QueryTP { get; set; }
    /// <summary>
    /// Extension container element for QueryTP
    /// </summary>
    public Element _QueryTP { get; set; }
    /// <summary>
    /// TRUTH.TP / (TRUTH.TP + TRUTH.FN).
    /// </summary>
    public decimal? Recall { get; set; }
    /// <summary>
    /// Extension container element for Recall
    /// </summary>
    public Element _Recall { get; set; }
    /// <summary>
    /// Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.
    /// </summary>
    public MolecularSequenceQualityRoc Roc { get; set; }
    /// <summary>
    /// The score of an experimentally derived feature such as a p-value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685)).
    /// </summary>
    public Quantity Score { get; set; }
    /// <summary>
    /// Gold standard sequence used for comparing against.
    /// </summary>
    public CodeableConcept StandardSequence { get; set; }
    /// <summary>
    /// Start position of the sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
    /// </summary>
    public int? Start { get; set; }
    /// <summary>
    /// False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here.
    /// </summary>
    public decimal? TruthFN { get; set; }
    /// <summary>
    /// Extension container element for TruthFN
    /// </summary>
    public Element _TruthFN { get; set; }
    /// <summary>
    /// True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event.
    /// </summary>
    public decimal? TruthTP { get; set; }
    /// <summary>
    /// Extension container element for TruthTP
    /// </summary>
    public Element _TruthTP { get; set; }
    /// <summary>
    /// INDEL / SNP / Undefined variant.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (StandardSequence != null)
      {
        writer.WritePropertyName("standardSequence");
        StandardSequence.SerializeJson(writer, options);
      }

      if (Start != null)
      {
        writer.WriteNumber("start", (int)Start!);
      }

      if (End != null)
      {
        writer.WriteNumber("end", (int)End!);
      }

      if (Score != null)
      {
        writer.WritePropertyName("score");
        Score.SerializeJson(writer, options);
      }

      if (Method != null)
      {
        writer.WritePropertyName("method");
        Method.SerializeJson(writer, options);
      }

      if (TruthTP != null)
      {
        writer.WriteNumber("truthTP", (decimal)TruthTP!);
      }

      if (_TruthTP != null)
      {
        writer.WritePropertyName("_truthTP");
        _TruthTP.SerializeJson(writer, options);
      }

      if (QueryTP != null)
      {
        writer.WriteNumber("queryTP", (decimal)QueryTP!);
      }

      if (_QueryTP != null)
      {
        writer.WritePropertyName("_queryTP");
        _QueryTP.SerializeJson(writer, options);
      }

      if (TruthFN != null)
      {
        writer.WriteNumber("truthFN", (decimal)TruthFN!);
      }

      if (_TruthFN != null)
      {
        writer.WritePropertyName("_truthFN");
        _TruthFN.SerializeJson(writer, options);
      }

      if (QueryFP != null)
      {
        writer.WriteNumber("queryFP", (decimal)QueryFP!);
      }

      if (_QueryFP != null)
      {
        writer.WritePropertyName("_queryFP");
        _QueryFP.SerializeJson(writer, options);
      }

      if (GtFP != null)
      {
        writer.WriteNumber("gtFP", (decimal)GtFP!);
      }

      if (_GtFP != null)
      {
        writer.WritePropertyName("_gtFP");
        _GtFP.SerializeJson(writer, options);
      }

      if (Precision != null)
      {
        writer.WriteNumber("precision", (decimal)Precision!);
      }

      if (_Precision != null)
      {
        writer.WritePropertyName("_precision");
        _Precision.SerializeJson(writer, options);
      }

      if (Recall != null)
      {
        writer.WriteNumber("recall", (decimal)Recall!);
      }

      if (_Recall != null)
      {
        writer.WritePropertyName("_recall");
        _Recall.SerializeJson(writer, options);
      }

      if (FScore != null)
      {
        writer.WriteNumber("fScore", (decimal)FScore!);
      }

      if (_FScore != null)
      {
        writer.WritePropertyName("_fScore");
        _FScore.SerializeJson(writer, options);
      }

      if (Roc != null)
      {
        writer.WritePropertyName("roc");
        Roc.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "end":
          End = reader.GetInt32();
          break;

        case "fScore":
          FScore = reader.GetDecimal();
          break;

        case "_fScore":
          _FScore = new fhirCsR4.Models.Element();
          _FScore.DeserializeJson(ref reader, options);
          break;

        case "gtFP":
          GtFP = reader.GetDecimal();
          break;

        case "_gtFP":
          _GtFP = new fhirCsR4.Models.Element();
          _GtFP.DeserializeJson(ref reader, options);
          break;

        case "method":
          Method = new fhirCsR4.Models.CodeableConcept();
          Method.DeserializeJson(ref reader, options);
          break;

        case "precision":
          Precision = reader.GetDecimal();
          break;

        case "_precision":
          _Precision = new fhirCsR4.Models.Element();
          _Precision.DeserializeJson(ref reader, options);
          break;

        case "queryFP":
          QueryFP = reader.GetDecimal();
          break;

        case "_queryFP":
          _QueryFP = new fhirCsR4.Models.Element();
          _QueryFP.DeserializeJson(ref reader, options);
          break;

        case "queryTP":
          QueryTP = reader.GetDecimal();
          break;

        case "_queryTP":
          _QueryTP = new fhirCsR4.Models.Element();
          _QueryTP.DeserializeJson(ref reader, options);
          break;

        case "recall":
          Recall = reader.GetDecimal();
          break;

        case "_recall":
          _Recall = new fhirCsR4.Models.Element();
          _Recall.DeserializeJson(ref reader, options);
          break;

        case "roc":
          Roc = new fhirCsR4.Models.MolecularSequenceQualityRoc();
          Roc.DeserializeJson(ref reader, options);
          break;

        case "score":
          Score = new fhirCsR4.Models.Quantity();
          Score.DeserializeJson(ref reader, options);
          break;

        case "standardSequence":
          StandardSequence = new fhirCsR4.Models.CodeableConcept();
          StandardSequence.DeserializeJson(ref reader, options);
          break;

        case "start":
          Start = reader.GetInt32();
          break;

        case "truthFN":
          TruthFN = reader.GetDecimal();
          break;

        case "_truthFN":
          _TruthFN = new fhirCsR4.Models.Element();
          _TruthFN.DeserializeJson(ref reader, options);
          break;

        case "truthTP":
          TruthTP = reader.GetDecimal();
          break;

        case "_truthTP":
          _TruthTP = new fhirCsR4.Models.Element();
          _TruthTP.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MolecularSequence.quality.type field
  /// </summary>
  public static class MolecularSequenceQualityTypeCodes {
    public const string INDEL = "indel";
    public const string SNP = "snp";
    public const string UNKNOWN = "unknown";
  }
  /// <summary>
  /// Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MolecularSequenceRepository>))]
  public class MolecularSequenceRepository : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Id of the variant in this external repository. The server will understand how to use this id to call for more info about datasets in external repository.
    /// </summary>
    public string DatasetId { get; set; }
    /// <summary>
    /// Extension container element for DatasetId
    /// </summary>
    public Element _DatasetId { get; set; }
    /// <summary>
    /// URI of an external repository which contains further details about the genetics data.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Id of the read in this external repository.
    /// </summary>
    public string ReadsetId { get; set; }
    /// <summary>
    /// Extension container element for ReadsetId
    /// </summary>
    public Element _ReadsetId { get; set; }
    /// <summary>
    /// Click and see / RESTful API / Need login to see / RESTful API with authentication / Other ways to see resource.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// URI of an external repository which contains further details about the genetics data.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Id of the variantset in this external repository. The server will understand how to use this id to call for more info about variantsets in external repository.
    /// </summary>
    public string VariantsetId { get; set; }
    /// <summary>
    /// Extension container element for VariantsetId
    /// </summary>
    public Element _VariantsetId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(DatasetId))
      {
        writer.WriteString("datasetId", (string)DatasetId!);
      }

      if (_DatasetId != null)
      {
        writer.WritePropertyName("_datasetId");
        _DatasetId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(VariantsetId))
      {
        writer.WriteString("variantsetId", (string)VariantsetId!);
      }

      if (_VariantsetId != null)
      {
        writer.WritePropertyName("_variantsetId");
        _VariantsetId.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ReadsetId))
      {
        writer.WriteString("readsetId", (string)ReadsetId!);
      }

      if (_ReadsetId != null)
      {
        writer.WritePropertyName("_readsetId");
        _ReadsetId.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "datasetId":
          DatasetId = reader.GetString();
          break;

        case "_datasetId":
          _DatasetId = new fhirCsR4.Models.Element();
          _DatasetId.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "readsetId":
          ReadsetId = reader.GetString();
          break;

        case "_readsetId":
          _ReadsetId = new fhirCsR4.Models.Element();
          _ReadsetId.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "variantsetId":
          VariantsetId = reader.GetString();
          break;

        case "_variantsetId":
          _VariantsetId = new fhirCsR4.Models.Element();
          _VariantsetId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MolecularSequence.repository.type field
  /// </summary>
  public static class MolecularSequenceRepositoryTypeCodes {
    public const string DIRECTLINK = "directlink";
    public const string OPENAPI = "openapi";
    public const string LOGIN = "login";
    public const string OAUTH = "oauth";
    public const string OTHER = "other";
  }
  /// <summary>
  /// Structural variant outer.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MolecularSequenceStructureVariantOuter>))]
  public class MolecularSequenceStructureVariantOuter : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Structural variant outer end. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
    /// </summary>
    public int? End { get; set; }
    /// <summary>
    /// Structural variant outer start. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
    /// </summary>
    public int? Start { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Start != null)
      {
        writer.WriteNumber("start", (int)Start!);
      }

      if (End != null)
      {
        writer.WriteNumber("end", (int)End!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "end":
          End = reader.GetInt32();
          break;

        case "start":
          Start = reader.GetInt32();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Structural variant inner.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MolecularSequenceStructureVariantInner>))]
  public class MolecularSequenceStructureVariantInner : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Structural variant inner end. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.
    /// </summary>
    public int? End { get; set; }
    /// <summary>
    /// Structural variant inner start. If the coordinate system is either 0-based or 1-based, then start position is inclusive.
    /// </summary>
    public int? Start { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Start != null)
      {
        writer.WriteNumber("start", (int)Start!);
      }

      if (End != null)
      {
        writer.WriteNumber("end", (int)End!);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "end":
          End = reader.GetInt32();
          break;

        case "start":
          Start = reader.GetInt32();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about chromosome structure variation.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MolecularSequenceStructureVariant>))]
  public class MolecularSequenceStructureVariant : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Used to indicate if the outer and inner start-end values have the same meaning.
    /// </summary>
    public bool? Exact { get; set; }
    /// <summary>
    /// Structural variant inner.
    /// </summary>
    public MolecularSequenceStructureVariantInner Inner { get; set; }
    /// <summary>
    /// Length of the variant chromosome.
    /// </summary>
    public int? Length { get; set; }
    /// <summary>
    /// Structural variant outer.
    /// </summary>
    public MolecularSequenceStructureVariantOuter Outer { get; set; }
    /// <summary>
    /// Information about chromosome structure variation DNA change type.
    /// </summary>
    public CodeableConcept VariantType { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (VariantType != null)
      {
        writer.WritePropertyName("variantType");
        VariantType.SerializeJson(writer, options);
      }

      if (Exact != null)
      {
        writer.WriteBoolean("exact", (bool)Exact!);
      }

      if (Length != null)
      {
        writer.WriteNumber("length", (int)Length!);
      }

      if (Outer != null)
      {
        writer.WritePropertyName("outer");
        Outer.SerializeJson(writer, options);
      }

      if (Inner != null)
      {
        writer.WritePropertyName("inner");
        Inner.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "exact":
          Exact = reader.GetBoolean();
          break;

        case "inner":
          Inner = new fhirCsR4.Models.MolecularSequenceStructureVariantInner();
          Inner.DeserializeJson(ref reader, options);
          break;

        case "length":
          Length = reader.GetInt32();
          break;

        case "outer":
          Outer = new fhirCsR4.Models.MolecularSequenceStructureVariantOuter();
          Outer.DeserializeJson(ref reader, options);
          break;

        case "variantType":
          VariantType = new fhirCsR4.Models.CodeableConcept();
          VariantType.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Raw data describing a biological sequence.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<MolecularSequence>))]
  public class MolecularSequence : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "MolecularSequence";
    /// <summary>
    /// Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive end).
    /// </summary>
    public int CoordinateSystem { get; set; }
    /// <summary>
    /// The method for sequencing, for example, chip information.
    /// </summary>
    public Reference Device { get; set; }
    /// <summary>
    /// A unique identifier for this particular sequence instance. This is a FHIR-defined id.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall start from referenceSeq.windowStart and end by referenceSeq.windowEnd.
    /// </summary>
    public string ObservedSeq { get; set; }
    /// <summary>
    /// Extension container element for ObservedSeq
    /// </summary>
    public Element _ObservedSeq { get; set; }
    /// <summary>
    /// The patient whose sequencing results are described by this resource.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// The organization or lab that should be responsible for this result.
    /// </summary>
    public Reference Performer { get; set; }
    /// <summary>
    /// Pointer to next atomic sequence which at most contains one variant.
    /// </summary>
    public List<Reference> Pointer { get; set; }
    /// <summary>
    /// An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
    /// </summary>
    public List<MolecularSequenceQuality> Quality { get; set; }
    /// <summary>
    /// The number of copies of the sequence of interest. (RNASeq).
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
    /// </summary>
    public int? ReadCoverage { get; set; }
    /// <summary>
    /// A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
    /// </summary>
    public MolecularSequenceReferenceSeq ReferenceSeq { get; set; }
    /// <summary>
    /// Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
    /// </summary>
    public List<MolecularSequenceRepository> Repository { get; set; }
    /// <summary>
    /// Specimen used for sequencing.
    /// </summary>
    public Reference Specimen { get; set; }
    /// <summary>
    /// Information about chromosome structure variation.
    /// </summary>
    public List<MolecularSequenceStructureVariant> StructureVariant { get; set; }
    /// <summary>
    /// Amino Acid Sequence/ DNA Sequence / RNA Sequence.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
    /// </summary>
    public List<MolecularSequenceVariant> Variant { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      writer.WriteNumber("coordinateSystem", CoordinateSystem);

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (Specimen != null)
      {
        writer.WritePropertyName("specimen");
        Specimen.SerializeJson(writer, options);
      }

      if (Device != null)
      {
        writer.WritePropertyName("device");
        Device.SerializeJson(writer, options);
      }

      if (Performer != null)
      {
        writer.WritePropertyName("performer");
        Performer.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (ReferenceSeq != null)
      {
        writer.WritePropertyName("referenceSeq");
        ReferenceSeq.SerializeJson(writer, options);
      }

      if ((Variant != null) && (Variant.Count != 0))
      {
        writer.WritePropertyName("variant");
        writer.WriteStartArray();

        foreach (MolecularSequenceVariant valVariant in Variant)
        {
          valVariant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ObservedSeq))
      {
        writer.WriteString("observedSeq", (string)ObservedSeq!);
      }

      if (_ObservedSeq != null)
      {
        writer.WritePropertyName("_observedSeq");
        _ObservedSeq.SerializeJson(writer, options);
      }

      if ((Quality != null) && (Quality.Count != 0))
      {
        writer.WritePropertyName("quality");
        writer.WriteStartArray();

        foreach (MolecularSequenceQuality valQuality in Quality)
        {
          valQuality.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ReadCoverage != null)
      {
        writer.WriteNumber("readCoverage", (int)ReadCoverage!);
      }

      if ((Repository != null) && (Repository.Count != 0))
      {
        writer.WritePropertyName("repository");
        writer.WriteStartArray();

        foreach (MolecularSequenceRepository valRepository in Repository)
        {
          valRepository.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Pointer != null) && (Pointer.Count != 0))
      {
        writer.WritePropertyName("pointer");
        writer.WriteStartArray();

        foreach (Reference valPointer in Pointer)
        {
          valPointer.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((StructureVariant != null) && (StructureVariant.Count != 0))
      {
        writer.WritePropertyName("structureVariant");
        writer.WriteStartArray();

        foreach (MolecularSequenceStructureVariant valStructureVariant in StructureVariant)
        {
          valStructureVariant.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "coordinateSystem":
          CoordinateSystem = reader.GetInt32();
          break;

        case "device":
          Device = new fhirCsR4.Models.Reference();
          Device.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "observedSeq":
          ObservedSeq = reader.GetString();
          break;

        case "_observedSeq":
          _ObservedSeq = new fhirCsR4.Models.Element();
          _ObservedSeq.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR4.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "performer":
          Performer = new fhirCsR4.Models.Reference();
          Performer.DeserializeJson(ref reader, options);
          break;

        case "pointer":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Pointer = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objPointer = new fhirCsR4.Models.Reference();
            objPointer.DeserializeJson(ref reader, options);
            Pointer.Add(objPointer);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Pointer.Count == 0)
          {
            Pointer = null;
          }

          break;

        case "quality":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Quality = new List<MolecularSequenceQuality>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.MolecularSequenceQuality objQuality = new fhirCsR4.Models.MolecularSequenceQuality();
            objQuality.DeserializeJson(ref reader, options);
            Quality.Add(objQuality);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Quality.Count == 0)
          {
            Quality = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "readCoverage":
          ReadCoverage = reader.GetInt32();
          break;

        case "referenceSeq":
          ReferenceSeq = new fhirCsR4.Models.MolecularSequenceReferenceSeq();
          ReferenceSeq.DeserializeJson(ref reader, options);
          break;

        case "repository":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Repository = new List<MolecularSequenceRepository>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.MolecularSequenceRepository objRepository = new fhirCsR4.Models.MolecularSequenceRepository();
            objRepository.DeserializeJson(ref reader, options);
            Repository.Add(objRepository);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Repository.Count == 0)
          {
            Repository = null;
          }

          break;

        case "specimen":
          Specimen = new fhirCsR4.Models.Reference();
          Specimen.DeserializeJson(ref reader, options);
          break;

        case "structureVariant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          StructureVariant = new List<MolecularSequenceStructureVariant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.MolecularSequenceStructureVariant objStructureVariant = new fhirCsR4.Models.MolecularSequenceStructureVariant();
            objStructureVariant.DeserializeJson(ref reader, options);
            StructureVariant.Add(objStructureVariant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (StructureVariant.Count == 0)
          {
            StructureVariant = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "variant":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Variant = new List<MolecularSequenceVariant>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.MolecularSequenceVariant objVariant = new fhirCsR4.Models.MolecularSequenceVariant();
            objVariant.DeserializeJson(ref reader, options);
            Variant.Add(objVariant);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Variant.Count == 0)
          {
            Variant = null;
          }

          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the MolecularSequence.type field
  /// </summary>
  public static class MolecularSequenceTypeCodes {
    public const string AA = "aa";
    public const string DNA = "dna";
    public const string RNA = "rna";
  }
}
