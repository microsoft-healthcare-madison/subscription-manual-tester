// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<OperationDefinitionParameterBinding>))]
  public class OperationDefinitionParameterBinding : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// For further discussion, see [Using Terminologies](terminologies.html).
    /// </summary>
    public string Strength { get; set; }
    /// <summary>
    /// Extension container element for Strength
    /// </summary>
    public Element _Strength { get; set; }
    /// <summary>
    /// For value sets with a referenceResource, the display can contain the value set description.  The reference may be version-specific or not.
    /// </summary>
    public string ValueSet { get; set; }
    /// <summary>
    /// Extension container element for ValueSet
    /// </summary>
    public Element _ValueSet { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Strength))
      {
        writer.WriteString("strength", (string)Strength!);
      }

      if (_Strength != null)
      {
        writer.WritePropertyName("_strength");
        _Strength.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(ValueSet))
      {
        writer.WriteString("valueSet", (string)ValueSet!);
      }

      if (_ValueSet != null)
      {
        writer.WritePropertyName("_valueSet");
        _ValueSet.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "strength":
          Strength = reader.GetString();
          break;

        case "_strength":
          _Strength = new fhirCsR4.Models.Element();
          _Strength.DeserializeJson(ref reader, options);
          break;

        case "valueSet":
          ValueSet = reader.GetString();
          break;

        case "_valueSet":
          _ValueSet = new fhirCsR4.Models.Element();
          _ValueSet.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the OperationDefinition.parameter.binding.strength field
  /// </summary>
  public static class OperationDefinitionParameterBindingStrengthCodes {
    public const string REQUIRED = "required";
    public const string EXTENSIBLE = "extensible";
    public const string PREFERRED = "preferred";
    public const string EXAMPLE = "example";
  }
  /// <summary>
  /// Resolution applies if the referenced parameter exists.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<OperationDefinitionParameterReferencedFrom>))]
  public class OperationDefinitionParameterReferencedFrom : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The name of the parameter or dot-separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource.
    /// </summary>
    public string Source { get; set; }
    /// <summary>
    /// Extension container element for Source
    /// </summary>
    public Element _Source { get; set; }
    /// <summary>
    /// The id of the element in the referencing resource that is expected to resolve to this resource.
    /// </summary>
    public string SourceId { get; set; }
    /// <summary>
    /// Extension container element for SourceId
    /// </summary>
    public Element _SourceId { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Source))
      {
        writer.WriteString("source", (string)Source!);
      }

      if (_Source != null)
      {
        writer.WritePropertyName("_source");
        _Source.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(SourceId))
      {
        writer.WriteString("sourceId", (string)SourceId!);
      }

      if (_SourceId != null)
      {
        writer.WritePropertyName("_sourceId");
        _SourceId.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "source":
          Source = reader.GetString();
          break;

        case "_source":
          _Source = new fhirCsR4.Models.Element();
          _Source.DeserializeJson(ref reader, options);
          break;

        case "sourceId":
          SourceId = reader.GetString();
          break;

        case "_sourceId":
          _SourceId = new fhirCsR4.Models.Element();
          _SourceId.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<OperationDefinitionParameter>))]
  public class OperationDefinitionParameter : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
    /// </summary>
    public OperationDefinitionParameterBinding Binding { get; set; }
    /// <summary>
    /// Describes the meaning or use of this parameter.
    /// </summary>
    public string Documentation { get; set; }
    /// <summary>
    /// Extension container element for Documentation
    /// </summary>
    public Element _Documentation { get; set; }
    /// <summary>
    /// The maximum number of times this element is permitted to appear in the request or response.
    /// </summary>
    public string Max { get; set; }
    /// <summary>
    /// Extension container element for Max
    /// </summary>
    public Element _Max { get; set; }
    /// <summary>
    /// The minimum number of times this parameter SHALL appear in the request or response.
    /// </summary>
    public int Min { get; set; }
    /// <summary>
    /// This name must be a token (start with a letter in a..z, and only contain letters, numerals, and underscore. Note that for search parameters (type = string, with a search type), the name may be altered by the search modifiers.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
    /// </summary>
    public List<OperationDefinitionParameter> Part { get; set; }
    /// <summary>
    /// Resolution applies if the referenced parameter exists.
    /// </summary>
    public List<OperationDefinitionParameterReferencedFrom> ReferencedFrom { get; set; }
    /// <summary>
    /// How the parameter is understood as a search parameter. This is only used if the parameter type is 'string'.
    /// </summary>
    public string SearchType { get; set; }
    /// <summary>
    /// Extension container element for SearchType
    /// </summary>
    public Element _SearchType { get; set; }
    /// <summary>
    /// Often, these profiles are the base definitions from the spec (e.g. http://hl7.org/fhir/StructureDefinition/Patient).
    /// </summary>
    public List<string> TargetProfile { get; set; }
    /// <summary>
    /// Extension container element for TargetProfile
    /// </summary>
    public List<Element> _TargetProfile { get; set; }
    /// <summary>
    /// if there is no stated parameter, then the parameter is a multi-part parameter; type and must have at least one part defined.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// If a parameter name is used for both an input and an output parameter, the parameter should be defined twice.
    /// </summary>
    public string Use { get; set; }
    /// <summary>
    /// Extension container element for Use
    /// </summary>
    public Element _Use { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Use))
      {
        writer.WriteString("use", (string)Use!);
      }

      if (_Use != null)
      {
        writer.WritePropertyName("_use");
        _Use.SerializeJson(writer, options);
      }

      writer.WriteNumber("min", Min);

      if (!string.IsNullOrEmpty(Max))
      {
        writer.WriteString("max", (string)Max!);
      }

      if (_Max != null)
      {
        writer.WritePropertyName("_max");
        _Max.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Documentation))
      {
        writer.WriteString("documentation", (string)Documentation!);
      }

      if (_Documentation != null)
      {
        writer.WritePropertyName("_documentation");
        _Documentation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if ((TargetProfile != null) && (TargetProfile.Count != 0))
      {
        writer.WritePropertyName("targetProfile");
        writer.WriteStartArray();

        foreach (string valTargetProfile in TargetProfile)
        {
          writer.WriteStringValue(valTargetProfile);
        }

        writer.WriteEndArray();
      }

      if ((_TargetProfile != null) && (_TargetProfile.Count != 0))
      {
        writer.WritePropertyName("_targetProfile");
        writer.WriteStartArray();

        foreach (Element val_TargetProfile in _TargetProfile)
        {
          val_TargetProfile.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(SearchType))
      {
        writer.WriteString("searchType", (string)SearchType!);
      }

      if (_SearchType != null)
      {
        writer.WritePropertyName("_searchType");
        _SearchType.SerializeJson(writer, options);
      }

      if (Binding != null)
      {
        writer.WritePropertyName("binding");
        Binding.SerializeJson(writer, options);
      }

      if ((ReferencedFrom != null) && (ReferencedFrom.Count != 0))
      {
        writer.WritePropertyName("referencedFrom");
        writer.WriteStartArray();

        foreach (OperationDefinitionParameterReferencedFrom valReferencedFrom in ReferencedFrom)
        {
          valReferencedFrom.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Part != null) && (Part.Count != 0))
      {
        writer.WritePropertyName("part");
        writer.WriteStartArray();

        foreach (OperationDefinitionParameter valPart in Part)
        {
          valPart.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "binding":
          Binding = new fhirCsR4.Models.OperationDefinitionParameterBinding();
          Binding.DeserializeJson(ref reader, options);
          break;

        case "documentation":
          Documentation = reader.GetString();
          break;

        case "_documentation":
          _Documentation = new fhirCsR4.Models.Element();
          _Documentation.DeserializeJson(ref reader, options);
          break;

        case "max":
          Max = reader.GetString();
          break;

        case "_max":
          _Max = new fhirCsR4.Models.Element();
          _Max.DeserializeJson(ref reader, options);
          break;

        case "min":
          Min = reader.GetInt32();
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "part":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Part = new List<OperationDefinitionParameter>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.OperationDefinitionParameter objPart = new fhirCsR4.Models.OperationDefinitionParameter();
            objPart.DeserializeJson(ref reader, options);
            Part.Add(objPart);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Part.Count == 0)
          {
            Part = null;
          }

          break;

        case "referencedFrom":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ReferencedFrom = new List<OperationDefinitionParameterReferencedFrom>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.OperationDefinitionParameterReferencedFrom objReferencedFrom = new fhirCsR4.Models.OperationDefinitionParameterReferencedFrom();
            objReferencedFrom.DeserializeJson(ref reader, options);
            ReferencedFrom.Add(objReferencedFrom);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ReferencedFrom.Count == 0)
          {
            ReferencedFrom = null;
          }

          break;

        case "searchType":
          SearchType = reader.GetString();
          break;

        case "_searchType":
          _SearchType = new fhirCsR4.Models.Element();
          _SearchType.DeserializeJson(ref reader, options);
          break;

        case "targetProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          TargetProfile = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            TargetProfile.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (TargetProfile.Count == 0)
          {
            TargetProfile = null;
          }

          break;

        case "_targetProfile":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _TargetProfile = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_TargetProfile = new fhirCsR4.Models.Element();
            obj_TargetProfile.DeserializeJson(ref reader, options);
            _TargetProfile.Add(obj_TargetProfile);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_TargetProfile.Count == 0)
          {
            _TargetProfile = null;
          }

          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "use":
          Use = reader.GetString();
          break;

        case "_use":
          _Use = new fhirCsR4.Models.Element();
          _Use.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the OperationDefinition.parameter.searchType field
  /// </summary>
  public static class OperationDefinitionParameterSearchTypeCodes {
    public const string NUMBER = "number";
    public const string DATE = "date";
    public const string VAL_STRING = "string";
    public const string TOKEN = "token";
    public const string REFERENCE = "reference";
    public const string COMPOSITE = "composite";
    public const string QUANTITY = "quantity";
    public const string URI = "uri";
    public const string SPECIAL = "special";
  }
  /// <summary>
  /// Code Values for the OperationDefinition.parameter.use field
  /// </summary>
  public static class OperationDefinitionParameterUseCodes {
    public const string VAL_IN = "in";
    public const string VAL_OUT = "out";
  }
  /// <summary>
  /// The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<OperationDefinitionOverload>))]
  public class OperationDefinitionOverload : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Comments to go on overload.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// Name of parameter to include in overload.
    /// </summary>
    public List<string> ParameterName { get; set; }
    /// <summary>
    /// Extension container element for ParameterName
    /// </summary>
    public List<Element> _ParameterName { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if ((ParameterName != null) && (ParameterName.Count != 0))
      {
        writer.WritePropertyName("parameterName");
        writer.WriteStartArray();

        foreach (string valParameterName in ParameterName)
        {
          writer.WriteStringValue(valParameterName);
        }

        writer.WriteEndArray();
      }

      if ((_ParameterName != null) && (_ParameterName.Count != 0))
      {
        writer.WritePropertyName("_parameterName");
        writer.WriteStartArray();

        foreach (Element val_ParameterName in _ParameterName)
        {
          val_ParameterName.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Comment))
      {
        writer.WriteString("comment", (string)Comment!);
      }

      if (_Comment != null)
      {
        writer.WritePropertyName("_comment");
        _Comment.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new fhirCsR4.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "parameterName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ParameterName = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ParameterName.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ParameterName.Count == 0)
          {
            ParameterName = null;
          }

          break;

        case "_parameterName":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _ParameterName = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_ParameterName = new fhirCsR4.Models.Element();
            obj_ParameterName.DeserializeJson(ref reader, options);
            _ParameterName.Add(obj_ParameterName);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_ParameterName.Count == 0)
          {
            _ParameterName = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<OperationDefinition>))]
  public class OperationDefinition : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "OperationDefinition";
    /// <summary>
    /// What http methods can be used for the operation depends on the .affectsState value and whether the input parameters are primitive or complex:
    /// 1. Servers SHALL support POST method for all operations.
    /// 2. Servers SHALL support GET method if all the parameters for the operation are primitive or there are no parameters and the operation has affectsState = false.
    /// </summary>
    public bool? AffectsState { get; set; }
    /// <summary>
    /// A constrained profile can make optional parameters required or not used and clarify documentation.
    /// </summary>
    public string Base { get; set; }
    /// <summary>
    /// Extension container element for Base
    /// </summary>
    public Element _Base { get; set; }
    /// <summary>
    /// The name used to invoke the operation.
    /// </summary>
    public string Code { get; set; }
    /// <summary>
    /// Extension container element for Code
    /// </summary>
    public Element _Code { get; set; }
    /// <summary>
    /// Additional information about how to use this operation or named query.
    /// </summary>
    public string Comment { get; set; }
    /// <summary>
    /// Extension container element for Comment
    /// </summary>
    public Element _Comment { get; set; }
    /// <summary>
    /// May be a web site, an email address, a telephone number, etc.
    /// </summary>
    public List<ContactDetail> Contact { get; set; }
    /// <summary>
    /// Note that this is not the same as the resource last-modified-date, since the resource may be a secondary representation of the operation definition. Additional specific dates may be added as extensions or be found by consulting Provenances associated with past versions of the resource.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// This description can be used to capture details such as why the operation definition was built, comments about misuse, instructions for clinical use and interpretation, literature references, examples from the paper world, etc. It is not a rendering of the operation definition as conveyed in the 'text' field of the resource itself. This item SHOULD be populated unless the information is available from context (e.g. the language of the operation definition is presumed to be the predominant language in the place the operation definition was created).
    /// </summary>
    public string Description { get; set; }
    /// <summary>
    /// Extension container element for Description
    /// </summary>
    public Element _Description { get; set; }
    /// <summary>
    /// Allows filtering of operation definitions that are appropriate for use versus not.
    /// </summary>
    public bool? Experimental { get; set; }
    /// <summary>
    /// If present the profile shall not conflict with what is specified in the parameters in the operation definition (max/min etc.), though it may provide additional constraints. The constraints expressed in the profile apply whether the operation is invoked by a POST wih parameters or not.
    /// </summary>
    public string InputProfile { get; set; }
    /// <summary>
    /// Extension container element for InputProfile
    /// </summary>
    public Element _InputProfile { get; set; }
    /// <summary>
    /// Indicates whether this operation can be invoked on a particular instance of one of the given types.
    /// </summary>
    public bool Instance { get; set; }
    /// <summary>
    /// It may be possible for the operation definition to be used in jurisdictions other than those for which it was originally designed or intended.
    /// </summary>
    public List<CodeableConcept> Jurisdiction { get; set; }
    /// <summary>
    /// Named queries are invoked differently, and have different capabilities.
    /// </summary>
    public string Kind { get; set; }
    /// <summary>
    /// Extension container element for Kind
    /// </summary>
    public Element _Kind { get; set; }
    /// <summary>
    /// The name is not expected to be globally unique. The name should be a simple alphanumeric type name to ensure that it is machine-processing friendly.
    /// </summary>
    public string Name { get; set; }
    /// <summary>
    /// Extension container element for Name
    /// </summary>
    public Element _Name { get; set; }
    /// <summary>
    /// If present the profile shall not conflict with what is specified in the parameters in the operation definition (max/min etc.), though it may provide additional constraints. The constraints expressed in the profile apply whether the operation is invoked by a POST wih parameters or not.
    /// </summary>
    public string OutputProfile { get; set; }
    /// <summary>
    /// Extension container element for OutputProfile
    /// </summary>
    public Element _OutputProfile { get; set; }
    /// <summary>
    /// The combinations are suggestions as to which sets of parameters to use together, but the combinations are not intended to be authoritative.
    /// </summary>
    public List<OperationDefinitionOverload> Overload { get; set; }
    /// <summary>
    /// Query Definitions only have one output parameter, named "result". This might not be described, but can be to allow a profile to be defined.
    /// </summary>
    public List<OperationDefinitionParameter> Parameter { get; set; }
    /// <summary>
    /// Usually an organization but may be an individual. The publisher (or steward) of the operation definition is the organization or individual primarily responsible for the maintenance and upkeep of the operation definition. This is not necessarily the same individual or organization that developed and initially authored the content. The publisher is the primary point of contact for questions or issues with the operation definition. This item SHOULD be populated unless the information is available from context.
    /// </summary>
    public string Publisher { get; set; }
    /// <summary>
    /// Extension container element for Publisher
    /// </summary>
    public Element _Publisher { get; set; }
    /// <summary>
    /// This element does not describe the usage of the operation definition. Instead, it provides traceability of ''why'' the resource is either needed or ''why'' it is defined as it is.  This may be used to point to source materials or specifications that drove the structure of this operation definition.
    /// </summary>
    public string Purpose { get; set; }
    /// <summary>
    /// Extension container element for Purpose
    /// </summary>
    public Element _Purpose { get; set; }
    /// <summary>
    /// If the type is an abstract resource ("Resource" or "DomainResource") then the operation can be invoked on any concrete specialization.
    /// </summary>
    public List<string> Resource { get; set; }
    /// <summary>
    /// Extension container element for Resource
    /// </summary>
    public List<Element> _Resource { get; set; }
    /// <summary>
    /// Allows filtering of operation definitions that are appropriate for use versus not.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).
    /// </summary>
    public bool System { get; set; }
    /// <summary>
    /// This name does not need to be machine-processing friendly and may contain punctuation, white-space, etc.
    /// </summary>
    public string Title { get; set; }
    /// <summary>
    /// Extension container element for Title
    /// </summary>
    public Element _Title { get; set; }
    /// <summary>
    /// Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).
    /// </summary>
    public bool Type { get; set; }
    /// <summary>
    /// Can be a urn:uuid: or a urn:oid: but real http: addresses are preferred.  Multiple instances may share the same URL if they have a distinct version.
    /// The determination of when to create a new version of a resource (same url, new version) vs. defining a new artifact is up to the author.  Considerations for making this decision are found in [Technical and Business Versions](resource.html#versions). 
    /// In some cases, the resource can no longer be found at the stated url, but the url itself cannot change. Implementations can use the [meta.source](resource.html#meta) element to indicate where the current master source of the resource can be found.
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// When multiple useContexts are specified, there is no expectation that all or any of the contexts apply.
    /// </summary>
    public List<UsageContext> UseContext { get; set; }
    /// <summary>
    /// There may be different operation definition instances that have the same identifier but different versions.  The version can be appended to the url in a reference to allow a reference to a particular business version of the operation definition with the format [url]|[version].
    /// </summary>
    public string Version { get; set; }
    /// <summary>
    /// Extension container element for Version
    /// </summary>
    public Element _Version { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Version))
      {
        writer.WriteString("version", (string)Version!);
      }

      if (_Version != null)
      {
        writer.WritePropertyName("_version");
        _Version.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Name))
      {
        writer.WriteString("name", (string)Name!);
      }

      if (_Name != null)
      {
        writer.WritePropertyName("_name");
        _Name.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Title))
      {
        writer.WriteString("title", (string)Title!);
      }

      if (_Title != null)
      {
        writer.WritePropertyName("_title");
        _Title.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Kind))
      {
        writer.WriteString("kind", (string)Kind!);
      }

      if (_Kind != null)
      {
        writer.WritePropertyName("_kind");
        _Kind.SerializeJson(writer, options);
      }

      if (Experimental != null)
      {
        writer.WriteBoolean("experimental", (bool)Experimental!);
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Publisher))
      {
        writer.WriteString("publisher", (string)Publisher!);
      }

      if (_Publisher != null)
      {
        writer.WritePropertyName("_publisher");
        _Publisher.SerializeJson(writer, options);
      }

      if ((Contact != null) && (Contact.Count != 0))
      {
        writer.WritePropertyName("contact");
        writer.WriteStartArray();

        foreach (ContactDetail valContact in Contact)
        {
          valContact.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Description))
      {
        writer.WriteString("description", (string)Description!);
      }

      if (_Description != null)
      {
        writer.WritePropertyName("_description");
        _Description.SerializeJson(writer, options);
      }

      if ((UseContext != null) && (UseContext.Count != 0))
      {
        writer.WritePropertyName("useContext");
        writer.WriteStartArray();

        foreach (UsageContext valUseContext in UseContext)
        {
          valUseContext.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Jurisdiction != null) && (Jurisdiction.Count != 0))
      {
        writer.WritePropertyName("jurisdiction");
        writer.WriteStartArray();

        foreach (CodeableConcept valJurisdiction in Jurisdiction)
        {
          valJurisdiction.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Purpose))
      {
        writer.WriteString("purpose", (string)Purpose!);
      }

      if (_Purpose != null)
      {
        writer.WritePropertyName("_purpose");
        _Purpose.SerializeJson(writer, options);
      }

      if (AffectsState != null)
      {
        writer.WriteBoolean("affectsState", (bool)AffectsState!);
      }

      if (!string.IsNullOrEmpty(Code))
      {
        writer.WriteString("code", (string)Code!);
      }

      if (_Code != null)
      {
        writer.WritePropertyName("_code");
        _Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Comment))
      {
        writer.WriteString("comment", (string)Comment!);
      }

      if (_Comment != null)
      {
        writer.WritePropertyName("_comment");
        _Comment.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Base))
      {
        writer.WriteString("base", (string)Base!);
      }

      if (_Base != null)
      {
        writer.WritePropertyName("_base");
        _Base.SerializeJson(writer, options);
      }

      if ((Resource != null) && (Resource.Count != 0))
      {
        writer.WritePropertyName("resource");
        writer.WriteStartArray();

        foreach (string valResource in Resource)
        {
          writer.WriteStringValue(valResource);
        }

        writer.WriteEndArray();
      }

      if ((_Resource != null) && (_Resource.Count != 0))
      {
        writer.WritePropertyName("_resource");
        writer.WriteStartArray();

        foreach (Element val_Resource in _Resource)
        {
          val_Resource.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      writer.WriteBoolean("system", System);

      writer.WriteBoolean("type", Type);

      writer.WriteBoolean("instance", Instance);

      if (!string.IsNullOrEmpty(InputProfile))
      {
        writer.WriteString("inputProfile", (string)InputProfile!);
      }

      if (_InputProfile != null)
      {
        writer.WritePropertyName("_inputProfile");
        _InputProfile.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(OutputProfile))
      {
        writer.WriteString("outputProfile", (string)OutputProfile!);
      }

      if (_OutputProfile != null)
      {
        writer.WritePropertyName("_outputProfile");
        _OutputProfile.SerializeJson(writer, options);
      }

      if ((Parameter != null) && (Parameter.Count != 0))
      {
        writer.WritePropertyName("parameter");
        writer.WriteStartArray();

        foreach (OperationDefinitionParameter valParameter in Parameter)
        {
          valParameter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Overload != null) && (Overload.Count != 0))
      {
        writer.WritePropertyName("overload");
        writer.WriteStartArray();

        foreach (OperationDefinitionOverload valOverload in Overload)
        {
          valOverload.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "affectsState":
          AffectsState = reader.GetBoolean();
          break;

        case "base":
          Base = reader.GetString();
          break;

        case "_base":
          _Base = new fhirCsR4.Models.Element();
          _Base.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = reader.GetString();
          break;

        case "_code":
          _Code = new fhirCsR4.Models.Element();
          _Code.DeserializeJson(ref reader, options);
          break;

        case "comment":
          Comment = reader.GetString();
          break;

        case "_comment":
          _Comment = new fhirCsR4.Models.Element();
          _Comment.DeserializeJson(ref reader, options);
          break;

        case "contact":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Contact = new List<ContactDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ContactDetail objContact = new fhirCsR4.Models.ContactDetail();
            objContact.DeserializeJson(ref reader, options);
            Contact.Add(objContact);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Contact.Count == 0)
          {
            Contact = null;
          }

          break;

        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "description":
          Description = reader.GetString();
          break;

        case "_description":
          _Description = new fhirCsR4.Models.Element();
          _Description.DeserializeJson(ref reader, options);
          break;

        case "experimental":
          Experimental = reader.GetBoolean();
          break;

        case "inputProfile":
          InputProfile = reader.GetString();
          break;

        case "_inputProfile":
          _InputProfile = new fhirCsR4.Models.Element();
          _InputProfile.DeserializeJson(ref reader, options);
          break;

        case "instance":
          Instance = reader.GetBoolean();
          break;

        case "jurisdiction":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Jurisdiction = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objJurisdiction = new fhirCsR4.Models.CodeableConcept();
            objJurisdiction.DeserializeJson(ref reader, options);
            Jurisdiction.Add(objJurisdiction);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Jurisdiction.Count == 0)
          {
            Jurisdiction = null;
          }

          break;

        case "kind":
          Kind = reader.GetString();
          break;

        case "_kind":
          _Kind = new fhirCsR4.Models.Element();
          _Kind.DeserializeJson(ref reader, options);
          break;

        case "name":
          Name = reader.GetString();
          break;

        case "_name":
          _Name = new fhirCsR4.Models.Element();
          _Name.DeserializeJson(ref reader, options);
          break;

        case "outputProfile":
          OutputProfile = reader.GetString();
          break;

        case "_outputProfile":
          _OutputProfile = new fhirCsR4.Models.Element();
          _OutputProfile.DeserializeJson(ref reader, options);
          break;

        case "overload":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Overload = new List<OperationDefinitionOverload>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.OperationDefinitionOverload objOverload = new fhirCsR4.Models.OperationDefinitionOverload();
            objOverload.DeserializeJson(ref reader, options);
            Overload.Add(objOverload);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Overload.Count == 0)
          {
            Overload = null;
          }

          break;

        case "parameter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Parameter = new List<OperationDefinitionParameter>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.OperationDefinitionParameter objParameter = new fhirCsR4.Models.OperationDefinitionParameter();
            objParameter.DeserializeJson(ref reader, options);
            Parameter.Add(objParameter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Parameter.Count == 0)
          {
            Parameter = null;
          }

          break;

        case "publisher":
          Publisher = reader.GetString();
          break;

        case "_publisher":
          _Publisher = new fhirCsR4.Models.Element();
          _Publisher.DeserializeJson(ref reader, options);
          break;

        case "purpose":
          Purpose = reader.GetString();
          break;

        case "_purpose":
          _Purpose = new fhirCsR4.Models.Element();
          _Purpose.DeserializeJson(ref reader, options);
          break;

        case "resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Resource = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            Resource.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Resource.Count == 0)
          {
            Resource = null;
          }

          break;

        case "_resource":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _Resource = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_Resource = new fhirCsR4.Models.Element();
            obj_Resource.DeserializeJson(ref reader, options);
            _Resource.Add(obj_Resource);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_Resource.Count == 0)
          {
            _Resource = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "system":
          System = reader.GetBoolean();
          break;

        case "title":
          Title = reader.GetString();
          break;

        case "_title":
          _Title = new fhirCsR4.Models.Element();
          _Title.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetBoolean();
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        case "useContext":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          UseContext = new List<UsageContext>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.UsageContext objUseContext = new fhirCsR4.Models.UsageContext();
            objUseContext.DeserializeJson(ref reader, options);
            UseContext.Add(objUseContext);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (UseContext.Count == 0)
          {
            UseContext = null;
          }

          break;

        case "version":
          Version = reader.GetString();
          break;

        case "_version":
          _Version = new fhirCsR4.Models.Element();
          _Version.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the OperationDefinition.kind field
  /// </summary>
  public static class OperationDefinitionKindCodes {
    public const string OPERATION = "operation";
    public const string QUERY = "query";
  }
  /// <summary>
  /// Code Values for the OperationDefinition.status field
  /// </summary>
  public static class OperationDefinitionStatusCodes {
    public const string DRAFT = "draft";
    public const string ACTIVE = "active";
    public const string RETIRED = "retired";
    public const string UNKNOWN = "unknown";
  }
}
