// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// For example,  for the original treatment and follow-up exams.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimRelated>))]
  public class ClaimRelated : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Reference to a related claim.
    /// </summary>
    public Reference Claim { get; set; }
    /// <summary>
    /// For example, Property/Casualty insurer claim # or Workers Compensation case # .
    /// </summary>
    public Identifier Reference { get; set; }
    /// <summary>
    /// For example, prior claim or umbrella.
    /// </summary>
    public CodeableConcept Relationship { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Claim != null)
      {
        writer.WritePropertyName("claim");
        Claim.SerializeJson(writer, options);
      }

      if (Relationship != null)
      {
        writer.WritePropertyName("relationship");
        Relationship.SerializeJson(writer, options);
      }

      if (Reference != null)
      {
        writer.WritePropertyName("reference");
        Reference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "claim":
          Claim = new fhirCsR4.Models.Reference();
          Claim.DeserializeJson(ref reader, options);
          break;

        case "reference":
          Reference = new fhirCsR4.Models.Identifier();
          Reference.DeserializeJson(ref reader, options);
          break;

        case "relationship":
          Relationship = new fhirCsR4.Models.CodeableConcept();
          Relationship.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimPayee>))]
  public class ClaimPayee : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Not required if the payee is 'subscriber' or 'provider'.
    /// </summary>
    public Reference Party { get; set; }
    /// <summary>
    /// Type of Party to be reimbursed: subscriber, provider, other.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (Party != null)
      {
        writer.WritePropertyName("party");
        Party.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "party":
          Party = new fhirCsR4.Models.Reference();
          Party.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// The members of the team who provided the products and services.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimCareTeam>))]
  public class ClaimCareTeam : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Member of the team who provided the product or service.
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// The qualification of the practitioner which is applicable for this service.
    /// </summary>
    public CodeableConcept Qualification { get; set; }
    /// <summary>
    /// Responsible might not be required when there is only a single provider listed.
    /// </summary>
    public bool? Responsible { get; set; }
    /// <summary>
    /// Role might not be required when there is only a single provider listed.
    /// </summary>
    public CodeableConcept Role { get; set; }
    /// <summary>
    /// A number to uniquely identify care team entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Provider != null)
      {
        writer.WritePropertyName("provider");
        Provider.SerializeJson(writer, options);
      }

      if (Responsible != null)
      {
        writer.WriteBoolean("responsible", (bool)Responsible!);
      }

      if (Role != null)
      {
        writer.WritePropertyName("role");
        Role.SerializeJson(writer, options);
      }

      if (Qualification != null)
      {
        writer.WritePropertyName("qualification");
        Qualification.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "provider":
          Provider = new fhirCsR4.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "qualification":
          Qualification = new fhirCsR4.Models.CodeableConcept();
          Qualification.DeserializeJson(ref reader, options);
          break;

        case "responsible":
          Responsible = reader.GetBoolean();
          break;

        case "role":
          Role = new fhirCsR4.Models.CodeableConcept();
          Role.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Often there are multiple jurisdiction specific valuesets which are required.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimSupportingInfo>))]
  public class ClaimSupportingInfo : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// This may contain a category for the local bill type codes.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.
    /// </summary>
    public CodeableConcept Code { get; set; }
    /// <summary>
    /// For example: the reason for the additional stay, or why a tooth is  missing.
    /// </summary>
    public CodeableConcept Reason { get; set; }
    /// <summary>
    /// A number to uniquely identify supporting information entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// The date when or period to which this information refers.
    /// </summary>
    public string TimingDate { get; set; }
    /// <summary>
    /// Extension container element for TimingDate
    /// </summary>
    public Element _TimingDate { get; set; }
    /// <summary>
    /// The date when or period to which this information refers.
    /// </summary>
    public Period TimingPeriod { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public bool? ValueBoolean { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public string ValueString { get; set; }
    /// <summary>
    /// Extension container element for ValueString
    /// </summary>
    public Element _ValueString { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public Quantity ValueQuantity { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public Attachment ValueAttachment { get; set; }
    /// <summary>
    /// Could be used to provide references to other resources, document. For example could contain a PDF in an Attachment of the Police Report for an Accident.
    /// </summary>
    public Reference ValueReference { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (Code != null)
      {
        writer.WritePropertyName("code");
        Code.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(TimingDate))
      {
        writer.WriteString("timingDate", (string)TimingDate!);
      }

      if (_TimingDate != null)
      {
        writer.WritePropertyName("_timingDate");
        _TimingDate.SerializeJson(writer, options);
      }

      if (TimingPeriod != null)
      {
        writer.WritePropertyName("timingPeriod");
        TimingPeriod.SerializeJson(writer, options);
      }

      if (ValueBoolean != null)
      {
        writer.WriteBoolean("valueBoolean", (bool)ValueBoolean!);
      }

      if (!string.IsNullOrEmpty(ValueString))
      {
        writer.WriteString("valueString", (string)ValueString!);
      }

      if (_ValueString != null)
      {
        writer.WritePropertyName("_valueString");
        _ValueString.SerializeJson(writer, options);
      }

      if (ValueQuantity != null)
      {
        writer.WritePropertyName("valueQuantity");
        ValueQuantity.SerializeJson(writer, options);
      }

      if (ValueAttachment != null)
      {
        writer.WritePropertyName("valueAttachment");
        ValueAttachment.SerializeJson(writer, options);
      }

      if (ValueReference != null)
      {
        writer.WritePropertyName("valueReference");
        ValueReference.SerializeJson(writer, options);
      }

      if (Reason != null)
      {
        writer.WritePropertyName("reason");
        Reason.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "code":
          Code = new fhirCsR4.Models.CodeableConcept();
          Code.DeserializeJson(ref reader, options);
          break;

        case "reason":
          Reason = new fhirCsR4.Models.CodeableConcept();
          Reason.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "timingDate":
          TimingDate = reader.GetString();
          break;

        case "_timingDate":
          _TimingDate = new fhirCsR4.Models.Element();
          _TimingDate.DeserializeJson(ref reader, options);
          break;

        case "timingPeriod":
          TimingPeriod = new fhirCsR4.Models.Period();
          TimingPeriod.DeserializeJson(ref reader, options);
          break;

        case "valueBoolean":
          ValueBoolean = reader.GetBoolean();
          break;

        case "valueString":
          ValueString = reader.GetString();
          break;

        case "_valueString":
          _ValueString = new fhirCsR4.Models.Element();
          _ValueString.DeserializeJson(ref reader, options);
          break;

        case "valueQuantity":
          ValueQuantity = new fhirCsR4.Models.Quantity();
          ValueQuantity.DeserializeJson(ref reader, options);
          break;

        case "valueAttachment":
          ValueAttachment = new fhirCsR4.Models.Attachment();
          ValueAttachment.DeserializeJson(ref reader, options);
          break;

        case "valueReference":
          ValueReference = new fhirCsR4.Models.Reference();
          ValueReference.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Information about diagnoses relevant to the claim items.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimDiagnosis>))]
  public class ClaimDiagnosis : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
    /// </summary>
    public CodeableConcept DiagnosisCodeableConcept { get; set; }
    /// <summary>
    /// The nature of illness or problem in a coded form or as a reference to an external defined Condition.
    /// </summary>
    public Reference DiagnosisReference { get; set; }
    /// <summary>
    /// Indication of whether the diagnosis was present on admission to a facility.
    /// </summary>
    public CodeableConcept OnAdmission { get; set; }
    /// <summary>
    /// For example DRG (Diagnosis Related Group) or a bundled billing code. A patient may have a diagnosis of a Myocardial Infarction and a DRG for HeartAttack would be assigned. The Claim item (and possible subsequent claims) would refer to the DRG for those line items that were for services related to the heart attack event.
    /// </summary>
    public CodeableConcept PackageCode { get; set; }
    /// <summary>
    /// Diagnosis are presented in list order to their expected importance: primary, secondary, etc.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// For example: admitting, primary, secondary, discharge.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (DiagnosisCodeableConcept != null)
      {
        writer.WritePropertyName("diagnosisCodeableConcept");
        DiagnosisCodeableConcept.SerializeJson(writer, options);
      }

      if (DiagnosisReference != null)
      {
        writer.WritePropertyName("diagnosisReference");
        DiagnosisReference.SerializeJson(writer, options);
      }

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (OnAdmission != null)
      {
        writer.WritePropertyName("onAdmission");
        OnAdmission.SerializeJson(writer, options);
      }

      if (PackageCode != null)
      {
        writer.WritePropertyName("packageCode");
        PackageCode.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "diagnosisCodeableConcept":
          DiagnosisCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          DiagnosisCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "diagnosisReference":
          DiagnosisReference = new fhirCsR4.Models.Reference();
          DiagnosisReference.DeserializeJson(ref reader, options);
          break;

        case "onAdmission":
          OnAdmission = new fhirCsR4.Models.CodeableConcept();
          OnAdmission.DeserializeJson(ref reader, options);
          break;

        case "packageCode":
          PackageCode = new fhirCsR4.Models.CodeableConcept();
          PackageCode.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objType = new fhirCsR4.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Procedures performed on the patient relevant to the billing items with the claim.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimProcedure>))]
  public class ClaimProcedure : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Date and optionally time the procedure was performed.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The code or reference to a Procedure resource which identifies the clinical intervention performed.
    /// </summary>
    public CodeableConcept ProcedureCodeableConcept { get; set; }
    /// <summary>
    /// The code or reference to a Procedure resource which identifies the clinical intervention performed.
    /// </summary>
    public Reference ProcedureReference { get; set; }
    /// <summary>
    /// A number to uniquely identify procedure entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// For example: primary, secondary.
    /// </summary>
    public List<CodeableConcept> Type { get; set; }
    /// <summary>
    /// Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if ((Type != null) && (Type.Count != 0))
      {
        writer.WritePropertyName("type");
        writer.WriteStartArray();

        foreach (CodeableConcept valType in Type)
        {
          valType.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (ProcedureCodeableConcept != null)
      {
        writer.WritePropertyName("procedureCodeableConcept");
        ProcedureCodeableConcept.SerializeJson(writer, options);
      }

      if (ProcedureReference != null)
      {
        writer.WritePropertyName("procedureReference");
        ProcedureReference.SerializeJson(writer, options);
      }

      if ((Udi != null) && (Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();

        foreach (Reference valUdi in Udi)
        {
          valUdi.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "procedureCodeableConcept":
          ProcedureCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          ProcedureCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "procedureReference":
          ProcedureReference = new fhirCsR4.Models.Reference();
          ProcedureReference.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "type":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Type = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objType = new fhirCsR4.Models.CodeableConcept();
            objType.DeserializeJson(ref reader, options);
            Type.Add(objType);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Type.Count == 0)
          {
            Type = null;
          }

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objUdi = new fhirCsR4.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimInsurance>))]
  public class ClaimInsurance : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// A business agreement number established between the provider and the insurer for special business processing purposes.
    /// </summary>
    public string BusinessArrangement { get; set; }
    /// <summary>
    /// Extension container element for BusinessArrangement
    /// </summary>
    public Element _BusinessArrangement { get; set; }
    /// <summary>
    /// Must not be specified when 'focal=true' for this insurance.
    /// </summary>
    public Reference ClaimResponse { get; set; }
    /// <summary>
    /// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
    /// </summary>
    public Reference Coverage { get; set; }
    /// <summary>
    /// A patient may (will) have multiple insurance policies which provide reimbursement for healthcare services and products. For example a person may also be covered by their spouse's policy and both appear in the list (and may be from the same insurer). This flag will be set to true for only one of the listed policies and that policy will be used for adjudicating this claim. Other claims would be created to request adjudication against the other listed policies.
    /// </summary>
    public bool Focal { get; set; }
    /// <summary>
    /// Only required in jurisdictions where insurers, rather than the provider, are required to send claims to  insurers that appear after them in the list. This element is not required when 'subrogation=true'.
    /// </summary>
    public Identifier Identifier { get; set; }
    /// <summary>
    /// This value is an alphanumeric string that may be provided over the phone, via text, via paper, or within a ClaimResponse resource and is not a FHIR Identifier.
    /// </summary>
    public List<string> PreAuthRef { get; set; }
    /// <summary>
    /// Extension container element for PreAuthRef
    /// </summary>
    public List<Element> _PreAuthRef { get; set; }
    /// <summary>
    /// A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      writer.WriteBoolean("focal", Focal);

      if (Identifier != null)
      {
        writer.WritePropertyName("identifier");
        Identifier.SerializeJson(writer, options);
      }

      if (Coverage != null)
      {
        writer.WritePropertyName("coverage");
        Coverage.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(BusinessArrangement))
      {
        writer.WriteString("businessArrangement", (string)BusinessArrangement!);
      }

      if (_BusinessArrangement != null)
      {
        writer.WritePropertyName("_businessArrangement");
        _BusinessArrangement.SerializeJson(writer, options);
      }

      if ((PreAuthRef != null) && (PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("preAuthRef");
        writer.WriteStartArray();

        foreach (string valPreAuthRef in PreAuthRef)
        {
          writer.WriteStringValue(valPreAuthRef);
        }

        writer.WriteEndArray();
      }

      if ((_PreAuthRef != null) && (_PreAuthRef.Count != 0))
      {
        writer.WritePropertyName("_preAuthRef");
        writer.WriteStartArray();

        foreach (Element val_PreAuthRef in _PreAuthRef)
        {
          val_PreAuthRef.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (ClaimResponse != null)
      {
        writer.WritePropertyName("claimResponse");
        ClaimResponse.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "businessArrangement":
          BusinessArrangement = reader.GetString();
          break;

        case "_businessArrangement":
          _BusinessArrangement = new fhirCsR4.Models.Element();
          _BusinessArrangement.DeserializeJson(ref reader, options);
          break;

        case "claimResponse":
          ClaimResponse = new fhirCsR4.Models.Reference();
          ClaimResponse.DeserializeJson(ref reader, options);
          break;

        case "coverage":
          Coverage = new fhirCsR4.Models.Reference();
          Coverage.DeserializeJson(ref reader, options);
          break;

        case "focal":
          Focal = reader.GetBoolean();
          break;

        case "identifier":
          Identifier = new fhirCsR4.Models.Identifier();
          Identifier.DeserializeJson(ref reader, options);
          break;

        case "preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          PreAuthRef = new List<string>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            PreAuthRef.Add(reader.GetString());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (PreAuthRef.Count == 0)
          {
            PreAuthRef = null;
          }

          break;

        case "_preAuthRef":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          _PreAuthRef = new List<Element>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Element obj_PreAuthRef = new fhirCsR4.Models.Element();
            obj_PreAuthRef.DeserializeJson(ref reader, options);
            _PreAuthRef.Add(obj_PreAuthRef);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (_PreAuthRef.Count == 0)
          {
            _PreAuthRef = null;
          }

          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Details of an accident which resulted in injuries which required the products and services listed in the claim.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimAccident>))]
  public class ClaimAccident : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// The date of the accident has to precede the dates of the products and services but within a reasonable timeframe.
    /// </summary>
    public string Date { get; set; }
    /// <summary>
    /// Extension container element for Date
    /// </summary>
    public Element _Date { get; set; }
    /// <summary>
    /// The physical location of the accident event.
    /// </summary>
    public Address LocationAddress { get; set; }
    /// <summary>
    /// The physical location of the accident event.
    /// </summary>
    public Reference LocationReference { get; set; }
    /// <summary>
    /// The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Date))
      {
        writer.WriteString("date", (string)Date!);
      }

      if (_Date != null)
      {
        writer.WritePropertyName("_date");
        _Date.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (LocationAddress != null)
      {
        writer.WritePropertyName("locationAddress");
        LocationAddress.SerializeJson(writer, options);
      }

      if (LocationReference != null)
      {
        writer.WritePropertyName("locationReference");
        LocationReference.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "date":
          Date = reader.GetString();
          break;

        case "_date":
          _Date = new fhirCsR4.Models.Element();
          _Date.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          LocationAddress = new fhirCsR4.Models.Address();
          LocationAddress.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          LocationReference = new fhirCsR4.Models.Reference();
          LocationReference.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimItemDetailSubDetail>))]
  public class ClaimItemDetailSubDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// For example: Neonatal program, child dental program or drug users recovery program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The type of revenue or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A number to uniquely identify item entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (ProductOrService != null)
      {
        writer.WritePropertyName("productOrService");
        ProductOrService.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProgramCode != null) && (ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valProgramCode in ProgramCode)
        {
          valProgramCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if ((Udi != null) && (Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();

        foreach (Reference valUdi in Udi)
        {
          valUdi.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objModifier = new fhirCsR4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          ProductOrService = new fhirCsR4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objProgramCode = new fhirCsR4.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "revenue":
          Revenue = new fhirCsR4.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objUdi = new fhirCsR4.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new fhirCsR4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimItemDetail>))]
  public class ClaimItemDetail : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or out of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// For example: Neonatal program, child dental program or drug users recovery program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The type of revenue or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A number to uniquely identify item entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
    /// </summary>
    public List<ClaimItemDetailSubDetail> SubDetail { get; set; }
    /// <summary>
    /// Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (ProductOrService != null)
      {
        writer.WritePropertyName("productOrService");
        ProductOrService.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProgramCode != null) && (ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valProgramCode in ProgramCode)
        {
          valProgramCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if ((Udi != null) && (Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();

        foreach (Reference valUdi in Udi)
        {
          valUdi.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SubDetail != null) && (SubDetail.Count != 0))
      {
        writer.WritePropertyName("subDetail");
        writer.WriteStartArray();

        foreach (ClaimItemDetailSubDetail valSubDetail in SubDetail)
        {
          valSubDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objModifier = new fhirCsR4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "productOrService":
          ProductOrService = new fhirCsR4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objProgramCode = new fhirCsR4.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "revenue":
          Revenue = new fhirCsR4.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "subDetail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubDetail = new List<ClaimItemDetailSubDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimItemDetailSubDetail objSubDetail = new fhirCsR4.Models.ClaimItemDetailSubDetail();
            objSubDetail.DeserializeJson(ref reader, options);
            SubDetail.Add(objSubDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubDetail.Count == 0)
          {
            SubDetail = null;
          }

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objUdi = new fhirCsR4.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new fhirCsR4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<ClaimItem>))]
  public class ClaimItem : BackboneElement,  IFhirJsonSerializable {
    /// <summary>
    /// For example: Providing a tooth code, allows an insurer to identify a provider performing a filling on a tooth that was previously removed.
    /// </summary>
    public CodeableConcept BodySite { get; set; }
    /// <summary>
    /// CareTeam members related to this service or product.
    /// </summary>
    public List<uint> CareTeamSequence { get; set; }
    /// <summary>
    /// Examples include Medical Care, Periodontics, Renal Dialysis, Vision Coverage.
    /// </summary>
    public CodeableConcept Category { get; set; }
    /// <summary>
    /// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
    /// </summary>
    public List<ClaimItemDetail> Detail { get; set; }
    /// <summary>
    /// Diagnosis applicable for this service or product.
    /// </summary>
    public List<uint> DiagnosisSequence { get; set; }
    /// <summary>
    /// This will typically be the encounter the event occurred within, but some activities may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter.
    /// </summary>
    public List<Reference> Encounter { get; set; }
    /// <summary>
    /// To show a 10% senior's discount, the value entered is: 0.90 (1.00 - 0.10).
    /// </summary>
    public decimal? Factor { get; set; }
    /// <summary>
    /// Extension container element for Factor
    /// </summary>
    public Element _Factor { get; set; }
    /// <summary>
    /// Exceptions, special conditions and supporting information applicable for this service or product.
    /// </summary>
    public List<uint> InformationSequence { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public CodeableConcept LocationCodeableConcept { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public Address LocationAddress { get; set; }
    /// <summary>
    /// Where the product or service was provided.
    /// </summary>
    public Reference LocationReference { get; set; }
    /// <summary>
    /// For example in Oral whether the treatment is cosmetic or associated with TMJ, or for Medical whether the treatment was outside the clinic or outside of office hours.
    /// </summary>
    public List<CodeableConcept> Modifier { get; set; }
    /// <summary>
    /// For example, the formula: quantity * unitPrice * factor  = net. Quantity and factor are assumed to be 1 if not supplied.
    /// </summary>
    public Money Net { get; set; }
    /// <summary>
    /// Procedures applicable for this service or product.
    /// </summary>
    public List<uint> ProcedureSequence { get; set; }
    /// <summary>
    /// If this is an actual service or product line, i.e. not a Group, then use code to indicate the Professional Service or Product supplied (e.g. CTP, HCPCS, USCLS, ICD10, NCPDP, DIN, RxNorm, ACHI, CCI). If a grouping item then use a group code to indicate the type of thing being grouped e.g. 'glasses' or 'compound'.
    /// </summary>
    public CodeableConcept ProductOrService { get; set; }
    /// <summary>
    /// For example: Neonatal program, child dental program or drug users recovery program.
    /// </summary>
    public List<CodeableConcept> ProgramCode { get; set; }
    /// <summary>
    /// The number of repetitions of a service or product.
    /// </summary>
    public Quantity Quantity { get; set; }
    /// <summary>
    /// The type of revenue or cost center providing the product and/or service.
    /// </summary>
    public CodeableConcept Revenue { get; set; }
    /// <summary>
    /// A number to uniquely identify item entries.
    /// </summary>
    public uint Sequence { get; set; }
    /// <summary>
    /// The date or dates when the service or product was supplied, performed or completed.
    /// </summary>
    public string ServicedDate { get; set; }
    /// <summary>
    /// Extension container element for ServicedDate
    /// </summary>
    public Element _ServicedDate { get; set; }
    /// <summary>
    /// The date or dates when the service or product was supplied, performed or completed.
    /// </summary>
    public Period ServicedPeriod { get; set; }
    /// <summary>
    /// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
    /// </summary>
    public List<CodeableConcept> SubSite { get; set; }
    /// <summary>
    /// Unique Device Identifiers associated with this line item.
    /// </summary>
    public List<Reference> Udi { get; set; }
    /// <summary>
    /// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
    /// </summary>
    public Money UnitPrice { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.BackboneElement)this).SerializeJson(writer, options, false);

      writer.WriteNumber("sequence", Sequence);

      if ((CareTeamSequence != null) && (CareTeamSequence.Count != 0))
      {
        writer.WritePropertyName("careTeamSequence");
        writer.WriteStartArray();

        foreach (uint valCareTeamSequence in CareTeamSequence)
        {
          writer.WriteNumberValue(valCareTeamSequence);
        }

        writer.WriteEndArray();
      }

      if ((DiagnosisSequence != null) && (DiagnosisSequence.Count != 0))
      {
        writer.WritePropertyName("diagnosisSequence");
        writer.WriteStartArray();

        foreach (uint valDiagnosisSequence in DiagnosisSequence)
        {
          writer.WriteNumberValue(valDiagnosisSequence);
        }

        writer.WriteEndArray();
      }

      if ((ProcedureSequence != null) && (ProcedureSequence.Count != 0))
      {
        writer.WritePropertyName("procedureSequence");
        writer.WriteStartArray();

        foreach (uint valProcedureSequence in ProcedureSequence)
        {
          writer.WriteNumberValue(valProcedureSequence);
        }

        writer.WriteEndArray();
      }

      if ((InformationSequence != null) && (InformationSequence.Count != 0))
      {
        writer.WritePropertyName("informationSequence");
        writer.WriteStartArray();

        foreach (uint valInformationSequence in InformationSequence)
        {
          writer.WriteNumberValue(valInformationSequence);
        }

        writer.WriteEndArray();
      }

      if (Revenue != null)
      {
        writer.WritePropertyName("revenue");
        Revenue.SerializeJson(writer, options);
      }

      if (Category != null)
      {
        writer.WritePropertyName("category");
        Category.SerializeJson(writer, options);
      }

      if (ProductOrService != null)
      {
        writer.WritePropertyName("productOrService");
        ProductOrService.SerializeJson(writer, options);
      }

      if ((Modifier != null) && (Modifier.Count != 0))
      {
        writer.WritePropertyName("modifier");
        writer.WriteStartArray();

        foreach (CodeableConcept valModifier in Modifier)
        {
          valModifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((ProgramCode != null) && (ProgramCode.Count != 0))
      {
        writer.WritePropertyName("programCode");
        writer.WriteStartArray();

        foreach (CodeableConcept valProgramCode in ProgramCode)
        {
          valProgramCode.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(ServicedDate))
      {
        writer.WriteString("servicedDate", (string)ServicedDate!);
      }

      if (_ServicedDate != null)
      {
        writer.WritePropertyName("_servicedDate");
        _ServicedDate.SerializeJson(writer, options);
      }

      if (ServicedPeriod != null)
      {
        writer.WritePropertyName("servicedPeriod");
        ServicedPeriod.SerializeJson(writer, options);
      }

      if (LocationCodeableConcept != null)
      {
        writer.WritePropertyName("locationCodeableConcept");
        LocationCodeableConcept.SerializeJson(writer, options);
      }

      if (LocationAddress != null)
      {
        writer.WritePropertyName("locationAddress");
        LocationAddress.SerializeJson(writer, options);
      }

      if (LocationReference != null)
      {
        writer.WritePropertyName("locationReference");
        LocationReference.SerializeJson(writer, options);
      }

      if (Quantity != null)
      {
        writer.WritePropertyName("quantity");
        Quantity.SerializeJson(writer, options);
      }

      if (UnitPrice != null)
      {
        writer.WritePropertyName("unitPrice");
        UnitPrice.SerializeJson(writer, options);
      }

      if (Factor != null)
      {
        writer.WriteNumber("factor", (decimal)Factor!);
      }

      if (_Factor != null)
      {
        writer.WritePropertyName("_factor");
        _Factor.SerializeJson(writer, options);
      }

      if (Net != null)
      {
        writer.WritePropertyName("net");
        Net.SerializeJson(writer, options);
      }

      if ((Udi != null) && (Udi.Count != 0))
      {
        writer.WritePropertyName("udi");
        writer.WriteStartArray();

        foreach (Reference valUdi in Udi)
        {
          valUdi.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (BodySite != null)
      {
        writer.WritePropertyName("bodySite");
        BodySite.SerializeJson(writer, options);
      }

      if ((SubSite != null) && (SubSite.Count != 0))
      {
        writer.WritePropertyName("subSite");
        writer.WriteStartArray();

        foreach (CodeableConcept valSubSite in SubSite)
        {
          valSubSite.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Encounter != null) && (Encounter.Count != 0))
      {
        writer.WritePropertyName("encounter");
        writer.WriteStartArray();

        foreach (Reference valEncounter in Encounter)
        {
          valEncounter.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Detail != null) && (Detail.Count != 0))
      {
        writer.WritePropertyName("detail");
        writer.WriteStartArray();

        foreach (ClaimItemDetail valDetail in Detail)
        {
          valDetail.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "bodySite":
          BodySite = new fhirCsR4.Models.CodeableConcept();
          BodySite.DeserializeJson(ref reader, options);
          break;

        case "careTeamSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CareTeamSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            CareTeamSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CareTeamSequence.Count == 0)
          {
            CareTeamSequence = null;
          }

          break;

        case "category":
          Category = new fhirCsR4.Models.CodeableConcept();
          Category.DeserializeJson(ref reader, options);
          break;

        case "detail":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Detail = new List<ClaimItemDetail>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimItemDetail objDetail = new fhirCsR4.Models.ClaimItemDetail();
            objDetail.DeserializeJson(ref reader, options);
            Detail.Add(objDetail);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Detail.Count == 0)
          {
            Detail = null;
          }

          break;

        case "diagnosisSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          DiagnosisSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            DiagnosisSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (DiagnosisSequence.Count == 0)
          {
            DiagnosisSequence = null;
          }

          break;

        case "encounter":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Encounter = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objEncounter = new fhirCsR4.Models.Reference();
            objEncounter.DeserializeJson(ref reader, options);
            Encounter.Add(objEncounter);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Encounter.Count == 0)
          {
            Encounter = null;
          }

          break;

        case "factor":
          Factor = reader.GetDecimal();
          break;

        case "_factor":
          _Factor = new fhirCsR4.Models.Element();
          _Factor.DeserializeJson(ref reader, options);
          break;

        case "informationSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          InformationSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            InformationSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (InformationSequence.Count == 0)
          {
            InformationSequence = null;
          }

          break;

        case "locationCodeableConcept":
          LocationCodeableConcept = new fhirCsR4.Models.CodeableConcept();
          LocationCodeableConcept.DeserializeJson(ref reader, options);
          break;

        case "locationAddress":
          LocationAddress = new fhirCsR4.Models.Address();
          LocationAddress.DeserializeJson(ref reader, options);
          break;

        case "locationReference":
          LocationReference = new fhirCsR4.Models.Reference();
          LocationReference.DeserializeJson(ref reader, options);
          break;

        case "modifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Modifier = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objModifier = new fhirCsR4.Models.CodeableConcept();
            objModifier.DeserializeJson(ref reader, options);
            Modifier.Add(objModifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Modifier.Count == 0)
          {
            Modifier = null;
          }

          break;

        case "net":
          Net = new fhirCsR4.Models.Money();
          Net.DeserializeJson(ref reader, options);
          break;

        case "procedureSequence":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProcedureSequence = new List<uint>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            ProcedureSequence.Add(reader.GetUInt32());

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProcedureSequence.Count == 0)
          {
            ProcedureSequence = null;
          }

          break;

        case "productOrService":
          ProductOrService = new fhirCsR4.Models.CodeableConcept();
          ProductOrService.DeserializeJson(ref reader, options);
          break;

        case "programCode":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          ProgramCode = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objProgramCode = new fhirCsR4.Models.CodeableConcept();
            objProgramCode.DeserializeJson(ref reader, options);
            ProgramCode.Add(objProgramCode);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (ProgramCode.Count == 0)
          {
            ProgramCode = null;
          }

          break;

        case "quantity":
          Quantity = new fhirCsR4.Models.Quantity();
          Quantity.DeserializeJson(ref reader, options);
          break;

        case "revenue":
          Revenue = new fhirCsR4.Models.CodeableConcept();
          Revenue.DeserializeJson(ref reader, options);
          break;

        case "sequence":
          Sequence = reader.GetUInt32();
          break;

        case "servicedDate":
          ServicedDate = reader.GetString();
          break;

        case "_servicedDate":
          _ServicedDate = new fhirCsR4.Models.Element();
          _ServicedDate.DeserializeJson(ref reader, options);
          break;

        case "servicedPeriod":
          ServicedPeriod = new fhirCsR4.Models.Period();
          ServicedPeriod.DeserializeJson(ref reader, options);
          break;

        case "subSite":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SubSite = new List<CodeableConcept>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.CodeableConcept objSubSite = new fhirCsR4.Models.CodeableConcept();
            objSubSite.DeserializeJson(ref reader, options);
            SubSite.Add(objSubSite);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SubSite.Count == 0)
          {
            SubSite = null;
          }

          break;

        case "udi":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Udi = new List<Reference>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Reference objUdi = new fhirCsR4.Models.Reference();
            objUdi.DeserializeJson(ref reader, options);
            Udi.Add(objUdi);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Udi.Count == 0)
          {
            Udi = null;
          }

          break;

        case "unitPrice":
          UnitPrice = new fhirCsR4.Models.Money();
          UnitPrice.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.BackboneElement)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<Claim>))]
  public class Claim : DomainResource,  IFhirJsonSerializable {
    /// <summary>
    /// Resource Type Name
    /// </summary>
    public override string ResourceType => "Claim";
    /// <summary>
    /// Details of an accident which resulted in injuries which required the products and services listed in the claim.
    /// </summary>
    public ClaimAccident Accident { get; set; }
    /// <summary>
    /// Typically this would be today or in the past for a claim, and today or in the future for preauthorizations and predeterminations. Typically line item dates of service should fall within the billing period if one is specified.
    /// </summary>
    public Period BillablePeriod { get; set; }
    /// <summary>
    /// The members of the team who provided the products and services.
    /// </summary>
    public List<ClaimCareTeam> CareTeam { get; set; }
    /// <summary>
    /// This field is independent of the date of creation of the resource as it may reflect the creation date of a source document prior to digitization. Typically for claims all services must be completed as of this date.
    /// </summary>
    public string Created { get; set; }
    /// <summary>
    /// Extension container element for Created
    /// </summary>
    public Element _Created { get; set; }
    /// <summary>
    /// Information about diagnoses relevant to the claim items.
    /// </summary>
    public List<ClaimDiagnosis> Diagnosis { get; set; }
    /// <summary>
    /// Individual who created the claim, predetermination or preauthorization.
    /// </summary>
    public Reference Enterer { get; set; }
    /// <summary>
    /// Facility where the services were provided.
    /// </summary>
    public Reference Facility { get; set; }
    /// <summary>
    /// This field is only used for preauthorizations.
    /// </summary>
    public CodeableConcept FundsReserve { get; set; }
    /// <summary>
    /// A unique identifier assigned to this claim.
    /// </summary>
    public List<Identifier> Identifier { get; set; }
    /// <summary>
    /// All insurance coverages for the patient which may be applicable for reimbursement, of the products and services listed in the claim, are typically provided in the claim to allow insurers to confirm the ordering of the insurance coverages relative to local 'coordination of benefit' rules. One coverage (and only one) with 'focal=true' is to be used in the adjudication of this claim. Coverages appearing before the focal Coverage in the list, and where 'Coverage.subrogation=false', should provide a reference to the ClaimResponse containing the adjudication results of the prior claim.
    /// </summary>
    public List<ClaimInsurance> Insurance { get; set; }
    /// <summary>
    /// The Insurer who is target of the request.
    /// </summary>
    public Reference Insurer { get; set; }
    /// <summary>
    /// A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
    /// </summary>
    public List<ClaimItem> Item { get; set; }
    /// <summary>
    /// For example, a physician may prescribe a medication which the pharmacy determines is contraindicated, or for which the patient has an intolerance, and therefore issues a new prescription for an alternate medication which has the same therapeutic intent. The prescription from the pharmacy becomes the 'prescription' and that from the physician becomes the 'original prescription'.
    /// </summary>
    public Reference OriginalPrescription { get; set; }
    /// <summary>
    /// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.
    /// </summary>
    public Reference Patient { get; set; }
    /// <summary>
    /// Often providers agree to receive the benefits payable to reduce the near-term costs to the patient. The insurer may decline to pay the provider and choose to pay the subscriber instead.
    /// </summary>
    public ClaimPayee Payee { get; set; }
    /// <summary>
    /// Prescription to support the dispensing of pharmacy, device or vision products.
    /// </summary>
    public Reference Prescription { get; set; }
    /// <summary>
    /// If a claim processor is unable to complete the processing as per the priority then they should generate and error and not process the request.
    /// </summary>
    public CodeableConcept Priority { get; set; }
    /// <summary>
    /// Procedures performed on the patient relevant to the billing items with the claim.
    /// </summary>
    public List<ClaimProcedure> Procedure { get; set; }
    /// <summary>
    /// Typically this field would be 1..1 where this party is responsible for the claim but not necessarily professionally responsible for the provision of the individual products and services listed below.
    /// </summary>
    public Reference Provider { get; set; }
    /// <summary>
    /// The referral resource which lists the date, practitioner, reason and other supporting information.
    /// </summary>
    public Reference Referral { get; set; }
    /// <summary>
    /// For example,  for the original treatment and follow-up exams.
    /// </summary>
    public List<ClaimRelated> Related { get; set; }
    /// <summary>
    /// This element is labeled as a modifier because the status contains codes that mark the resource as not currently valid.
    /// </summary>
    public string Status { get; set; }
    /// <summary>
    /// Extension container element for Status
    /// </summary>
    public Element _Status { get; set; }
    /// <summary>
    /// This may contain the local bill type codes, for example the US UB-04 bill type code or the CMS bill type.
    /// </summary>
    public CodeableConcept SubType { get; set; }
    /// <summary>
    /// Often there are multiple jurisdiction specific valuesets which are required.
    /// </summary>
    public List<ClaimSupportingInfo> SupportingInfo { get; set; }
    /// <summary>
    /// The total value of the all the items in the claim.
    /// </summary>
    public Money Total { get; set; }
    /// <summary>
    /// The majority of jurisdictions use: oral, pharmacy, vision, professional and institutional, or variants on those terms, as the general styles of claims. The valueset is extensible to accommodate other jurisdictional requirements.
    /// </summary>
    public CodeableConcept Type { get; set; }
    /// <summary>
    /// A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
    /// </summary>
    public string Use { get; set; }
    /// <summary>
    /// Extension container element for Use
    /// </summary>
    public Element _Use { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      if (!string.IsNullOrEmpty(ResourceType))
      {
        writer.WriteString("resourceType", (string)ResourceType!);
      }


      ((fhirCsR4.Models.DomainResource)this).SerializeJson(writer, options, false);

      if ((Identifier != null) && (Identifier.Count != 0))
      {
        writer.WritePropertyName("identifier");
        writer.WriteStartArray();

        foreach (Identifier valIdentifier in Identifier)
        {
          valIdentifier.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (!string.IsNullOrEmpty(Status))
      {
        writer.WriteString("status", (string)Status!);
      }

      if (_Status != null)
      {
        writer.WritePropertyName("_status");
        _Status.SerializeJson(writer, options);
      }

      if (Type != null)
      {
        writer.WritePropertyName("type");
        Type.SerializeJson(writer, options);
      }

      if (SubType != null)
      {
        writer.WritePropertyName("subType");
        SubType.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Use))
      {
        writer.WriteString("use", (string)Use!);
      }

      if (_Use != null)
      {
        writer.WritePropertyName("_use");
        _Use.SerializeJson(writer, options);
      }

      if (Patient != null)
      {
        writer.WritePropertyName("patient");
        Patient.SerializeJson(writer, options);
      }

      if (BillablePeriod != null)
      {
        writer.WritePropertyName("billablePeriod");
        BillablePeriod.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Created))
      {
        writer.WriteString("created", (string)Created!);
      }

      if (_Created != null)
      {
        writer.WritePropertyName("_created");
        _Created.SerializeJson(writer, options);
      }

      if (Enterer != null)
      {
        writer.WritePropertyName("enterer");
        Enterer.SerializeJson(writer, options);
      }

      if (Insurer != null)
      {
        writer.WritePropertyName("insurer");
        Insurer.SerializeJson(writer, options);
      }

      if (Provider != null)
      {
        writer.WritePropertyName("provider");
        Provider.SerializeJson(writer, options);
      }

      if (Priority != null)
      {
        writer.WritePropertyName("priority");
        Priority.SerializeJson(writer, options);
      }

      if (FundsReserve != null)
      {
        writer.WritePropertyName("fundsReserve");
        FundsReserve.SerializeJson(writer, options);
      }

      if ((Related != null) && (Related.Count != 0))
      {
        writer.WritePropertyName("related");
        writer.WriteStartArray();

        foreach (ClaimRelated valRelated in Related)
        {
          valRelated.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Prescription != null)
      {
        writer.WritePropertyName("prescription");
        Prescription.SerializeJson(writer, options);
      }

      if (OriginalPrescription != null)
      {
        writer.WritePropertyName("originalPrescription");
        OriginalPrescription.SerializeJson(writer, options);
      }

      if (Payee != null)
      {
        writer.WritePropertyName("payee");
        Payee.SerializeJson(writer, options);
      }

      if (Referral != null)
      {
        writer.WritePropertyName("referral");
        Referral.SerializeJson(writer, options);
      }

      if (Facility != null)
      {
        writer.WritePropertyName("facility");
        Facility.SerializeJson(writer, options);
      }

      if ((CareTeam != null) && (CareTeam.Count != 0))
      {
        writer.WritePropertyName("careTeam");
        writer.WriteStartArray();

        foreach (ClaimCareTeam valCareTeam in CareTeam)
        {
          valCareTeam.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((SupportingInfo != null) && (SupportingInfo.Count != 0))
      {
        writer.WritePropertyName("supportingInfo");
        writer.WriteStartArray();

        foreach (ClaimSupportingInfo valSupportingInfo in SupportingInfo)
        {
          valSupportingInfo.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Diagnosis != null) && (Diagnosis.Count != 0))
      {
        writer.WritePropertyName("diagnosis");
        writer.WriteStartArray();

        foreach (ClaimDiagnosis valDiagnosis in Diagnosis)
        {
          valDiagnosis.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Procedure != null) && (Procedure.Count != 0))
      {
        writer.WritePropertyName("procedure");
        writer.WriteStartArray();

        foreach (ClaimProcedure valProcedure in Procedure)
        {
          valProcedure.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if ((Insurance != null) && (Insurance.Count != 0))
      {
        writer.WritePropertyName("insurance");
        writer.WriteStartArray();

        foreach (ClaimInsurance valInsurance in Insurance)
        {
          valInsurance.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Accident != null)
      {
        writer.WritePropertyName("accident");
        Accident.SerializeJson(writer, options);
      }

      if ((Item != null) && (Item.Count != 0))
      {
        writer.WritePropertyName("item");
        writer.WriteStartArray();

        foreach (ClaimItem valItem in Item)
        {
          valItem.SerializeJson(writer, options, true);
        }

        writer.WriteEndArray();
      }

      if (Total != null)
      {
        writer.WritePropertyName("total");
        Total.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "accident":
          Accident = new fhirCsR4.Models.ClaimAccident();
          Accident.DeserializeJson(ref reader, options);
          break;

        case "billablePeriod":
          BillablePeriod = new fhirCsR4.Models.Period();
          BillablePeriod.DeserializeJson(ref reader, options);
          break;

        case "careTeam":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          CareTeam = new List<ClaimCareTeam>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimCareTeam objCareTeam = new fhirCsR4.Models.ClaimCareTeam();
            objCareTeam.DeserializeJson(ref reader, options);
            CareTeam.Add(objCareTeam);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (CareTeam.Count == 0)
          {
            CareTeam = null;
          }

          break;

        case "created":
          Created = reader.GetString();
          break;

        case "_created":
          _Created = new fhirCsR4.Models.Element();
          _Created.DeserializeJson(ref reader, options);
          break;

        case "diagnosis":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Diagnosis = new List<ClaimDiagnosis>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimDiagnosis objDiagnosis = new fhirCsR4.Models.ClaimDiagnosis();
            objDiagnosis.DeserializeJson(ref reader, options);
            Diagnosis.Add(objDiagnosis);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Diagnosis.Count == 0)
          {
            Diagnosis = null;
          }

          break;

        case "enterer":
          Enterer = new fhirCsR4.Models.Reference();
          Enterer.DeserializeJson(ref reader, options);
          break;

        case "facility":
          Facility = new fhirCsR4.Models.Reference();
          Facility.DeserializeJson(ref reader, options);
          break;

        case "fundsReserve":
          FundsReserve = new fhirCsR4.Models.CodeableConcept();
          FundsReserve.DeserializeJson(ref reader, options);
          break;

        case "identifier":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Identifier = new List<Identifier>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.Identifier objIdentifier = new fhirCsR4.Models.Identifier();
            objIdentifier.DeserializeJson(ref reader, options);
            Identifier.Add(objIdentifier);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Identifier.Count == 0)
          {
            Identifier = null;
          }

          break;

        case "insurance":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Insurance = new List<ClaimInsurance>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimInsurance objInsurance = new fhirCsR4.Models.ClaimInsurance();
            objInsurance.DeserializeJson(ref reader, options);
            Insurance.Add(objInsurance);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Insurance.Count == 0)
          {
            Insurance = null;
          }

          break;

        case "insurer":
          Insurer = new fhirCsR4.Models.Reference();
          Insurer.DeserializeJson(ref reader, options);
          break;

        case "item":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Item = new List<ClaimItem>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimItem objItem = new fhirCsR4.Models.ClaimItem();
            objItem.DeserializeJson(ref reader, options);
            Item.Add(objItem);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Item.Count == 0)
          {
            Item = null;
          }

          break;

        case "originalPrescription":
          OriginalPrescription = new fhirCsR4.Models.Reference();
          OriginalPrescription.DeserializeJson(ref reader, options);
          break;

        case "patient":
          Patient = new fhirCsR4.Models.Reference();
          Patient.DeserializeJson(ref reader, options);
          break;

        case "payee":
          Payee = new fhirCsR4.Models.ClaimPayee();
          Payee.DeserializeJson(ref reader, options);
          break;

        case "prescription":
          Prescription = new fhirCsR4.Models.Reference();
          Prescription.DeserializeJson(ref reader, options);
          break;

        case "priority":
          Priority = new fhirCsR4.Models.CodeableConcept();
          Priority.DeserializeJson(ref reader, options);
          break;

        case "procedure":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Procedure = new List<ClaimProcedure>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimProcedure objProcedure = new fhirCsR4.Models.ClaimProcedure();
            objProcedure.DeserializeJson(ref reader, options);
            Procedure.Add(objProcedure);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Procedure.Count == 0)
          {
            Procedure = null;
          }

          break;

        case "provider":
          Provider = new fhirCsR4.Models.Reference();
          Provider.DeserializeJson(ref reader, options);
          break;

        case "referral":
          Referral = new fhirCsR4.Models.Reference();
          Referral.DeserializeJson(ref reader, options);
          break;

        case "related":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          Related = new List<ClaimRelated>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimRelated objRelated = new fhirCsR4.Models.ClaimRelated();
            objRelated.DeserializeJson(ref reader, options);
            Related.Add(objRelated);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (Related.Count == 0)
          {
            Related = null;
          }

          break;

        case "status":
          Status = reader.GetString();
          break;

        case "_status":
          _Status = new fhirCsR4.Models.Element();
          _Status.DeserializeJson(ref reader, options);
          break;

        case "subType":
          SubType = new fhirCsR4.Models.CodeableConcept();
          SubType.DeserializeJson(ref reader, options);
          break;

        case "supportingInfo":
          if ((reader.TokenType != JsonTokenType.StartArray) || (!reader.Read()))
          {
            throw new JsonException();
          }

          SupportingInfo = new List<ClaimSupportingInfo>();

          while (reader.TokenType != JsonTokenType.EndArray)
          {
            fhirCsR4.Models.ClaimSupportingInfo objSupportingInfo = new fhirCsR4.Models.ClaimSupportingInfo();
            objSupportingInfo.DeserializeJson(ref reader, options);
            SupportingInfo.Add(objSupportingInfo);

            if (!reader.Read())
            {
              throw new JsonException();
            }
          }

          if (SupportingInfo.Count == 0)
          {
            SupportingInfo = null;
          }

          break;

        case "total":
          Total = new fhirCsR4.Models.Money();
          Total.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = new fhirCsR4.Models.CodeableConcept();
          Type.DeserializeJson(ref reader, options);
          break;

        case "use":
          Use = reader.GetString();
          break;

        case "_use":
          _Use = new fhirCsR4.Models.Element();
          _Use.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.DomainResource)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the Claim.status field
  /// </summary>
  public static class ClaimStatusCodes {
    public const string ACTIVE = "active";
    public const string CANCELLED = "cancelled";
    public const string DRAFT = "draft";
    public const string ENTERED_IN_ERROR = "entered-in-error";
  }
  /// <summary>
  /// Code Values for the Claim.use field
  /// </summary>
  public static class ClaimUseCodes {
    public const string CLAIM = "claim";
    public const string PREAUTHORIZATION = "preauthorization";
    public const string PREDETERMINATION = "predetermination";
  }
}
