// <auto-generated />
// Built from: hl7.fhir.r4b.core version: 4.1.0
  // Option: "NAMESPACE" = "fhirCsR4"

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using fhirCsR4.Serialization;

namespace fhirCsR4.Models
{
  /// <summary>
  /// Related artifacts such as additional documentation, justification, or bibliographic references.
  /// </summary>
  [JsonConverter(typeof(fhirCsR4.Serialization.JsonStreamComponentConverter<RelatedArtifact>))]
  public class RelatedArtifact : Element,  IFhirJsonSerializable {
    /// <summary>
    /// Additional structured information about citations should be captured as extensions.
    /// </summary>
    public string Citation { get; set; }
    /// <summary>
    /// Extension container element for Citation
    /// </summary>
    public Element _Citation { get; set; }
    /// <summary>
    /// A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
    /// </summary>
    public string Display { get; set; }
    /// <summary>
    /// Extension container element for Display
    /// </summary>
    public Element _Display { get; set; }
    /// <summary>
    /// The document being referenced, represented as an attachment. This is exclusive with the resource element.
    /// </summary>
    public Attachment Document { get; set; }
    /// <summary>
    /// A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
    /// </summary>
    public string Label { get; set; }
    /// <summary>
    /// Extension container element for Label
    /// </summary>
    public Element _Label { get; set; }
    /// <summary>
    /// If the type is predecessor, this is a reference to the succeeding knowledge resource. If the type is successor, this is a reference to the prior knowledge resource.
    /// </summary>
    public string Resource { get; set; }
    /// <summary>
    /// Extension container element for Resource
    /// </summary>
    public Element _Resource { get; set; }
    /// <summary>
    /// The type of relationship to the related artifact.
    /// </summary>
    public string Type { get; set; }
    /// <summary>
    /// Extension container element for Type
    /// </summary>
    public Element _Type { get; set; }
    /// <summary>
    /// If a document or resource element is present, this element SHALL NOT be provided (use the url or reference in the Attachment or resource reference).
    /// </summary>
    public string Url { get; set; }
    /// <summary>
    /// Extension container element for Url
    /// </summary>
    public Element _Url { get; set; }
    /// <summary>
    /// Serialize to a JSON object
    /// </summary>
    public new void SerializeJson(Utf8JsonWriter writer, JsonSerializerOptions options, bool includeStartObject = true)
    {
      if (includeStartObject)
      {
        writer.WriteStartObject();
      }
      ((fhirCsR4.Models.Element)this).SerializeJson(writer, options, false);

      if (!string.IsNullOrEmpty(Type))
      {
        writer.WriteString("type", (string)Type!);
      }

      if (_Type != null)
      {
        writer.WritePropertyName("_type");
        _Type.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Label))
      {
        writer.WriteString("label", (string)Label!);
      }

      if (_Label != null)
      {
        writer.WritePropertyName("_label");
        _Label.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Display))
      {
        writer.WriteString("display", (string)Display!);
      }

      if (_Display != null)
      {
        writer.WritePropertyName("_display");
        _Display.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Citation))
      {
        writer.WriteString("citation", (string)Citation!);
      }

      if (_Citation != null)
      {
        writer.WritePropertyName("_citation");
        _Citation.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Url))
      {
        writer.WriteString("url", (string)Url!);
      }

      if (_Url != null)
      {
        writer.WritePropertyName("_url");
        _Url.SerializeJson(writer, options);
      }

      if (Document != null)
      {
        writer.WritePropertyName("document");
        Document.SerializeJson(writer, options);
      }

      if (!string.IsNullOrEmpty(Resource))
      {
        writer.WriteString("resource", (string)Resource!);
      }

      if (_Resource != null)
      {
        writer.WritePropertyName("_resource");
        _Resource.SerializeJson(writer, options);
      }

      if (includeStartObject)
      {
        writer.WriteEndObject();
      }
    }
    /// <summary>
    /// Deserialize a JSON property
    /// </summary>
    public new void DeserializeJsonProperty(ref Utf8JsonReader reader, JsonSerializerOptions options, string propertyName)
    {
      switch (propertyName)
      {
        case "citation":
          Citation = reader.GetString();
          break;

        case "_citation":
          _Citation = new fhirCsR4.Models.Element();
          _Citation.DeserializeJson(ref reader, options);
          break;

        case "display":
          Display = reader.GetString();
          break;

        case "_display":
          _Display = new fhirCsR4.Models.Element();
          _Display.DeserializeJson(ref reader, options);
          break;

        case "document":
          Document = new fhirCsR4.Models.Attachment();
          Document.DeserializeJson(ref reader, options);
          break;

        case "label":
          Label = reader.GetString();
          break;

        case "_label":
          _Label = new fhirCsR4.Models.Element();
          _Label.DeserializeJson(ref reader, options);
          break;

        case "resource":
          Resource = reader.GetString();
          break;

        case "_resource":
          _Resource = new fhirCsR4.Models.Element();
          _Resource.DeserializeJson(ref reader, options);
          break;

        case "type":
          Type = reader.GetString();
          break;

        case "_type":
          _Type = new fhirCsR4.Models.Element();
          _Type.DeserializeJson(ref reader, options);
          break;

        case "url":
          Url = reader.GetString();
          break;

        case "_url":
          _Url = new fhirCsR4.Models.Element();
          _Url.DeserializeJson(ref reader, options);
          break;

        default:
          ((fhirCsR4.Models.Element)this).DeserializeJsonProperty(ref reader, options, propertyName);
          break;
      }
    }

    /// <summary>
    /// Deserialize a JSON object
    /// </summary>
    public new void DeserializeJson(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
      string propertyName;

      while (reader.Read())
      {
        if (reader.TokenType == JsonTokenType.EndObject)
        {
          return;
        }

        if (reader.TokenType == JsonTokenType.PropertyName)
        {
          propertyName = reader.GetString();
          reader.Read();
          this.DeserializeJsonProperty(ref reader, options, propertyName);
        }
      }

      throw new JsonException();
    }
  }
  /// <summary>
  /// Code Values for the RelatedArtifact.type field
  /// </summary>
  public static class RelatedArtifactTypeCodes {
    public const string DOCUMENTATION = "documentation";
    public const string JUSTIFICATION = "justification";
    public const string CITATION = "citation";
    public const string PREDECESSOR = "predecessor";
    public const string SUCCESSOR = "successor";
    public const string DERIVED_FROM = "derived-from";
    public const string DEPENDS_ON = "depends-on";
    public const string COMPOSED_OF = "composed-of";
  }
}
